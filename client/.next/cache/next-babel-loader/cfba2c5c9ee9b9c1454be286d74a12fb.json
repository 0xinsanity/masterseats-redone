{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport { Table, Grid, Typography } from 'antd';\nimport { CloseAdjustedOutline, returnEmojiString, GenIconButton, GenButton, AddTicketContainer, PlusCircleAdjustedOutline, ExclamationCircleAdjustedOutlined } from '../DashboardPage/DashboardPage.styled';\nimport { TicketStatus } from '../../../api';\nimport { ScreenSize } from '../../lib';\nimport AddTicketModal from './AddTicketModal';\nimport styled from 'styled-components';\nimport AreYouSureModal from '../Universal/AreYouSureModal';\nimport media from 'styled-media-query';\nconst Container = styled.div.withConfig({\n  displayName: \"ConglomerateTable__Container\",\n  componentId: \"sc-1l2yr6c-0\"\n})([\"padding-left:5%;padding-right:5%;padding-top:15px;padding-bottom:30px;\", \"\"], media.lessThan(\"small\")`\n        padding-left: 0px;\n        padding-right: 0px;\n    `);\nconst {\n  useBreakpoint\n} = Grid;\n\nconst ConglomerateTable = props => {\n  const {\n    tickets,\n    postTicket,\n    removeTicket,\n    visible,\n    setVisibility,\n    confirmTransferSeller,\n    confirmTransferBuyer,\n    refundTicket\n  } = props;\n  const screens = useBreakpoint();\n  const [screenSize, setScreenSize] = useState(undefined);\n  const [removeTicketVisible, setRemoveTicketVisible] = useState(false);\n  const [action, setAction] = useState(\"\");\n  const [id, setId] = useState(\"\");\n  useEffect(() => {\n    Object.entries(screens).filter(screen => !!screen[1]).map(screen => {\n      if (screen[0] !== ScreenSize[screenSize]) {\n        setScreenSize(ScreenSize[screen[0]]);\n      }\n    });\n  }, [screens]);\n\n  const clickAddTicket = () => {\n    setVisibility(true);\n  };\n\n  return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(AddTicketModal, {\n    postTicket: postTicket,\n    visible: visible,\n    onCancel: () => setVisibility(false)\n  }), /*#__PURE__*/React.createElement(AreYouSureModal, {\n    title: \"Are you sure you want to do that?\",\n    visible: removeTicketVisible,\n    onCancel: () => setRemoveTicketVisible(false),\n    onComplete: async () => {\n      setRemoveTicketVisible(false);\n\n      if (action === \"confirmTransferSeller\") {\n        await confirmTransferSeller(id);\n      } else if (action === \"removeTicket\") {\n        await removeTicket(id);\n      }\n    }\n  }), /*#__PURE__*/React.createElement(AddTicketContainer, null, /*#__PURE__*/React.createElement(GenButton, {\n    onClick: clickAddTicket,\n    icon: /*#__PURE__*/React.createElement(PlusCircleAdjustedOutline, null)\n  }, screenSize >= 1 ? \"Add Ticket\" : null)), /*#__PURE__*/React.createElement(Table, {\n    columns: [{\n      title: 'Game',\n      key: 'game',\n      dataIndex: 'game',\n      render: (text, data) => returnEmojiString(data.game)\n    }, {\n      title: 'Section',\n      key: 'section',\n      dataIndex: 'section'\n    }, {\n      title: 'Price ($)',\n      key: 'price',\n      dataIndex: 'price',\n      render: text => parseFloat(text).toFixed(2)\n    }, {\n      title: 'Status',\n      key: 'status',\n      dataIndex: 'status'\n    }, {\n      title: '',\n      key: 'options',\n      dataIndex: 'status',\n      render: (text, data) => {\n        if (data.status === TicketStatus.CompletedTransfer) {\n          return /*#__PURE__*/React.createElement(\"div\", null);\n        } else if (data.status === TicketStatus.PendingTransfer) {\n          if (!data.confirmed_buyer_transfer && data.confirmed_seller_transfer) {\n            return /*#__PURE__*/React.createElement(\"div\", {\n              style: {\n                display: 'flex',\n                justifyContent: 'flex-end'\n              }\n            }, /*#__PURE__*/React.createElement(Typography.Text, null, \"Buyer Must Confirm Transfer\"));\n          } else {\n            return /*#__PURE__*/React.createElement(\"div\", {\n              style: {\n                display: 'flex',\n                justifyContent: 'flex-end'\n              }\n            }, /*#__PURE__*/React.createElement(GenIconButton, {\n              disabled: data.confirmed_seller_transfer,\n              icon: /*#__PURE__*/React.createElement(ExclamationCircleAdjustedOutlined, null),\n              onClick: () => {\n                setRemoveTicketVisible(true);\n                setId(data.id);\n                setAction(\"confirmTransferSeller\");\n              }\n            }, screenSize > 0 ? \"Confirm Transfer\" : null));\n          }\n        } else if (data.status === TicketStatus.Available) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            style: {\n              display: 'flex',\n              justifyContent: 'flex-end'\n            }\n          }, /*#__PURE__*/React.createElement(GenIconButton, {\n            icon: /*#__PURE__*/React.createElement(CloseAdjustedOutline, null),\n            onClick: () => {\n              setRemoveTicketVisible(true);\n              setId(data.id);\n              setAction(\"removeTicket\");\n            }\n          }, screenSize > 0 ? \"Remove\" : null));\n        }\n      }\n    }],\n    dataSource: tickets,\n    pagination: {\n      position: ['bottomCenter']\n    }\n  }));\n};\n\nexport default ConglomerateTable;","map":{"version":3,"sources":["/Users/insanity/Documents/MasterSeats/new/client/src/areas/TicketWallet/ConglomerateTable.tsx"],"names":["React","useState","useEffect","Table","Grid","Typography","CloseAdjustedOutline","returnEmojiString","GenIconButton","GenButton","AddTicketContainer","PlusCircleAdjustedOutline","ExclamationCircleAdjustedOutlined","TicketStatus","ScreenSize","AddTicketModal","styled","AreYouSureModal","media","Container","div","lessThan","useBreakpoint","ConglomerateTable","props","tickets","postTicket","removeTicket","visible","setVisibility","confirmTransferSeller","confirmTransferBuyer","refundTicket","screens","screenSize","setScreenSize","undefined","removeTicketVisible","setRemoveTicketVisible","action","setAction","id","setId","Object","entries","filter","screen","map","clickAddTicket","title","key","dataIndex","render","text","data","game","parseFloat","toFixed","status","CompletedTransfer","PendingTransfer","confirmed_buyer_transfer","confirmed_seller_transfer","display","justifyContent","Available","position"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useContext} from 'react'\nimport {Table, Modal, Grid, message, Typography} from 'antd'\nimport {CloseAdjustedOutline, returnEmojiString, GenIconButton, GenButton, AddTicketContainer, PlusCircleAdjustedOutline, ExclamationCircleAdjustedOutlined} from '../DashboardPage/DashboardPage.styled'\nimport {MichiganFootballGame, Ticket, TicketStatus, PostTicketBody} from '../../../api'\nimport {ScreenSize} from '../../lib'\nimport AddTicketModal from './AddTicketModal'\nimport styled from 'styled-components'\nimport AreYouSureModal from '../Universal/AreYouSureModal'\nimport media from 'styled-media-query'\n\nconst Container = styled.div`\n    padding-left: 5%;\n    padding-right: 5%;\n    padding-top: 15px;\n    padding-bottom: 30px;\n\n    ${media.lessThan(\"small\")`\n        padding-left: 0px;\n        padding-right: 0px;\n    `}\n`\n\nconst {useBreakpoint} = Grid\n\ninterface SellProps {\n    tickets: Ticket[]\n    postTicket: (ticketBody: PostTicketBody) => void\n    removeTicket: (ticketId: string) => void\n    visible: boolean\n    setVisibility: (visible: boolean) => void\n    confirmTransferSeller: (ticket_id: string) => void,\n    confirmTransferBuyer: (ticket_id: string) => void\n    refundTicket: (ticket_id: string) => void\n}\n\nconst ConglomerateTable: React.FC<SellProps> = props => {\n    const {tickets, postTicket, removeTicket, visible, setVisibility, confirmTransferSeller, confirmTransferBuyer, refundTicket} = props\n\n    const screens = useBreakpoint()\n    const [screenSize, setScreenSize] = useState<ScreenSize>(undefined)\n    const [removeTicketVisible, setRemoveTicketVisible] = useState(false)\n    const [action, setAction] = useState(\"\")\n    const [id, setId] = useState(\"\")\n    \n    useEffect(() => {\n        Object.entries(screens)\n        .filter(screen => !!screen[1])\n        .map(screen => {\n            if (screen[0] !== ScreenSize[screenSize]) {\n                setScreenSize(ScreenSize[screen[0]])\n            }\n        })\n    }, [screens])\n\n\n    const clickAddTicket = () => {\n        setVisibility(true)\n    }\n\n    return (\n        <Container>\n            <AddTicketModal postTicket={postTicket}\n                            visible={visible} \n                            onCancel={() => setVisibility(false)}/>\n            <AreYouSureModal title={\"Are you sure you want to do that?\"}\n                            visible={removeTicketVisible}\n                            onCancel={() => setRemoveTicketVisible(false)}\n                            onComplete={async () => {\n                                setRemoveTicketVisible(false)\n                                if (action === \"confirmTransferSeller\") {\n                                    await confirmTransferSeller(id)\n                                } else if (action === \"removeTicket\") {\n                                    await removeTicket(id)\n                                }\n                            }}\n                />\n            <AddTicketContainer>\n                <GenButton onClick={clickAddTicket} icon={<PlusCircleAdjustedOutline />}>\n                    {screenSize >= 1 ? \"Add Ticket\" : null}\n                </GenButton>\n            </AddTicketContainer>\n            <Table columns={[\n                {\n                    title: 'Game',\n                    key: 'game',\n                    dataIndex: 'game',\n                    render: (text, data) => returnEmojiString(data.game)\n                },\n                {\n                    title: 'Section',\n                    key: 'section',\n                    dataIndex: 'section'\n                },\n                {\n                    title: 'Price ($)',\n                    key: 'price',\n                    dataIndex: 'price',\n                    render: (text) => parseFloat(text).toFixed(2)\n                },\n                {\n                    title: 'Status',\n                    key: 'status',\n                    dataIndex: 'status'\n                },\n                {\n                    title: '',\n                    key: 'options',\n                    dataIndex: 'status',\n                    render: (text, data) => {\n                        if (data.status === TicketStatus.CompletedTransfer) {\n                            return (<div/>)\n                        } else if (data.status === TicketStatus.PendingTransfer) {\n                            if (!data.confirmed_buyer_transfer && data.confirmed_seller_transfer) {\n                                return (\n                                    <div style={{display: 'flex', justifyContent: 'flex-end'}}>\n                                        <Typography.Text>Buyer Must Confirm Transfer</Typography.Text>\n                                    </div>\n                                )\n                            } else {\n                                return (\n                                    <div style={{display: 'flex', justifyContent: 'flex-end'}}>\n                                        <GenIconButton disabled={data.confirmed_seller_transfer} icon={<ExclamationCircleAdjustedOutlined />} onClick={() => {\n                                            setRemoveTicketVisible(true)\n                                            setId(data.id)\n                                            setAction(\"confirmTransferSeller\")\n                                        }}>\n                                            {screenSize > 0 ? \"Confirm Transfer\" : null}\n                                        </GenIconButton>\n                                    </div>\n                                )\n                            }\n                        } else if (data.status === TicketStatus.Available) {\n                            return (\n                                <div style={{display: 'flex', justifyContent: 'flex-end'}}>\n                                    <GenIconButton icon={<CloseAdjustedOutline />} onClick={() => {\n                                        setRemoveTicketVisible(true)\n                                        setId(data.id)\n                                        setAction(\"removeTicket\")\n                                    }}>\n                                        {screenSize > 0 ? \"Remove\" : null}\n                                    </GenIconButton>\n                            </div>)\n                        }\n                    }\n                }\n            ]} dataSource={tickets} pagination={{ position: ['bottomCenter'] }} />\n        </Container>\n    )\n}\n\nexport default ConglomerateTable"]},"metadata":{},"sourceType":"module"}