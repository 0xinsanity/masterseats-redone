{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, createContext } from \"react\";\nimport { message } from 'antd';\nimport { DefaultApi } from '../../api';\nexport const UserContext = /*#__PURE__*/createContext({\n  currentUser: null,\n  setToken: null,\n  api: null\n});\n\nclass UserProvider extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"setToken\", async (token, login) => {\n      if (token === null) {\n        this.setState({\n          api: new DefaultApi(),\n          currentToken: null,\n          currentUser: null\n        });\n        return;\n      }\n\n      try {\n        const api = new DefaultApi({\n          accessToken: token\n        });\n        const body = await api.getUser();\n\n        if (login !== undefined) {\n          message.success(\"Welcome, \" + body.data.first_name + \"!\");\n        }\n\n        this.setState({\n          api,\n          currentUser: body.data\n        });\n      } catch (err) {\n        console.error(err);\n      }\n    });\n\n    _defineProperty(this, \"state\", {\n      currentUser: null,\n      setToken: this.setToken,\n      api: new DefaultApi()\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(UserContext.Provider, {\n      value: this.state\n    }, this.props.children);\n  }\n\n}\n\nexport default UserProvider;","map":{"version":3,"sources":["/Users/insanity/Documents/MasterSeats/new/client/src/lib/UserContext.tsx"],"names":["React","Component","createContext","message","DefaultApi","UserContext","currentUser","setToken","api","UserProvider","token","login","setState","currentToken","accessToken","body","getUser","undefined","success","data","first_name","err","console","error","render","state","props","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,aAA3B,QAAgD,OAAhD;AACA,SAAQC,OAAR,QAAsB,MAAtB;AAGA,SAAcC,UAAd,QAA+B,WAA/B;AAQA,OAAO,MAAMC,WAAW,gBAAGH,aAAa,CAAwB;AAC5DI,EAAAA,WAAW,EAAE,IAD+C;AAE5DC,EAAAA,QAAQ,EAAE,IAFkD;AAG5DC,EAAAA,GAAG,EAAE;AAHuD,CAAxB,CAAjC;;AAKP,MAAMC,YAAN,SAA2BR,SAA3B,CAAqC;AAAA;AAAA;;AAAA,sCACtB,OAAOS,KAAP,EAA6BC,KAA7B,KAAiD;AACxD,UAAID,KAAK,KAAK,IAAd,EAAoB;AAChB,aAAKE,QAAL,CAAc;AAACJ,UAAAA,GAAG,EAAE,IAAIJ,UAAJ,EAAN;AAAwBS,UAAAA,YAAY,EAAE,IAAtC;AAA4CP,UAAAA,WAAW,EAAE;AAAzD,SAAd;AACA;AACH;;AACD,UAAI;AACA,cAAME,GAAG,GAAG,IAAIJ,UAAJ,CAAe;AAACU,UAAAA,WAAW,EAAEJ;AAAd,SAAf,CAAZ;AACA,cAAMK,IAAI,GAAG,MAAMP,GAAG,CAACQ,OAAJ,EAAnB;;AACA,YAAIL,KAAK,KAAKM,SAAd,EAAyB;AACrBd,UAAAA,OAAO,CAACe,OAAR,CAAgB,cAAcH,IAAI,CAACI,IAAL,CAAUC,UAAxB,GAAqC,GAArD;AACH;;AACD,aAAKR,QAAL,CAAc;AAACJ,UAAAA,GAAD;AAAMF,UAAAA,WAAW,EAAES,IAAI,CAACI;AAAxB,SAAd;AACH,OAPD,CAOE,OAAOE,GAAP,EAAY;AACVC,QAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACH;AACJ,KAhBgC;;AAAA,mCAkBzB;AACJf,MAAAA,WAAW,EAAE,IADT;AAEJC,MAAAA,QAAQ,EAAE,KAAKA,QAFX;AAGJC,MAAAA,GAAG,EAAE,IAAIJ,UAAJ;AAHD,KAlByB;AAAA;;AAwBjCoB,EAAAA,MAAM,GAAG;AACL,wBACA,oBAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAE,KAAKC;AAAlC,OACK,KAAKC,KAAL,CAAWC,QADhB,CADA;AAKH;;AA9BgC;;AAgCrC,eAAelB,YAAf","sourcesContent":["import React, { Component, createContext } from \"react\";\nimport {message} from 'antd'\nimport Router, {withRouter} from \"next/router\";\nimport { NextPage, NextPageContext } from 'next';\nimport {User, DefaultApi} from '../../api'\n\ninterface ContextProps {\n  currentUser?: User,\n  api?: DefaultApi\n  setToken: (token: string | null, login?: boolean) => Promise<void>\n}\n\nexport const UserContext = createContext<Partial<ContextProps>>({\n    currentUser: null,\n    setToken: null,\n    api: null\n});\nclass UserProvider extends Component {\n    setToken = async (token: string | null, login?: boolean) => {\n        if (token === null) {\n            this.setState({api: new DefaultApi(), currentToken: null, currentUser: null})\n            return\n        }\n        try {\n            const api = new DefaultApi({accessToken: token})\n            const body = await api.getUser()\n            if (login !== undefined) {\n                message.success(\"Welcome, \" + body.data.first_name + \"!\")\n            }\n            this.setState({api, currentUser: body.data})\n        } catch (err) {\n            console.error(err)\n        }\n    }\n\n    state = {\n        currentUser: null,\n        setToken: this.setToken,\n        api: new DefaultApi()\n    }\n\n    render() {\n        return (\n        <UserContext.Provider value={this.state}>\n            {this.props.children}\n        </UserContext.Provider>\n        );\n    }\n}\nexport default UserProvider;"]},"metadata":{},"sourceType":"module"}