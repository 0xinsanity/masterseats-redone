{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport { StyledHeader, MenuLogoContainer, LogoBackground, MenuStyled, NavBarItemMain, NavBarItem } from './Navbar.styled';\nimport OpenPage from './OpenPage';\nimport { ScreenSize } from '../../lib';\nimport { Grid } from 'antd';\nimport _ from 'lodash';\nimport { UserContext } from '../../lib/UserContext';\nconst {\n  useBreakpoint\n} = Grid;\nconst NAV_OPTIONS = [{\n  title: 'Home',\n  onClick: () => OpenPage('/')\n}, {\n  title: 'Login',\n  onClick: () => OpenPage('/login')\n}, {\n  title: 'Sign Up',\n  onClick: () => OpenPage('/register')\n}];\nconst NOT_LOGGED_IN_OPTIONS = [{\n  title: 'Log In',\n  onClick: () => OpenPage('/login')\n}];\n\nconst Navbar = props => {\n  _s();\n\n  const {\n    currentUser\n  } = useContext(UserContext);\n  const {\n    selected,\n    isDashboard,\n    isLoggedIn\n  } = props;\n  const [isAtTop, setIsAtTop] = useState(true);\n  const screens = useBreakpoint();\n  const [screenSize, setScreenSize] = useState(undefined);\n  const DASHBOARD_NAV_OPTIONS = [{\n    title: 'Home',\n    onClick: () => OpenPage('/dashboard')\n  }, {\n    title: currentUser !== null ? `Welcome, ${currentUser.first_name}` : 'Profile',\n    onClick: () => OpenPage('/profile')\n  }];\n  useEffect(() => {\n    Object.entries(screens).filter(screen => !!screen[1]).map(screen => {\n      if (screen[0] !== ScreenSize[screenSize]) {\n        setScreenSize(ScreenSize[screen[0]]);\n      }\n    });\n  }, [screens]);\n  useEffect(() => {\n    const handleScroll = () => {\n      const currentScrollY = window.scrollY;\n\n      if (currentScrollY == 0) {\n        setIsAtTop(true);\n      }\n\n      if (currentScrollY > 0) {\n        setIsAtTop(false);\n      }\n    };\n\n    window.addEventListener(\"scroll\", handleScroll, {\n      passive: true\n    });\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, [isAtTop]);\n  var options = [];\n\n  if (!isDashboard || isDashboard === undefined) {\n    options = NAV_OPTIONS;\n  } else {\n    if (isLoggedIn) {\n      options = DASHBOARD_NAV_OPTIONS;\n    } else {\n      options = NOT_LOGGED_IN_OPTIONS;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(StyledHeader, {\n    style: {\n      backgroundColor: isAtTop ? '#FFCB05' : 'rgba(255,255,255,0.85)'\n    }\n  }, /*#__PURE__*/React.createElement(MenuLogoContainer, null, (!isDashboard || isDashboard === undefined) && screenSize !== 0 ? /*#__PURE__*/React.createElement(LogoBackground, {\n    style: {\n      visibility: isAtTop ? 'hidden' : 'visible',\n      opacity: isAtTop ? 0 : 1\n    },\n    href: '/'\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    height: 42,\n    src: require('../../../assets/images/logo/logo.png'),\n    alt: \"MasterSeats Logo\"\n  })) : null, /*#__PURE__*/React.createElement(MenuStyled, null, _.map(options, ({\n    title,\n    onClick\n  }, index) => {\n    if (index === selected) {\n      return /*#__PURE__*/React.createElement(NavBarItemMain, {\n        onClick: onClick\n      }, title);\n    } else {\n      return /*#__PURE__*/React.createElement(NavBarItem, {\n        onClick: onClick\n      }, title);\n    }\n  }))));\n};\n\n_s(Navbar, \"AD3KvB9EYUgu0WCiLqDdZ9AH8iI=\", false, function () {\n  return [useBreakpoint];\n});\n\n_c = Navbar;\nexport default Navbar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"sources":["/Users/insanity/Documents/MasterSeats/new/client/src/areas/Universal/Navbar.tsx"],"names":["React","useEffect","useState","useContext","StyledHeader","MenuLogoContainer","LogoBackground","MenuStyled","NavBarItemMain","NavBarItem","OpenPage","ScreenSize","Grid","_","UserContext","useBreakpoint","NAV_OPTIONS","title","onClick","NOT_LOGGED_IN_OPTIONS","Navbar","props","currentUser","selected","isDashboard","isLoggedIn","isAtTop","setIsAtTop","screens","screenSize","setScreenSize","undefined","DASHBOARD_NAV_OPTIONS","first_name","Object","entries","filter","screen","map","handleScroll","currentScrollY","window","scrollY","addEventListener","passive","removeEventListener","options","backgroundColor","visibility","opacity","require","index"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react'\nimport {StyledHeader, MenuLogoContainer, LogoBackground, MenuStyled, NavBarItemMain, NavBarItem} from './Navbar.styled'\nimport OpenPage from './OpenPage'\nimport {ScreenSize} from '../../lib'\nimport {Grid} from 'antd'\nimport _ from 'lodash'\nimport {UserContext} from '../../lib/UserContext'\n\nconst {useBreakpoint} = Grid\n\nconst NAV_OPTIONS: {title: string, onClick: () => void}[] = [\n    {title: 'Home', onClick: () => OpenPage('/')},\n    {title: 'Login', onClick: () => OpenPage('/login')},\n    {title: 'Sign Up', onClick: () => OpenPage('/register')},\n]\n\nconst NOT_LOGGED_IN_OPTIONS: {title: string, onClick: () => void}[] = [\n    {title: 'Log In', onClick: () => OpenPage('/login')}\n] \n\ninterface NavbarProps {\n    selected: number\n    isDashboard?: boolean\n    isLoggedIn: boolean\n}\n\nconst Navbar: React.FC<NavbarProps> = (props) => {\n    const {currentUser} = useContext(UserContext)\n    const {selected, isDashboard, isLoggedIn} = props\n    const [isAtTop, setIsAtTop] = useState(true);\n    const screens = useBreakpoint()\n    const [screenSize, setScreenSize] = useState<ScreenSize>(undefined)\n    \n    const DASHBOARD_NAV_OPTIONS: {title: string, onClick: () => void}[] = [\n        {title: 'Home', onClick: () => OpenPage('/dashboard')},\n        {title: currentUser !== null ? `Welcome, ${currentUser.first_name}` : 'Profile', onClick: () => OpenPage('/profile')}\n    ] \n\n    useEffect(() => {\n        Object.entries(screens)\n        .filter(screen => !!screen[1])\n        .map(screen => {\n            if (screen[0] !== ScreenSize[screenSize]) {\n                setScreenSize(ScreenSize[screen[0]])\n            }\n        })\n    }, [screens])\n  \n    useEffect(() => {\n      const handleScroll = () => {\n        const currentScrollY = window.scrollY;\n        if (currentScrollY == 0) {\n            setIsAtTop(true);\n        }\n        if (currentScrollY > 0) {\n            setIsAtTop(false);\n        }\n      };\n  \n      window.addEventListener(\"scroll\", handleScroll, { passive: true });\n  \n      return () => window.removeEventListener(\"scroll\", handleScroll);\n    }, [isAtTop]);\n\n    var options = []\n    if (!isDashboard || isDashboard === undefined) {\n        options = NAV_OPTIONS\n    } else {\n        if (isLoggedIn) {\n            options = DASHBOARD_NAV_OPTIONS\n        } else {\n            options = NOT_LOGGED_IN_OPTIONS\n        }\n    }\n\n    return (\n        <StyledHeader style={{backgroundColor: isAtTop ? '#FFCB05' : 'rgba(255,255,255,0.85)'}}>\n            <MenuLogoContainer>\n                {(!isDashboard || isDashboard === undefined) && screenSize !== 0 ? \n                    <LogoBackground style={{visibility: isAtTop ? 'hidden' : 'visible', opacity: isAtTop ? 0 : 1}} href={'/'}>\n                        <img height={42} src={require('../../../assets/images/logo/logo.png')} alt={\"MasterSeats Logo\"}/>\n                    </LogoBackground>\n                : null}\n                \n                <MenuStyled>\n                    {_.map(options, ({title, onClick}, index) => {\n                        if (index === selected) {\n                            return (\n                                    <NavBarItemMain onClick={onClick}>\n                                        {title}\n                                    </NavBarItemMain>\n                            )\n                        } else {\n                            return (\n                                    <NavBarItem onClick={onClick}>\n                                        {title}\n                                    </NavBarItem>\n                            )\n                        }\n                    })}\n                </MenuStyled>\n            </MenuLogoContainer>\n        </StyledHeader>\n    )\n}\n\nexport default Navbar"]},"metadata":{},"sourceType":"module"}