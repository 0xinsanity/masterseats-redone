{"ast":null,"code":"export let ScreenSize;\n\n(function (ScreenSize) {\n  ScreenSize[ScreenSize[\"xs\"] = 0] = \"xs\";\n  ScreenSize[ScreenSize[\"sm\"] = 1] = \"sm\";\n  ScreenSize[ScreenSize[\"md\"] = 2] = \"md\";\n  ScreenSize[ScreenSize[\"lg\"] = 3] = \"lg\";\n  ScreenSize[ScreenSize[\"xl\"] = 4] = \"xl\";\n  ScreenSize[ScreenSize[\"xxl\"] = 5] = \"xxl\";\n})(ScreenSize || (ScreenSize = {}));\n\nexport const seeIfLogin = async (api, setToken, cb) => {\n  const email = localStorage.getItem('email');\n  const password = localStorage.getItem('password');\n\n  if (email !== null && email !== '') {\n    try {\n      const body = await api.login({\n        email: email,\n        password: password\n      });\n      await setToken(body.data);\n    } catch (err) {\n      console.error(err);\n    }\n  } else {\n    typeof cb === 'function' && cb();\n  }\n};","map":{"version":3,"sources":["/Users/insanity/Documents/MasterSeats/new/client/src/lib/index.ts"],"names":["ScreenSize","seeIfLogin","api","setToken","cb","email","localStorage","getItem","password","body","login","data","err","console","error"],"mappings":"AACA,WAAYA,UAAZ;;WAAYA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;GAAAA,U,KAAAA,U;;AASZ,OAAO,MAAMC,UAAU,GAAG,OAAOC,GAAP,EAAYC,QAAZ,EAAsBC,EAAtB,KAA0C;AAChE,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,QAAMC,QAAQ,GAAGF,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAjB;;AACA,MAAIF,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,EAAhC,EAAoC;AAChC,QAAI;AACA,YAAMI,IAAI,GAAG,MAAMP,GAAG,CAACQ,KAAJ,CAAU;AAACL,QAAAA,KAAK,EAAEA,KAAR;AAAeG,QAAAA,QAAQ,EAAEA;AAAzB,OAAV,CAAnB;AACA,YAAML,QAAQ,CAACM,IAAI,CAACE,IAAN,CAAd;AACH,KAHD,CAGE,OAAOC,GAAP,EAAY;AACVC,MAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACH;AACJ,GAPD,MAOO;AACH,WAAOR,EAAP,KAAc,UAAd,IAA4BA,EAAE,EAA9B;AACH;AACJ,CAbM","sourcesContent":["\nexport enum ScreenSize {\n    \"xs\" = 0,\n    \"sm\" = 1,\n    \"md\" = 2,\n    \"lg\" = 3,\n    \"xl\" = 4,\n    \"xxl\" = 5\n}\n\nexport const seeIfLogin = async (api, setToken, cb?: () => void) => {\n    const email = localStorage.getItem('email')\n    const password = localStorage.getItem('password')\n    if (email !== null && email !== '') {\n        try {\n            const body = await api.login({email: email, password: password})\n            await setToken(body.data)\n        } catch (err) {\n            console.error(err)\n        }\n    } else {\n        typeof cb === 'function' && cb()\n    }\n}"]},"metadata":{},"sourceType":"module"}