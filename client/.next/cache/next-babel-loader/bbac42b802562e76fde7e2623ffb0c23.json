{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport { Table, Grid } from 'antd';\nimport { Container, returnEmojiString } from '../../DashboardPage/DashboardPage.styled';\nimport { ScreenSize } from '../../../lib';\nconst {\n  useBreakpoint\n} = Grid;\n\nconst Completed = props => {\n  const {\n    tickets\n  } = props;\n  const screens = useBreakpoint();\n  const [screenSize, setScreenSize] = useState(undefined);\n  useEffect(() => {\n    Object.entries(screens).filter(screen => !!screen[1]).map(screen => {\n      if (screen[0] !== ScreenSize[screenSize]) {\n        setScreenSize(ScreenSize[screen[0]]);\n      }\n    });\n  }, [screens]);\n  return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(Table, {\n    columns: [{\n      title: 'Game',\n      key: 'game',\n      dataIndex: 'game',\n      render: (text, data) => returnEmojiString(data.game)\n    }, {\n      title: 'Section',\n      key: 'section',\n      dataIndex: 'section'\n    }, {\n      title: 'Price ($)',\n      key: 'price',\n      dataIndex: 'price'\n    }],\n    dataSource: tickets,\n    pagination: {\n      position: ['bottomCenter']\n    }\n  }));\n};\n\nexport default Completed;","map":{"version":3,"sources":["/Users/insanity/Documents/MasterSeats/new/client/src/areas/TicketWallet/Sections/Completed.tsx"],"names":["React","useState","useEffect","Table","Grid","Container","returnEmojiString","ScreenSize","useBreakpoint","Completed","props","tickets","screens","screenSize","setScreenSize","undefined","Object","entries","filter","screen","map","title","key","dataIndex","render","text","data","game","position"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAqD,OAArD;AACA,SAAQC,KAAR,EAAsBC,IAAtB,QAA0C,MAA1C;AACA,SAAQC,SAAR,EAAyCC,iBAAzC,QAA0I,0CAA1I;AAEA,SAAQC,UAAR,QAAyB,cAAzB;AAKA,MAAM;AAACC,EAAAA;AAAD,IAAkBJ,IAAxB;;AAMA,MAAMK,SAAmC,GAAGC,KAAK,IAAI;AACjD,QAAM;AAACC,IAAAA;AAAD,MAAYD,KAAlB;AAEA,QAAME,OAAO,GAAGJ,aAAa,EAA7B;AACA,QAAM,CAACK,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAac,SAAb,CAA5C;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,MAAM,CAACC,OAAP,CAAeL,OAAf,EACCM,MADD,CACQC,MAAM,IAAI,CAAC,CAACA,MAAM,CAAC,CAAD,CAD1B,EAECC,GAFD,CAEKD,MAAM,IAAI;AACX,UAAIA,MAAM,CAAC,CAAD,CAAN,KAAcZ,UAAU,CAACM,UAAD,CAA5B,EAA0C;AACtCC,QAAAA,aAAa,CAACP,UAAU,CAACY,MAAM,CAAC,CAAD,CAAP,CAAX,CAAb;AACH;AACJ,KAND;AAOH,GARQ,EAQN,CAACP,OAAD,CARM,CAAT;AAUA,sBACI,oBAAC,SAAD,qBACI,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAE,CACZ;AACIS,MAAAA,KAAK,EAAE,MADX;AAEIC,MAAAA,GAAG,EAAE,MAFT;AAGIC,MAAAA,SAAS,EAAE,MAHf;AAIIC,MAAAA,MAAM,EAAE,CAACC,IAAD,EAAOC,IAAP,KAAgBpB,iBAAiB,CAACoB,IAAI,CAACC,IAAN;AAJ7C,KADY,EAOZ;AACIN,MAAAA,KAAK,EAAE,SADX;AAEIC,MAAAA,GAAG,EAAE,SAFT;AAGIC,MAAAA,SAAS,EAAE;AAHf,KAPY,EAYZ;AACIF,MAAAA,KAAK,EAAE,WADX;AAEIC,MAAAA,GAAG,EAAE,OAFT;AAGIC,MAAAA,SAAS,EAAE;AAHf,KAZY,CAAhB;AAiBG,IAAA,UAAU,EAAEZ,OAjBf;AAiBwB,IAAA,UAAU,EAAE;AAAEiB,MAAAA,QAAQ,EAAE,CAAC,cAAD;AAAZ;AAjBpC,IADJ,CADJ;AAsBH,CAtCD;;AAwCA,eAAenB,SAAf","sourcesContent":["import React, {useState, useEffect, useContext} from 'react'\nimport {Table, Modal, Grid, message} from 'antd'\nimport {Container, CloseAdjustedOutline, returnEmojiString, GenIconButton, GenButton, AddTicketContainer, PlusCircleAdjustedOutline} from '../../DashboardPage/DashboardPage.styled'\nimport {MichiganFootballGame, Ticket, TicketStatus, PostTicketBody} from '../../../../api'\nimport {ScreenSize} from '../../../lib'\nimport AddTicketModal from '../../DashboardPage/AddTicketModal'\nimport {UserContext} from '../../../lib/UserContext'\nimport OpenPage from '../../Universal/OpenPage'\n\nconst {useBreakpoint} = Grid\n\ninterface CompletedProps {\n    tickets: Ticket[]\n}\n\nconst Completed: React.FC<CompletedProps> = props => {\n    const {tickets} = props\n\n    const screens = useBreakpoint()\n    const [screenSize, setScreenSize] = useState<ScreenSize>(undefined)\n    \n    useEffect(() => {\n        Object.entries(screens)\n        .filter(screen => !!screen[1])\n        .map(screen => {\n            if (screen[0] !== ScreenSize[screenSize]) {\n                setScreenSize(ScreenSize[screen[0]])\n            }\n        })\n    }, [screens])\n\n    return (\n        <Container>\n            <Table columns={[\n                {\n                    title: 'Game',\n                    key: 'game',\n                    dataIndex: 'game',\n                    render: (text, data) => returnEmojiString(data.game)\n                },\n                {\n                    title: 'Section',\n                    key: 'section',\n                    dataIndex: 'section'\n                },\n                {\n                    title: 'Price ($)',\n                    key: 'price',\n                    dataIndex: 'price'\n                }\n            ]} dataSource={tickets} pagination={{ position: ['bottomCenter'] }} />\n        </Container>\n    )\n}\n\nexport default Completed"]},"metadata":{},"sourceType":"module"}