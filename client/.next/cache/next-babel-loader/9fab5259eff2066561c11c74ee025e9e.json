{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useContext, useState } from 'react';\nimport { PageDashboard } from '../Universal/PageUniversal';\nimport { UserContext } from '../../lib/UserContext';\nimport { Table, Grid, Typography } from 'antd';\nimport { Container, returnEmojiString, GenIconButton, CloseAdjustedOutline, ExclamationCircleAdjustedOutlined } from '../DashboardPage/DashboardPage.styled';\nimport { ScreenSize } from '../../lib';\nimport AreYouSureModal from '../Universal/AreYouSureModal';\nconst {\n  useBreakpoint\n} = Grid;\n\nconst OrdersPage = props => {\n  _s();\n\n  const {\n    getOrders,\n    orders,\n    confirmTransferBuyer,\n    refundTicket\n  } = props;\n  const screens = useBreakpoint();\n  const [screenSize, setScreenSize] = useState(undefined);\n  const {\n    api,\n    currentUser\n  } = useContext(UserContext);\n  const [visible, setVisibility] = useState(false);\n  const [action, setAction] = useState(\"\");\n  const [id, setId] = useState(\"\");\n  useEffect(() => {\n    if (currentUser !== null) {\n      getOrders();\n    }\n  }, []);\n  useEffect(() => {\n    Object.entries(screens).filter(screen => !!screen[1]).map(screen => {\n      if (screen[0] !== ScreenSize[screenSize]) {\n        setScreenSize(ScreenSize[screen[0]]);\n      }\n    });\n  }, [screens]);\n  const columns = [{\n    title: 'Game',\n    key: 'game',\n    dataIndex: 'game',\n    render: (text, data) => returnEmojiString(data.game)\n  }, {\n    title: 'Section',\n    key: 'section',\n    dataIndex: 'section'\n  }, {\n    title: 'Price ($)',\n    key: 'price',\n    dataIndex: 'price',\n    render: text => parseFloat(text).toFixed(2)\n  }, {\n    title: '',\n    key: 'confirm',\n    dataIndex: 'id',\n    render: (text, data) => {\n      if (data.confirmed_buyer_transfer) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'flex-end'\n          }\n        }, /*#__PURE__*/React.createElement(Typography.Text, null, \"Completed Transfer\"));\n      }\n\n      if (data.confirmed_seller_transfer) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'flex-end'\n          }\n        }, /*#__PURE__*/React.createElement(GenIconButton, {\n          disabled: data.confirmed_buyer_transfer,\n          icon: /*#__PURE__*/React.createElement(ExclamationCircleAdjustedOutlined, null),\n          onClick: () => {\n            setVisibility(true);\n            setId(data.id);\n            setAction(\"confirmTransferBuyer\");\n          }\n        }, screenSize > 0 ? \"Confirm Transfer\" : null));\n      } else {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'flex-end'\n          }\n        }, /*#__PURE__*/React.createElement(Typography.Text, null, \"Seller Must Confirm Transfer\"));\n      }\n    }\n  }, {\n    title: '',\n    key: 'refund',\n    dataIndex: 'id',\n    render: (text, data) => {\n      if (data.confirmed_buyer_transfer) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null);\n      }\n\n      if (data.confirmed_seller_transfer) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'flex-end'\n          }\n        }, /*#__PURE__*/React.createElement(Typography.Text, null, \"Seller Confirmed Transfer\"));\n      } else {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'flex-end'\n          }\n        }, /*#__PURE__*/React.createElement(GenIconButton, {\n          icon: /*#__PURE__*/React.createElement(CloseAdjustedOutline, null),\n          onClick: () => {\n            setVisibility(true);\n            setId(data.id);\n            setAction(\"refundTicket\");\n          }\n        }, screenSize > 0 ? \"Get Refund\" : null));\n      }\n    }\n  }];\n  return /*#__PURE__*/React.createElement(PageDashboard, {\n    isLoggedIn: currentUser === null ? false : true,\n    selected: -1\n  }, /*#__PURE__*/React.createElement(AreYouSureModal, {\n    title: \"Are you sure you want to perform that action?\",\n    visible: visible,\n    onCancel: () => setVisibility(false),\n    onComplete: async () => {\n      setVisibility(false);\n\n      if (action === \"refundTicket\") {\n        await refundTicket(id);\n      } else if (action === \"confirmTransferBuyer\") {\n        await confirmTransferBuyer(id);\n      }\n    }\n  }), /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(Table, {\n    columns: columns,\n    dataSource: orders,\n    pagination: {\n      position: ['bottomCenter']\n    }\n  })));\n};\n\n_s(OrdersPage, \"O2pvwMIFuuk5GBFLdI9QP0tivSo=\", false, function () {\n  return [useBreakpoint];\n});\n\n_c = OrdersPage;\nexport default OrdersPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrdersPage\");","map":{"version":3,"sources":["/Users/insanity/Documents/MasterSeats/new/client/src/areas/OrdersPage/index.tsx"],"names":["React","useEffect","useContext","useState","PageDashboard","UserContext","Table","Grid","Typography","Container","returnEmojiString","GenIconButton","CloseAdjustedOutline","ExclamationCircleAdjustedOutlined","ScreenSize","AreYouSureModal","useBreakpoint","OrdersPage","props","getOrders","orders","confirmTransferBuyer","refundTicket","screens","screenSize","setScreenSize","undefined","api","currentUser","visible","setVisibility","action","setAction","id","setId","Object","entries","filter","screen","map","columns","title","key","dataIndex","render","text","data","game","parseFloat","toFixed","confirmed_buyer_transfer","display","justifyContent","confirmed_seller_transfer","position"],"mappings":"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","sourcesContent":["import React, {useEffect, useContext, useState} from 'react'\nimport styled from 'styled-components'\nimport {PageDashboard} from '../Universal/PageUniversal'\nimport {UserContext} from '../../lib/UserContext'\nimport OpenPage from '../Universal/OpenPage'\nimport { serialize, resetSellingForm } from '../../lib'\nimport {Table, Modal, Grid, message, Typography} from 'antd'\nimport {Container, \n        returnEmojiString, \n        GenIconButton, \n        CloseAdjustedOutline,\n        ExclamationCircleAdjustedOutlined} from '../DashboardPage/DashboardPage.styled'\nimport {MichiganFootballGame, Ticket, TicketStatus, PostTicketBody} from '../../../api'\nimport {ScreenSize} from '../../lib'\nimport AreYouSureModal from '../Universal/AreYouSureModal'\nconst {useBreakpoint} = Grid\n\ninterface OrdersPageProps {\n    getOrders: () => void\n    orders: Ticket[]\n    confirmTransferBuyer: (id: string) => void\n    refundTicket: (id: string) => void\n}\n\nconst OrdersPage: React.FC<OrdersPageProps> = props => {\n    const {getOrders, orders, confirmTransferBuyer, refundTicket} = props\n\n    const screens = useBreakpoint()\n    const [screenSize, setScreenSize] = useState<ScreenSize>(undefined)\n    const {api, currentUser} = useContext(UserContext)\n    const [visible, setVisibility] = useState(false)\n    const [action, setAction] = useState(\"\")\n    const [id, setId] = useState(\"\")\n\n    useEffect(() => {\n        if (currentUser !== null) {\n            getOrders()\n        }\n    }, [])\n\n    useEffect(() => {\n        Object.entries(screens)\n        .filter(screen => !!screen[1])\n        .map(screen => {\n            if (screen[0] !== ScreenSize[screenSize]) {\n                setScreenSize(ScreenSize[screen[0]])\n            }\n        })\n    }, [screens])\n\n    const columns = [\n        {\n            title: 'Game',\n            key: 'game',\n            dataIndex: 'game',\n            render: (text, data) => returnEmojiString(data.game)\n        },\n        {\n            title: 'Section',\n            key: 'section',\n            dataIndex: 'section'\n        },\n        {\n            title: 'Price ($)',\n            key: 'price',\n            dataIndex: 'price',\n            render: (text) => parseFloat(text).toFixed(2)\n        },\n        {\n            title: '',\n            key: 'confirm',\n            dataIndex: 'id',\n            render: (text, data) => {\n                if (data.confirmed_buyer_transfer) {\n                    return (\n                        <div style={{display: 'flex', justifyContent: 'flex-end'}}>\n                            <Typography.Text>Completed Transfer</Typography.Text>\n                        </div>\n                    ) \n                }\n                if (data.confirmed_seller_transfer) {\n                    return (<div style={{display: 'flex', justifyContent: 'flex-end'}}>\n                        <GenIconButton disabled={data.confirmed_buyer_transfer} icon={<ExclamationCircleAdjustedOutlined />} onClick={() => {\n                            setVisibility(true)\n                            setId(data.id)\n                            setAction(\"confirmTransferBuyer\")\n                        }}>\n                            {screenSize > 0 ? \"Confirm Transfer\" : null}\n                        </GenIconButton>\n                    </div>)\n                } else {\n                    return (\n                        <div style={{display: 'flex', justifyContent: 'flex-end'}}>\n                            <Typography.Text>Seller Must Confirm Transfer</Typography.Text>\n                        </div>\n                    )\n                }\n            }\n        },\n        {\n            title: '',\n            key: 'refund',\n            dataIndex: 'id',\n            render: (text, data) => {\n                if (data.confirmed_buyer_transfer) {\n                    return (<></>)\n                }\n                if (data.confirmed_seller_transfer) {\n                    return (\n                        <div style={{display: 'flex', justifyContent: 'flex-end'}}>\n                            <Typography.Text>Seller Confirmed Transfer</Typography.Text>\n                        </div>\n                    )\n                } else {\n                    return (<div style={{display: 'flex', justifyContent: 'flex-end'}}>\n                        <GenIconButton icon={<CloseAdjustedOutline />} onClick={() => {\n                            setVisibility(true)\n                            setId(data.id)\n                            setAction(\"refundTicket\")\n                        }}>\n                            {screenSize > 0 ? \"Get Refund\" : null}\n                        </GenIconButton>\n                    </div>)\n\n                }\n            }\n        }\n    ]\n\n    return (\n        <PageDashboard isLoggedIn={currentUser === null ? false : true} selected={-1}>\n            <AreYouSureModal title={\"Are you sure you want to perform that action?\"}\n                    visible={visible}\n                    onCancel={() => setVisibility(false)}\n                    onComplete={async () => {\n                        setVisibility(false)\n                        if (action === \"refundTicket\") {\n                            await refundTicket(id)\n                        } else if (action === \"confirmTransferBuyer\") {\n                            await confirmTransferBuyer(id)\n                        }\n                    }}\n                />\n            <Container>\n                <Table columns={columns} dataSource={orders} pagination={{ position: ['bottomCenter'] }} />\n            </Container>\n        </PageDashboard>\n    )\n}\n\nexport default OrdersPage"]},"metadata":{},"sourceType":"module"}