{"ast":null,"code":"// tslint:disable\n\n/**\n * masterseats-server\n * MasterSeats Server\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport * as globalImportUrl from 'url';\nimport globalAxios from 'axios'; // Some imports not used depending on template conditions\n// @ts-ignore\n\nimport { BASE_PATH, BaseAPI } from './base';\n/**\n * \n * @export\n * @interface ChangePassword\n */\n\n/**\n * \n * @export\n * @enum {string}\n */\nexport let FilterOptions;\n/**\n * \n * @export\n * @interface InlineResponse200\n */\n\n(function (FilterOptions) {\n  FilterOptions[\"PriceLowestToHighest\"] = \"Price - lowest to highest\";\n  FilterOptions[\"PriceHighestToLowest\"] = \"Price - highest to lowest\";\n  FilterOptions[\"LowestSection\"] = \"Lowest Section\";\n  FilterOptions[\"HighestSection\"] = \"Highest Section\";\n})(FilterOptions || (FilterOptions = {}));\n\n/**\n * \n * @export\n * @enum {string}\n */\nexport let MichiganFootballGame;\n/**\n * \n * @export\n * @interface PostTicketBody\n */\n\n(function (MichiganFootballGame) {\n  MichiganFootballGame[\"BallState\"] = \"Michigan vs. Ball State\";\n  MichiganFootballGame[\"ArkansasState\"] = \"Michigan vs. Arkansas State\";\n  MichiganFootballGame[\"Wisconsin\"] = \"Michigan vs. Wisconsin\";\n  MichiganFootballGame[\"PennState\"] = \"Michigan vs. Penn State\";\n  MichiganFootballGame[\"Maryland\"] = \"Michigan vs. Maryland\";\n  MichiganFootballGame[\"Indiana\"] = \"Michigan vs. Indiana\";\n})(MichiganFootballGame || (MichiganFootballGame = {}));\n\n/**\n * \n * @export\n * @enum {string}\n */\nexport let TicketStatus;\n/**\n * \n * @export\n * @interface User\n */\n\n(function (TicketStatus) {\n  TicketStatus[\"Open\"] = \"Open\";\n  TicketStatus[\"Removed\"] = \"Removed\";\n  TicketStatus[\"PendingTransfer\"] = \"Pending Transfer\";\n  TicketStatus[\"CompletedTransfer\"] = \"Completed Transfer\";\n})(TicketStatus || (TicketStatus = {}));\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration) {\n  return {\n    /**\n     * \n     * @param {ChangePassword} [changePassword] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    changePassword: async (changePassword, options = {}) => {\n      const localVarPath = `/user/change-password`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof changePassword !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(changePassword !== undefined ? changePassword : {}) : changePassword || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getTicketWallet: async (options = {}) => {\n      const localVarPath = `/user/get-ticket-wallet`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getUser: async (options = {}) => {\n      const localVarPath = `/user/get-user`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    isEmailVerified: async (options = {}) => {\n      const localVarPath = `/user/is-email-verified`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {LoginBody} [loginBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    login: async (loginBody, options = {}) => {\n      const localVarPath = `/user/login`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof loginBody !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(loginBody !== undefined ? loginBody : {}) : loginBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {PostTicketBody} [postTicketBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    postTicket: async (postTicketBody, options = {}) => {\n      const localVarPath = `/ticket/post-ticket`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof postTicketBody !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(postTicketBody !== undefined ? postTicketBody : {}) : postTicketBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {SignUpBody} [signUpBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    register: async (signUpBody, options = {}) => {\n      const localVarPath = `/user/register`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof signUpBody !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(signUpBody !== undefined ? signUpBody : {}) : signUpBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {RemoveTicketBody} [removeTicketBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    removeTicket: async (removeTicketBody, options = {}) => {\n      const localVarPath = `/ticket/remove-ticket`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof removeTicketBody !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(removeTicketBody !== undefined ? removeTicketBody : {}) : removeTicketBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {SortTicketsBody} [sortTicketsBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sortTickets: async (sortTicketsBody, options = {}) => {\n      const localVarPath = `/ticket/sort-tickets`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof sortTicketsBody !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(sortTicketsBody !== undefined ? sortTicketsBody : {}) : sortTicketsBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {VerifyEmailBody} [verifyEmailBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    verifyEmail: async (verifyEmailBody, options = {}) => {\n      const localVarPath = `/user/verify-email`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof verifyEmailBody !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(verifyEmailBody !== undefined ? verifyEmailBody : {}) : verifyEmailBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }\n  };\n};\n/**\n * DefaultApi - functional programming interface\n * @export\n */\n\n_c = DefaultApiAxiosParamCreator;\nexport const DefaultApiFp = function (configuration) {\n  return {\n    /**\n     * \n     * @param {ChangePassword} [changePassword] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async changePassword(changePassword, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).changePassword(changePassword, options);\n      return (axios = globalAxios, basePath = BASE_PATH) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getTicketWallet(options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getTicketWallet(options);\n      return (axios = globalAxios, basePath = BASE_PATH) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getUser(options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getUser(options);\n      return (axios = globalAxios, basePath = BASE_PATH) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async isEmailVerified(options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).isEmailVerified(options);\n      return (axios = globalAxios, basePath = BASE_PATH) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {LoginBody} [loginBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async login(loginBody, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).login(loginBody, options);\n      return (axios = globalAxios, basePath = BASE_PATH) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {PostTicketBody} [postTicketBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async postTicket(postTicketBody, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postTicket(postTicketBody, options);\n      return (axios = globalAxios, basePath = BASE_PATH) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {SignUpBody} [signUpBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async register(signUpBody, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).register(signUpBody, options);\n      return (axios = globalAxios, basePath = BASE_PATH) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {RemoveTicketBody} [removeTicketBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async removeTicket(removeTicketBody, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).removeTicket(removeTicketBody, options);\n      return (axios = globalAxios, basePath = BASE_PATH) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {SortTicketsBody} [sortTicketsBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async sortTickets(sortTicketsBody, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).sortTickets(sortTicketsBody, options);\n      return (axios = globalAxios, basePath = BASE_PATH) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {VerifyEmailBody} [verifyEmailBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async verifyEmail(verifyEmailBody, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).verifyEmail(verifyEmailBody, options);\n      return (axios = globalAxios, basePath = BASE_PATH) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    }\n\n  };\n};\n/**\n * DefaultApi - factory interface\n * @export\n */\n\n_c2 = DefaultApiFp;\nexport const DefaultApiFactory = function (configuration, basePath, axios) {\n  return {\n    /**\n     * \n     * @param {ChangePassword} [changePassword] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    changePassword(changePassword, options) {\n      return DefaultApiFp(configuration).changePassword(changePassword, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getTicketWallet(options) {\n      return DefaultApiFp(configuration).getTicketWallet(options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getUser(options) {\n      return DefaultApiFp(configuration).getUser(options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    isEmailVerified(options) {\n      return DefaultApiFp(configuration).isEmailVerified(options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {LoginBody} [loginBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    login(loginBody, options) {\n      return DefaultApiFp(configuration).login(loginBody, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {PostTicketBody} [postTicketBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    postTicket(postTicketBody, options) {\n      return DefaultApiFp(configuration).postTicket(postTicketBody, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {SignUpBody} [signUpBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    register(signUpBody, options) {\n      return DefaultApiFp(configuration).register(signUpBody, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {RemoveTicketBody} [removeTicketBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    removeTicket(removeTicketBody, options) {\n      return DefaultApiFp(configuration).removeTicket(removeTicketBody, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {SortTicketsBody} [sortTicketsBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sortTickets(sortTicketsBody, options) {\n      return DefaultApiFp(configuration).sortTickets(sortTicketsBody, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {VerifyEmailBody} [verifyEmailBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    verifyEmail(verifyEmailBody, options) {\n      return DefaultApiFp(configuration).verifyEmail(verifyEmailBody, options).then(request => request(axios, basePath));\n    }\n\n  };\n};\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\n\n_c3 = DefaultApiFactory;\nexport class DefaultApi extends BaseAPI {\n  /**\n   * \n   * @param {ChangePassword} [changePassword] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  changePassword(changePassword, options) {\n    return DefaultApiFp(this.configuration).changePassword(changePassword, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  getTicketWallet(options) {\n    return DefaultApiFp(this.configuration).getTicketWallet(options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  getUser(options) {\n    return DefaultApiFp(this.configuration).getUser(options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  isEmailVerified(options) {\n    return DefaultApiFp(this.configuration).isEmailVerified(options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {LoginBody} [loginBody] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  login(loginBody, options) {\n    return DefaultApiFp(this.configuration).login(loginBody, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {PostTicketBody} [postTicketBody] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  postTicket(postTicketBody, options) {\n    return DefaultApiFp(this.configuration).postTicket(postTicketBody, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {SignUpBody} [signUpBody] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  register(signUpBody, options) {\n    return DefaultApiFp(this.configuration).register(signUpBody, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {RemoveTicketBody} [removeTicketBody] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  removeTicket(removeTicketBody, options) {\n    return DefaultApiFp(this.configuration).removeTicket(removeTicketBody, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {SortTicketsBody} [sortTicketsBody] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  sortTickets(sortTicketsBody, options) {\n    return DefaultApiFp(this.configuration).sortTickets(sortTicketsBody, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {VerifyEmailBody} [verifyEmailBody] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  verifyEmail(verifyEmailBody, options) {\n    return DefaultApiFp(this.configuration).verifyEmail(verifyEmailBody, options).then(request => request(this.axios, this.basePath));\n  }\n\n}\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"DefaultApiAxiosParamCreator\");\n$RefreshReg$(_c2, \"DefaultApiFp\");\n$RefreshReg$(_c3, \"DefaultApiFactory\");","map":{"version":3,"sources":["/Users/insanity/Documents/MasterSeats/new/client/api/api.ts"],"names":["globalImportUrl","globalAxios","BASE_PATH","BaseAPI","FilterOptions","MichiganFootballGame","TicketStatus","DefaultApiAxiosParamCreator","configuration","changePassword","options","localVarPath","localVarUrlObj","parse","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","accessToken","query","search","headersFromBaseOptions","headers","needsSerialization","data","JSON","stringify","undefined","url","format","getTicketWallet","getUser","isEmailVerified","login","loginBody","postTicket","postTicketBody","register","signUpBody","removeTicket","removeTicketBody","sortTickets","sortTicketsBody","verifyEmail","verifyEmailBody","DefaultApiFp","localVarAxiosArgs","axios","basePath","axiosRequestArgs","request","DefaultApiFactory","then","DefaultApi"],"mappings":"AAAA;;AACA;;;;;;;;;;;AAaA,OAAO,KAAKA,eAAZ,MAAiC,KAAjC;AAEA,OAAOC,WAAP,MAAyD,OAAzD,C,CACA;AACA;;AACA,SAASC,SAAT,EAAqDC,OAArD,QAAmF,QAAnF;AAEA;;;;;;AAyBA;;;;;AAKA,WAAYC,aAAZ;AAOA;;;;;;WAPYA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;GAAAA,a,KAAAA,a;;AAuCZ;;;;;AAKA,WAAYC,oBAAZ;AASA;;;;;;WATYA,oB;AAAAA,EAAAA,oB;AAAAA,EAAAA,oB;AAAAA,EAAAA,oB;AAAAA,EAAAA,oB;AAAAA,EAAAA,oB;AAAAA,EAAAA,oB;GAAAA,oB,KAAAA,oB;;AAwJZ;;;;;AAKA,WAAYC,YAAZ;AAOA;;;;;;WAPYA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;GAAAA,Y,KAAAA,Y;;AAsEZ;;;;AAIA,OAAO,MAAMC,2BAA2B,GAAG,UAAUC,aAAV,EAAyC;AAChF,SAAO;AACH;;;;;;AAMAC,IAAAA,cAAc,EAAE,OAAOA,cAAP,EAAwCC,OAAY,GAAG,EAAvD,KAAoF;AAChG,YAAMC,YAAY,GAAI,uBAAtB;AACA,YAAMC,cAAc,GAAGZ,eAAe,CAACa,KAAhB,CAAsBF,YAAtB,EAAoC,IAApC,CAAvB;AACA,UAAIG,WAAJ;;AACA,UAAIN,aAAJ,EAAmB;AACfM,QAAAA,WAAW,GAAGN,aAAa,CAACM,WAA5B;AACH;;AACD,YAAMC,sBAAsB,GAAG;AAAEC,QAAAA,MAAM,EAAE,MAAV;AAAkB,WAAGF,WAArB;AAAkC,WAAGJ;AAArC,OAA/B;AACA,YAAMO,uBAAuB,GAAG,EAAhC;AACA,YAAMC,sBAAsB,GAAG,EAA/B,CATgG,CAWhG;AACA;;AACA,UAAIV,aAAa,IAAIA,aAAa,CAACW,WAAnC,EAAgD;AAC5C,cAAMA,WAAW,GAAG,OAAOX,aAAa,CAACW,WAArB,KAAqC,UAArC,GACdX,aAAa,CAACW,WAAd,EADc,GAEdX,aAAa,CAACW,WAFpB;AAGAF,QAAAA,uBAAuB,CAAC,eAAD,CAAvB,GAA2C,YAAYE,WAAvD;AACH;;AAIDF,MAAAA,uBAAuB,CAAC,cAAD,CAAvB,GAA0C,kBAA1C;AAEAL,MAAAA,cAAc,CAACQ,KAAf,GAAuB,EAAC,GAAGR,cAAc,CAACQ,KAAnB;AAA0B,WAAGF,sBAA7B;AAAqD,WAAGR,OAAO,CAACU;AAAhE,OAAvB,CAxBgG,CAyBhG;;AACA,aAAOR,cAAc,CAACS,MAAtB;AACA,UAAIC,sBAAsB,GAAGR,WAAW,IAAIA,WAAW,CAACS,OAA3B,GAAqCT,WAAW,CAACS,OAAjD,GAA2D,EAAxF;AACAR,MAAAA,sBAAsB,CAACQ,OAAvB,GAAiC,EAAC,GAAGN,uBAAJ;AAA6B,WAAGK,sBAAhC;AAAwD,WAAGZ,OAAO,CAACa;AAAnE,OAAjC;AACA,YAAMC,kBAAkB,GAAI,OAAOf,cAAP,KAA0B,QAA3B,IAAwCM,sBAAsB,CAACQ,OAAvB,CAA+B,cAA/B,MAAmD,kBAAtH;AACAR,MAAAA,sBAAsB,CAACU,IAAvB,GAA+BD,kBAAkB,GAAGE,IAAI,CAACC,SAAL,CAAelB,cAAc,KAAKmB,SAAnB,GAA+BnB,cAA/B,GAAgD,EAA/D,CAAH,GAAyEA,cAAc,IAAI,EAA5I;AAEA,aAAO;AACHoB,QAAAA,GAAG,EAAE7B,eAAe,CAAC8B,MAAhB,CAAuBlB,cAAvB,CADF;AAEHF,QAAAA,OAAO,EAAEK;AAFN,OAAP;AAIH,KA3CE;;AA4CH;;;;;AAKAgB,IAAAA,eAAe,EAAE,OAAOrB,OAAY,GAAG,EAAtB,KAAmD;AAChE,YAAMC,YAAY,GAAI,yBAAtB;AACA,YAAMC,cAAc,GAAGZ,eAAe,CAACa,KAAhB,CAAsBF,YAAtB,EAAoC,IAApC,CAAvB;AACA,UAAIG,WAAJ;;AACA,UAAIN,aAAJ,EAAmB;AACfM,QAAAA,WAAW,GAAGN,aAAa,CAACM,WAA5B;AACH;;AACD,YAAMC,sBAAsB,GAAG;AAAEC,QAAAA,MAAM,EAAE,KAAV;AAAiB,WAAGF,WAApB;AAAiC,WAAGJ;AAApC,OAA/B;AACA,YAAMO,uBAAuB,GAAG,EAAhC;AACA,YAAMC,sBAAsB,GAAG,EAA/B,CATgE,CAWhE;AACA;;AACA,UAAIV,aAAa,IAAIA,aAAa,CAACW,WAAnC,EAAgD;AAC5C,cAAMA,WAAW,GAAG,OAAOX,aAAa,CAACW,WAArB,KAAqC,UAArC,GACdX,aAAa,CAACW,WAAd,EADc,GAEdX,aAAa,CAACW,WAFpB;AAGAF,QAAAA,uBAAuB,CAAC,eAAD,CAAvB,GAA2C,YAAYE,WAAvD;AACH;;AAIDP,MAAAA,cAAc,CAACQ,KAAf,GAAuB,EAAC,GAAGR,cAAc,CAACQ,KAAnB;AAA0B,WAAGF,sBAA7B;AAAqD,WAAGR,OAAO,CAACU;AAAhE,OAAvB,CAtBgE,CAuBhE;;AACA,aAAOR,cAAc,CAACS,MAAtB;AACA,UAAIC,sBAAsB,GAAGR,WAAW,IAAIA,WAAW,CAACS,OAA3B,GAAqCT,WAAW,CAACS,OAAjD,GAA2D,EAAxF;AACAR,MAAAA,sBAAsB,CAACQ,OAAvB,GAAiC,EAAC,GAAGN,uBAAJ;AAA6B,WAAGK,sBAAhC;AAAwD,WAAGZ,OAAO,CAACa;AAAnE,OAAjC;AAEA,aAAO;AACHM,QAAAA,GAAG,EAAE7B,eAAe,CAAC8B,MAAhB,CAAuBlB,cAAvB,CADF;AAEHF,QAAAA,OAAO,EAAEK;AAFN,OAAP;AAIH,KAjFE;;AAkFH;;;;;AAKAiB,IAAAA,OAAO,EAAE,OAAOtB,OAAY,GAAG,EAAtB,KAAmD;AACxD,YAAMC,YAAY,GAAI,gBAAtB;AACA,YAAMC,cAAc,GAAGZ,eAAe,CAACa,KAAhB,CAAsBF,YAAtB,EAAoC,IAApC,CAAvB;AACA,UAAIG,WAAJ;;AACA,UAAIN,aAAJ,EAAmB;AACfM,QAAAA,WAAW,GAAGN,aAAa,CAACM,WAA5B;AACH;;AACD,YAAMC,sBAAsB,GAAG;AAAEC,QAAAA,MAAM,EAAE,KAAV;AAAiB,WAAGF,WAApB;AAAiC,WAAGJ;AAApC,OAA/B;AACA,YAAMO,uBAAuB,GAAG,EAAhC;AACA,YAAMC,sBAAsB,GAAG,EAA/B,CATwD,CAWxD;AACA;;AACA,UAAIV,aAAa,IAAIA,aAAa,CAACW,WAAnC,EAAgD;AAC5C,cAAMA,WAAW,GAAG,OAAOX,aAAa,CAACW,WAArB,KAAqC,UAArC,GACdX,aAAa,CAACW,WAAd,EADc,GAEdX,aAAa,CAACW,WAFpB;AAGAF,QAAAA,uBAAuB,CAAC,eAAD,CAAvB,GAA2C,YAAYE,WAAvD;AACH;;AAIDP,MAAAA,cAAc,CAACQ,KAAf,GAAuB,EAAC,GAAGR,cAAc,CAACQ,KAAnB;AAA0B,WAAGF,sBAA7B;AAAqD,WAAGR,OAAO,CAACU;AAAhE,OAAvB,CAtBwD,CAuBxD;;AACA,aAAOR,cAAc,CAACS,MAAtB;AACA,UAAIC,sBAAsB,GAAGR,WAAW,IAAIA,WAAW,CAACS,OAA3B,GAAqCT,WAAW,CAACS,OAAjD,GAA2D,EAAxF;AACAR,MAAAA,sBAAsB,CAACQ,OAAvB,GAAiC,EAAC,GAAGN,uBAAJ;AAA6B,WAAGK,sBAAhC;AAAwD,WAAGZ,OAAO,CAACa;AAAnE,OAAjC;AAEA,aAAO;AACHM,QAAAA,GAAG,EAAE7B,eAAe,CAAC8B,MAAhB,CAAuBlB,cAAvB,CADF;AAEHF,QAAAA,OAAO,EAAEK;AAFN,OAAP;AAIH,KAvHE;;AAwHH;;;;;AAKAkB,IAAAA,eAAe,EAAE,OAAOvB,OAAY,GAAG,EAAtB,KAAmD;AAChE,YAAMC,YAAY,GAAI,yBAAtB;AACA,YAAMC,cAAc,GAAGZ,eAAe,CAACa,KAAhB,CAAsBF,YAAtB,EAAoC,IAApC,CAAvB;AACA,UAAIG,WAAJ;;AACA,UAAIN,aAAJ,EAAmB;AACfM,QAAAA,WAAW,GAAGN,aAAa,CAACM,WAA5B;AACH;;AACD,YAAMC,sBAAsB,GAAG;AAAEC,QAAAA,MAAM,EAAE,KAAV;AAAiB,WAAGF,WAApB;AAAiC,WAAGJ;AAApC,OAA/B;AACA,YAAMO,uBAAuB,GAAG,EAAhC;AACA,YAAMC,sBAAsB,GAAG,EAA/B,CATgE,CAWhE;AACA;;AACA,UAAIV,aAAa,IAAIA,aAAa,CAACW,WAAnC,EAAgD;AAC5C,cAAMA,WAAW,GAAG,OAAOX,aAAa,CAACW,WAArB,KAAqC,UAArC,GACdX,aAAa,CAACW,WAAd,EADc,GAEdX,aAAa,CAACW,WAFpB;AAGAF,QAAAA,uBAAuB,CAAC,eAAD,CAAvB,GAA2C,YAAYE,WAAvD;AACH;;AAIDP,MAAAA,cAAc,CAACQ,KAAf,GAAuB,EAAC,GAAGR,cAAc,CAACQ,KAAnB;AAA0B,WAAGF,sBAA7B;AAAqD,WAAGR,OAAO,CAACU;AAAhE,OAAvB,CAtBgE,CAuBhE;;AACA,aAAOR,cAAc,CAACS,MAAtB;AACA,UAAIC,sBAAsB,GAAGR,WAAW,IAAIA,WAAW,CAACS,OAA3B,GAAqCT,WAAW,CAACS,OAAjD,GAA2D,EAAxF;AACAR,MAAAA,sBAAsB,CAACQ,OAAvB,GAAiC,EAAC,GAAGN,uBAAJ;AAA6B,WAAGK,sBAAhC;AAAwD,WAAGZ,OAAO,CAACa;AAAnE,OAAjC;AAEA,aAAO;AACHM,QAAAA,GAAG,EAAE7B,eAAe,CAAC8B,MAAhB,CAAuBlB,cAAvB,CADF;AAEHF,QAAAA,OAAO,EAAEK;AAFN,OAAP;AAIH,KA7JE;;AA8JH;;;;;;AAMAmB,IAAAA,KAAK,EAAE,OAAOC,SAAP,EAA8BzB,OAAY,GAAG,EAA7C,KAA0E;AAC7E,YAAMC,YAAY,GAAI,aAAtB;AACA,YAAMC,cAAc,GAAGZ,eAAe,CAACa,KAAhB,CAAsBF,YAAtB,EAAoC,IAApC,CAAvB;AACA,UAAIG,WAAJ;;AACA,UAAIN,aAAJ,EAAmB;AACfM,QAAAA,WAAW,GAAGN,aAAa,CAACM,WAA5B;AACH;;AACD,YAAMC,sBAAsB,GAAG;AAAEC,QAAAA,MAAM,EAAE,MAAV;AAAkB,WAAGF,WAArB;AAAkC,WAAGJ;AAArC,OAA/B;AACA,YAAMO,uBAAuB,GAAG,EAAhC;AACA,YAAMC,sBAAsB,GAAG,EAA/B;AAIAD,MAAAA,uBAAuB,CAAC,cAAD,CAAvB,GAA0C,kBAA1C;AAEAL,MAAAA,cAAc,CAACQ,KAAf,GAAuB,EAAC,GAAGR,cAAc,CAACQ,KAAnB;AAA0B,WAAGF,sBAA7B;AAAqD,WAAGR,OAAO,CAACU;AAAhE,OAAvB,CAf6E,CAgB7E;;AACA,aAAOR,cAAc,CAACS,MAAtB;AACA,UAAIC,sBAAsB,GAAGR,WAAW,IAAIA,WAAW,CAACS,OAA3B,GAAqCT,WAAW,CAACS,OAAjD,GAA2D,EAAxF;AACAR,MAAAA,sBAAsB,CAACQ,OAAvB,GAAiC,EAAC,GAAGN,uBAAJ;AAA6B,WAAGK,sBAAhC;AAAwD,WAAGZ,OAAO,CAACa;AAAnE,OAAjC;AACA,YAAMC,kBAAkB,GAAI,OAAOW,SAAP,KAAqB,QAAtB,IAAmCpB,sBAAsB,CAACQ,OAAvB,CAA+B,cAA/B,MAAmD,kBAAjH;AACAR,MAAAA,sBAAsB,CAACU,IAAvB,GAA+BD,kBAAkB,GAAGE,IAAI,CAACC,SAAL,CAAeQ,SAAS,KAAKP,SAAd,GAA0BO,SAA1B,GAAsC,EAArD,CAAH,GAA+DA,SAAS,IAAI,EAA7H;AAEA,aAAO;AACHN,QAAAA,GAAG,EAAE7B,eAAe,CAAC8B,MAAhB,CAAuBlB,cAAvB,CADF;AAEHF,QAAAA,OAAO,EAAEK;AAFN,OAAP;AAIH,KA/LE;;AAgMH;;;;;;AAMAqB,IAAAA,UAAU,EAAE,OAAOC,cAAP,EAAwC3B,OAAY,GAAG,EAAvD,KAAoF;AAC5F,YAAMC,YAAY,GAAI,qBAAtB;AACA,YAAMC,cAAc,GAAGZ,eAAe,CAACa,KAAhB,CAAsBF,YAAtB,EAAoC,IAApC,CAAvB;AACA,UAAIG,WAAJ;;AACA,UAAIN,aAAJ,EAAmB;AACfM,QAAAA,WAAW,GAAGN,aAAa,CAACM,WAA5B;AACH;;AACD,YAAMC,sBAAsB,GAAG;AAAEC,QAAAA,MAAM,EAAE,MAAV;AAAkB,WAAGF,WAArB;AAAkC,WAAGJ;AAArC,OAA/B;AACA,YAAMO,uBAAuB,GAAG,EAAhC;AACA,YAAMC,sBAAsB,GAAG,EAA/B,CAT4F,CAW5F;AACA;;AACA,UAAIV,aAAa,IAAIA,aAAa,CAACW,WAAnC,EAAgD;AAC5C,cAAMA,WAAW,GAAG,OAAOX,aAAa,CAACW,WAArB,KAAqC,UAArC,GACdX,aAAa,CAACW,WAAd,EADc,GAEdX,aAAa,CAACW,WAFpB;AAGAF,QAAAA,uBAAuB,CAAC,eAAD,CAAvB,GAA2C,YAAYE,WAAvD;AACH;;AAIDF,MAAAA,uBAAuB,CAAC,cAAD,CAAvB,GAA0C,kBAA1C;AAEAL,MAAAA,cAAc,CAACQ,KAAf,GAAuB,EAAC,GAAGR,cAAc,CAACQ,KAAnB;AAA0B,WAAGF,sBAA7B;AAAqD,WAAGR,OAAO,CAACU;AAAhE,OAAvB,CAxB4F,CAyB5F;;AACA,aAAOR,cAAc,CAACS,MAAtB;AACA,UAAIC,sBAAsB,GAAGR,WAAW,IAAIA,WAAW,CAACS,OAA3B,GAAqCT,WAAW,CAACS,OAAjD,GAA2D,EAAxF;AACAR,MAAAA,sBAAsB,CAACQ,OAAvB,GAAiC,EAAC,GAAGN,uBAAJ;AAA6B,WAAGK,sBAAhC;AAAwD,WAAGZ,OAAO,CAACa;AAAnE,OAAjC;AACA,YAAMC,kBAAkB,GAAI,OAAOa,cAAP,KAA0B,QAA3B,IAAwCtB,sBAAsB,CAACQ,OAAvB,CAA+B,cAA/B,MAAmD,kBAAtH;AACAR,MAAAA,sBAAsB,CAACU,IAAvB,GAA+BD,kBAAkB,GAAGE,IAAI,CAACC,SAAL,CAAeU,cAAc,KAAKT,SAAnB,GAA+BS,cAA/B,GAAgD,EAA/D,CAAH,GAAyEA,cAAc,IAAI,EAA5I;AAEA,aAAO;AACHR,QAAAA,GAAG,EAAE7B,eAAe,CAAC8B,MAAhB,CAAuBlB,cAAvB,CADF;AAEHF,QAAAA,OAAO,EAAEK;AAFN,OAAP;AAIH,KA1OE;;AA2OH;;;;;;AAMAuB,IAAAA,QAAQ,EAAE,OAAOC,UAAP,EAAgC7B,OAAY,GAAG,EAA/C,KAA4E;AAClF,YAAMC,YAAY,GAAI,gBAAtB;AACA,YAAMC,cAAc,GAAGZ,eAAe,CAACa,KAAhB,CAAsBF,YAAtB,EAAoC,IAApC,CAAvB;AACA,UAAIG,WAAJ;;AACA,UAAIN,aAAJ,EAAmB;AACfM,QAAAA,WAAW,GAAGN,aAAa,CAACM,WAA5B;AACH;;AACD,YAAMC,sBAAsB,GAAG;AAAEC,QAAAA,MAAM,EAAE,MAAV;AAAkB,WAAGF,WAArB;AAAkC,WAAGJ;AAArC,OAA/B;AACA,YAAMO,uBAAuB,GAAG,EAAhC;AACA,YAAMC,sBAAsB,GAAG,EAA/B;AAIAD,MAAAA,uBAAuB,CAAC,cAAD,CAAvB,GAA0C,kBAA1C;AAEAL,MAAAA,cAAc,CAACQ,KAAf,GAAuB,EAAC,GAAGR,cAAc,CAACQ,KAAnB;AAA0B,WAAGF,sBAA7B;AAAqD,WAAGR,OAAO,CAACU;AAAhE,OAAvB,CAfkF,CAgBlF;;AACA,aAAOR,cAAc,CAACS,MAAtB;AACA,UAAIC,sBAAsB,GAAGR,WAAW,IAAIA,WAAW,CAACS,OAA3B,GAAqCT,WAAW,CAACS,OAAjD,GAA2D,EAAxF;AACAR,MAAAA,sBAAsB,CAACQ,OAAvB,GAAiC,EAAC,GAAGN,uBAAJ;AAA6B,WAAGK,sBAAhC;AAAwD,WAAGZ,OAAO,CAACa;AAAnE,OAAjC;AACA,YAAMC,kBAAkB,GAAI,OAAOe,UAAP,KAAsB,QAAvB,IAAoCxB,sBAAsB,CAACQ,OAAvB,CAA+B,cAA/B,MAAmD,kBAAlH;AACAR,MAAAA,sBAAsB,CAACU,IAAvB,GAA+BD,kBAAkB,GAAGE,IAAI,CAACC,SAAL,CAAeY,UAAU,KAAKX,SAAf,GAA2BW,UAA3B,GAAwC,EAAvD,CAAH,GAAiEA,UAAU,IAAI,EAAhI;AAEA,aAAO;AACHV,QAAAA,GAAG,EAAE7B,eAAe,CAAC8B,MAAhB,CAAuBlB,cAAvB,CADF;AAEHF,QAAAA,OAAO,EAAEK;AAFN,OAAP;AAIH,KA5QE;;AA6QH;;;;;;AAMAyB,IAAAA,YAAY,EAAE,OAAOC,gBAAP,EAA4C/B,OAAY,GAAG,EAA3D,KAAwF;AAClG,YAAMC,YAAY,GAAI,uBAAtB;AACA,YAAMC,cAAc,GAAGZ,eAAe,CAACa,KAAhB,CAAsBF,YAAtB,EAAoC,IAApC,CAAvB;AACA,UAAIG,WAAJ;;AACA,UAAIN,aAAJ,EAAmB;AACfM,QAAAA,WAAW,GAAGN,aAAa,CAACM,WAA5B;AACH;;AACD,YAAMC,sBAAsB,GAAG;AAAEC,QAAAA,MAAM,EAAE,MAAV;AAAkB,WAAGF,WAArB;AAAkC,WAAGJ;AAArC,OAA/B;AACA,YAAMO,uBAAuB,GAAG,EAAhC;AACA,YAAMC,sBAAsB,GAAG,EAA/B,CATkG,CAWlG;AACA;;AACA,UAAIV,aAAa,IAAIA,aAAa,CAACW,WAAnC,EAAgD;AAC5C,cAAMA,WAAW,GAAG,OAAOX,aAAa,CAACW,WAArB,KAAqC,UAArC,GACdX,aAAa,CAACW,WAAd,EADc,GAEdX,aAAa,CAACW,WAFpB;AAGAF,QAAAA,uBAAuB,CAAC,eAAD,CAAvB,GAA2C,YAAYE,WAAvD;AACH;;AAIDF,MAAAA,uBAAuB,CAAC,cAAD,CAAvB,GAA0C,kBAA1C;AAEAL,MAAAA,cAAc,CAACQ,KAAf,GAAuB,EAAC,GAAGR,cAAc,CAACQ,KAAnB;AAA0B,WAAGF,sBAA7B;AAAqD,WAAGR,OAAO,CAACU;AAAhE,OAAvB,CAxBkG,CAyBlG;;AACA,aAAOR,cAAc,CAACS,MAAtB;AACA,UAAIC,sBAAsB,GAAGR,WAAW,IAAIA,WAAW,CAACS,OAA3B,GAAqCT,WAAW,CAACS,OAAjD,GAA2D,EAAxF;AACAR,MAAAA,sBAAsB,CAACQ,OAAvB,GAAiC,EAAC,GAAGN,uBAAJ;AAA6B,WAAGK,sBAAhC;AAAwD,WAAGZ,OAAO,CAACa;AAAnE,OAAjC;AACA,YAAMC,kBAAkB,GAAI,OAAOiB,gBAAP,KAA4B,QAA7B,IAA0C1B,sBAAsB,CAACQ,OAAvB,CAA+B,cAA/B,MAAmD,kBAAxH;AACAR,MAAAA,sBAAsB,CAACU,IAAvB,GAA+BD,kBAAkB,GAAGE,IAAI,CAACC,SAAL,CAAec,gBAAgB,KAAKb,SAArB,GAAiCa,gBAAjC,GAAoD,EAAnE,CAAH,GAA6EA,gBAAgB,IAAI,EAAlJ;AAEA,aAAO;AACHZ,QAAAA,GAAG,EAAE7B,eAAe,CAAC8B,MAAhB,CAAuBlB,cAAvB,CADF;AAEHF,QAAAA,OAAO,EAAEK;AAFN,OAAP;AAIH,KAvTE;;AAwTH;;;;;;AAMA2B,IAAAA,WAAW,EAAE,OAAOC,eAAP,EAA0CjC,OAAY,GAAG,EAAzD,KAAsF;AAC/F,YAAMC,YAAY,GAAI,sBAAtB;AACA,YAAMC,cAAc,GAAGZ,eAAe,CAACa,KAAhB,CAAsBF,YAAtB,EAAoC,IAApC,CAAvB;AACA,UAAIG,WAAJ;;AACA,UAAIN,aAAJ,EAAmB;AACfM,QAAAA,WAAW,GAAGN,aAAa,CAACM,WAA5B;AACH;;AACD,YAAMC,sBAAsB,GAAG;AAAEC,QAAAA,MAAM,EAAE,MAAV;AAAkB,WAAGF,WAArB;AAAkC,WAAGJ;AAArC,OAA/B;AACA,YAAMO,uBAAuB,GAAG,EAAhC;AACA,YAAMC,sBAAsB,GAAG,EAA/B;AAIAD,MAAAA,uBAAuB,CAAC,cAAD,CAAvB,GAA0C,kBAA1C;AAEAL,MAAAA,cAAc,CAACQ,KAAf,GAAuB,EAAC,GAAGR,cAAc,CAACQ,KAAnB;AAA0B,WAAGF,sBAA7B;AAAqD,WAAGR,OAAO,CAACU;AAAhE,OAAvB,CAf+F,CAgB/F;;AACA,aAAOR,cAAc,CAACS,MAAtB;AACA,UAAIC,sBAAsB,GAAGR,WAAW,IAAIA,WAAW,CAACS,OAA3B,GAAqCT,WAAW,CAACS,OAAjD,GAA2D,EAAxF;AACAR,MAAAA,sBAAsB,CAACQ,OAAvB,GAAiC,EAAC,GAAGN,uBAAJ;AAA6B,WAAGK,sBAAhC;AAAwD,WAAGZ,OAAO,CAACa;AAAnE,OAAjC;AACA,YAAMC,kBAAkB,GAAI,OAAOmB,eAAP,KAA2B,QAA5B,IAAyC5B,sBAAsB,CAACQ,OAAvB,CAA+B,cAA/B,MAAmD,kBAAvH;AACAR,MAAAA,sBAAsB,CAACU,IAAvB,GAA+BD,kBAAkB,GAAGE,IAAI,CAACC,SAAL,CAAegB,eAAe,KAAKf,SAApB,GAAgCe,eAAhC,GAAkD,EAAjE,CAAH,GAA2EA,eAAe,IAAI,EAA/I;AAEA,aAAO;AACHd,QAAAA,GAAG,EAAE7B,eAAe,CAAC8B,MAAhB,CAAuBlB,cAAvB,CADF;AAEHF,QAAAA,OAAO,EAAEK;AAFN,OAAP;AAIH,KAzVE;;AA0VH;;;;;;AAMA6B,IAAAA,WAAW,EAAE,OAAOC,eAAP,EAA0CnC,OAAY,GAAG,EAAzD,KAAsF;AAC/F,YAAMC,YAAY,GAAI,oBAAtB;AACA,YAAMC,cAAc,GAAGZ,eAAe,CAACa,KAAhB,CAAsBF,YAAtB,EAAoC,IAApC,CAAvB;AACA,UAAIG,WAAJ;;AACA,UAAIN,aAAJ,EAAmB;AACfM,QAAAA,WAAW,GAAGN,aAAa,CAACM,WAA5B;AACH;;AACD,YAAMC,sBAAsB,GAAG;AAAEC,QAAAA,MAAM,EAAE,KAAV;AAAiB,WAAGF,WAApB;AAAiC,WAAGJ;AAApC,OAA/B;AACA,YAAMO,uBAAuB,GAAG,EAAhC;AACA,YAAMC,sBAAsB,GAAG,EAA/B;AAIAD,MAAAA,uBAAuB,CAAC,cAAD,CAAvB,GAA0C,kBAA1C;AAEAL,MAAAA,cAAc,CAACQ,KAAf,GAAuB,EAAC,GAAGR,cAAc,CAACQ,KAAnB;AAA0B,WAAGF,sBAA7B;AAAqD,WAAGR,OAAO,CAACU;AAAhE,OAAvB,CAf+F,CAgB/F;;AACA,aAAOR,cAAc,CAACS,MAAtB;AACA,UAAIC,sBAAsB,GAAGR,WAAW,IAAIA,WAAW,CAACS,OAA3B,GAAqCT,WAAW,CAACS,OAAjD,GAA2D,EAAxF;AACAR,MAAAA,sBAAsB,CAACQ,OAAvB,GAAiC,EAAC,GAAGN,uBAAJ;AAA6B,WAAGK,sBAAhC;AAAwD,WAAGZ,OAAO,CAACa;AAAnE,OAAjC;AACA,YAAMC,kBAAkB,GAAI,OAAOqB,eAAP,KAA2B,QAA5B,IAAyC9B,sBAAsB,CAACQ,OAAvB,CAA+B,cAA/B,MAAmD,kBAAvH;AACAR,MAAAA,sBAAsB,CAACU,IAAvB,GAA+BD,kBAAkB,GAAGE,IAAI,CAACC,SAAL,CAAekB,eAAe,KAAKjB,SAApB,GAAgCiB,eAAhC,GAAkD,EAAjE,CAAH,GAA2EA,eAAe,IAAI,EAA/I;AAEA,aAAO;AACHhB,QAAAA,GAAG,EAAE7B,eAAe,CAAC8B,MAAhB,CAAuBlB,cAAvB,CADF;AAEHF,QAAAA,OAAO,EAAEK;AAFN,OAAP;AAIH;AA3XE,GAAP;AA6XH,CA9XM;AAgYP;;;;;KAhYaR,2B;AAoYb,OAAO,MAAMuC,YAAY,GAAG,UAAStC,aAAT,EAAwC;AAChE,SAAO;AACH;;;;;;AAMA,UAAMC,cAAN,CAAqBA,cAArB,EAAsDC,OAAtD,EAAkJ;AAC9I,YAAMqC,iBAAiB,GAAG,MAAMxC,2BAA2B,CAACC,aAAD,CAA3B,CAA2CC,cAA3C,CAA0DA,cAA1D,EAA0EC,OAA1E,CAAhC;AACA,aAAO,CAACsC,KAAoB,GAAG/C,WAAxB,EAAqCgD,QAAgB,GAAG/C,SAAxD,KAAsE;AACzE,cAAMgD,gBAAgB,GAAG,EAAC,GAAGH,iBAAiB,CAACrC,OAAtB;AAA+BmB,UAAAA,GAAG,EAAEoB,QAAQ,GAAGF,iBAAiB,CAAClB;AAAjE,SAAzB;AACA,eAAOmB,KAAK,CAACG,OAAN,CAAcD,gBAAd,CAAP;AACH,OAHD;AAIH,KAbE;;AAcH;;;;;AAKA,UAAMnB,eAAN,CAAsBrB,OAAtB,EAAyH;AACrH,YAAMqC,iBAAiB,GAAG,MAAMxC,2BAA2B,CAACC,aAAD,CAA3B,CAA2CuB,eAA3C,CAA2DrB,OAA3D,CAAhC;AACA,aAAO,CAACsC,KAAoB,GAAG/C,WAAxB,EAAqCgD,QAAgB,GAAG/C,SAAxD,KAAsE;AACzE,cAAMgD,gBAAgB,GAAG,EAAC,GAAGH,iBAAiB,CAACrC,OAAtB;AAA+BmB,UAAAA,GAAG,EAAEoB,QAAQ,GAAGF,iBAAiB,CAAClB;AAAjE,SAAzB;AACA,eAAOmB,KAAK,CAACG,OAAN,CAAcD,gBAAd,CAAP;AACH,OAHD;AAIH,KAzBE;;AA0BH;;;;;AAKA,UAAMlB,OAAN,CAActB,OAAd,EAAwG;AACpG,YAAMqC,iBAAiB,GAAG,MAAMxC,2BAA2B,CAACC,aAAD,CAA3B,CAA2CwB,OAA3C,CAAmDtB,OAAnD,CAAhC;AACA,aAAO,CAACsC,KAAoB,GAAG/C,WAAxB,EAAqCgD,QAAgB,GAAG/C,SAAxD,KAAsE;AACzE,cAAMgD,gBAAgB,GAAG,EAAC,GAAGH,iBAAiB,CAACrC,OAAtB;AAA+BmB,UAAAA,GAAG,EAAEoB,QAAQ,GAAGF,iBAAiB,CAAClB;AAAjE,SAAzB;AACA,eAAOmB,KAAK,CAACG,OAAN,CAAcD,gBAAd,CAAP;AACH,OAHD;AAIH,KArCE;;AAsCH;;;;;AAKA,UAAMjB,eAAN,CAAsBvB,OAAtB,EAAmH;AAC/G,YAAMqC,iBAAiB,GAAG,MAAMxC,2BAA2B,CAACC,aAAD,CAA3B,CAA2CyB,eAA3C,CAA2DvB,OAA3D,CAAhC;AACA,aAAO,CAACsC,KAAoB,GAAG/C,WAAxB,EAAqCgD,QAAgB,GAAG/C,SAAxD,KAAsE;AACzE,cAAMgD,gBAAgB,GAAG,EAAC,GAAGH,iBAAiB,CAACrC,OAAtB;AAA+BmB,UAAAA,GAAG,EAAEoB,QAAQ,GAAGF,iBAAiB,CAAClB;AAAjE,SAAzB;AACA,eAAOmB,KAAK,CAACG,OAAN,CAAcD,gBAAd,CAAP;AACH,OAHD;AAIH,KAjDE;;AAkDH;;;;;;AAMA,UAAMhB,KAAN,CAAYC,SAAZ,EAAmCzB,OAAnC,EAA+H;AAC3H,YAAMqC,iBAAiB,GAAG,MAAMxC,2BAA2B,CAACC,aAAD,CAA3B,CAA2C0B,KAA3C,CAAiDC,SAAjD,EAA4DzB,OAA5D,CAAhC;AACA,aAAO,CAACsC,KAAoB,GAAG/C,WAAxB,EAAqCgD,QAAgB,GAAG/C,SAAxD,KAAsE;AACzE,cAAMgD,gBAAgB,GAAG,EAAC,GAAGH,iBAAiB,CAACrC,OAAtB;AAA+BmB,UAAAA,GAAG,EAAEoB,QAAQ,GAAGF,iBAAiB,CAAClB;AAAjE,SAAzB;AACA,eAAOmB,KAAK,CAACG,OAAN,CAAcD,gBAAd,CAAP;AACH,OAHD;AAIH,KA9DE;;AA+DH;;;;;;AAMA,UAAMd,UAAN,CAAiBC,cAAjB,EAAkD3B,OAAlD,EAAyJ;AACrJ,YAAMqC,iBAAiB,GAAG,MAAMxC,2BAA2B,CAACC,aAAD,CAA3B,CAA2C4B,UAA3C,CAAsDC,cAAtD,EAAsE3B,OAAtE,CAAhC;AACA,aAAO,CAACsC,KAAoB,GAAG/C,WAAxB,EAAqCgD,QAAgB,GAAG/C,SAAxD,KAAsE;AACzE,cAAMgD,gBAAgB,GAAG,EAAC,GAAGH,iBAAiB,CAACrC,OAAtB;AAA+BmB,UAAAA,GAAG,EAAEoB,QAAQ,GAAGF,iBAAiB,CAAClB;AAAjE,SAAzB;AACA,eAAOmB,KAAK,CAACG,OAAN,CAAcD,gBAAd,CAAP;AACH,OAHD;AAIH,KA3EE;;AA4EH;;;;;;AAMA,UAAMZ,QAAN,CAAeC,UAAf,EAAwC7B,OAAxC,EAAoI;AAChI,YAAMqC,iBAAiB,GAAG,MAAMxC,2BAA2B,CAACC,aAAD,CAA3B,CAA2C8B,QAA3C,CAAoDC,UAApD,EAAgE7B,OAAhE,CAAhC;AACA,aAAO,CAACsC,KAAoB,GAAG/C,WAAxB,EAAqCgD,QAAgB,GAAG/C,SAAxD,KAAsE;AACzE,cAAMgD,gBAAgB,GAAG,EAAC,GAAGH,iBAAiB,CAACrC,OAAtB;AAA+BmB,UAAAA,GAAG,EAAEoB,QAAQ,GAAGF,iBAAiB,CAAClB;AAAjE,SAAzB;AACA,eAAOmB,KAAK,CAACG,OAAN,CAAcD,gBAAd,CAAP;AACH,OAHD;AAIH,KAxFE;;AAyFH;;;;;;AAMA,UAAMV,YAAN,CAAmBC,gBAAnB,EAAwD/B,OAAxD,EAA+J;AAC3J,YAAMqC,iBAAiB,GAAG,MAAMxC,2BAA2B,CAACC,aAAD,CAA3B,CAA2CgC,YAA3C,CAAwDC,gBAAxD,EAA0E/B,OAA1E,CAAhC;AACA,aAAO,CAACsC,KAAoB,GAAG/C,WAAxB,EAAqCgD,QAAgB,GAAG/C,SAAxD,KAAsE;AACzE,cAAMgD,gBAAgB,GAAG,EAAC,GAAGH,iBAAiB,CAACrC,OAAtB;AAA+BmB,UAAAA,GAAG,EAAEoB,QAAQ,GAAGF,iBAAiB,CAAClB;AAAjE,SAAzB;AACA,eAAOmB,KAAK,CAACG,OAAN,CAAcD,gBAAd,CAAP;AACH,OAHD;AAIH,KArGE;;AAsGH;;;;;;AAMA,UAAMR,WAAN,CAAkBC,eAAlB,EAAqDjC,OAArD,EAAwJ;AACpJ,YAAMqC,iBAAiB,GAAG,MAAMxC,2BAA2B,CAACC,aAAD,CAA3B,CAA2CkC,WAA3C,CAAuDC,eAAvD,EAAwEjC,OAAxE,CAAhC;AACA,aAAO,CAACsC,KAAoB,GAAG/C,WAAxB,EAAqCgD,QAAgB,GAAG/C,SAAxD,KAAsE;AACzE,cAAMgD,gBAAgB,GAAG,EAAC,GAAGH,iBAAiB,CAACrC,OAAtB;AAA+BmB,UAAAA,GAAG,EAAEoB,QAAQ,GAAGF,iBAAiB,CAAClB;AAAjE,SAAzB;AACA,eAAOmB,KAAK,CAACG,OAAN,CAAcD,gBAAd,CAAP;AACH,OAHD;AAIH,KAlHE;;AAmHH;;;;;;AAMA,UAAMN,WAAN,CAAkBC,eAAlB,EAAqDnC,OAArD,EAAiJ;AAC7I,YAAMqC,iBAAiB,GAAG,MAAMxC,2BAA2B,CAACC,aAAD,CAA3B,CAA2CoC,WAA3C,CAAuDC,eAAvD,EAAwEnC,OAAxE,CAAhC;AACA,aAAO,CAACsC,KAAoB,GAAG/C,WAAxB,EAAqCgD,QAAgB,GAAG/C,SAAxD,KAAsE;AACzE,cAAMgD,gBAAgB,GAAG,EAAC,GAAGH,iBAAiB,CAACrC,OAAtB;AAA+BmB,UAAAA,GAAG,EAAEoB,QAAQ,GAAGF,iBAAiB,CAAClB;AAAjE,SAAzB;AACA,eAAOmB,KAAK,CAACG,OAAN,CAAcD,gBAAd,CAAP;AACH,OAHD;AAIH;;AA/HE,GAAP;AAiIH,CAlIM;AAoIP;;;;;MApIaJ,Y;AAwIb,OAAO,MAAMM,iBAAiB,GAAG,UAAU5C,aAAV,EAAyCyC,QAAzC,EAA4DD,KAA5D,EAAmF;AAChH,SAAO;AACH;;;;;;AAMAvC,IAAAA,cAAc,CAACA,cAAD,EAAkCC,OAAlC,EAAuE;AACjF,aAAOoC,YAAY,CAACtC,aAAD,CAAZ,CAA4BC,cAA5B,CAA2CA,cAA3C,EAA2DC,OAA3D,EAAoE2C,IAApE,CAA0EF,OAAD,IAAaA,OAAO,CAACH,KAAD,EAAQC,QAAR,CAA7F,CAAP;AACH,KATE;;AAUH;;;;;AAKAlB,IAAAA,eAAe,CAACrB,OAAD,EAA6C;AACxD,aAAOoC,YAAY,CAACtC,aAAD,CAAZ,CAA4BuB,eAA5B,CAA4CrB,OAA5C,EAAqD2C,IAArD,CAA2DF,OAAD,IAAaA,OAAO,CAACH,KAAD,EAAQC,QAAR,CAA9E,CAAP;AACH,KAjBE;;AAkBH;;;;;AAKAjB,IAAAA,OAAO,CAACtB,OAAD,EAAoC;AACvC,aAAOoC,YAAY,CAACtC,aAAD,CAAZ,CAA4BwB,OAA5B,CAAoCtB,OAApC,EAA6C2C,IAA7C,CAAmDF,OAAD,IAAaA,OAAO,CAACH,KAAD,EAAQC,QAAR,CAAtE,CAAP;AACH,KAzBE;;AA0BH;;;;;AAKAhB,IAAAA,eAAe,CAACvB,OAAD,EAAuC;AAClD,aAAOoC,YAAY,CAACtC,aAAD,CAAZ,CAA4ByB,eAA5B,CAA4CvB,OAA5C,EAAqD2C,IAArD,CAA2DF,OAAD,IAAaA,OAAO,CAACH,KAAD,EAAQC,QAAR,CAA9E,CAAP;AACH,KAjCE;;AAkCH;;;;;;AAMAf,IAAAA,KAAK,CAACC,SAAD,EAAwBzB,OAAxB,EAA6D;AAC9D,aAAOoC,YAAY,CAACtC,aAAD,CAAZ,CAA4B0B,KAA5B,CAAkCC,SAAlC,EAA6CzB,OAA7C,EAAsD2C,IAAtD,CAA4DF,OAAD,IAAaA,OAAO,CAACH,KAAD,EAAQC,QAAR,CAA/E,CAAP;AACH,KA1CE;;AA2CH;;;;;;AAMAb,IAAAA,UAAU,CAACC,cAAD,EAAkC3B,OAAlC,EAAkF;AACxF,aAAOoC,YAAY,CAACtC,aAAD,CAAZ,CAA4B4B,UAA5B,CAAuCC,cAAvC,EAAuD3B,OAAvD,EAAgE2C,IAAhE,CAAsEF,OAAD,IAAaA,OAAO,CAACH,KAAD,EAAQC,QAAR,CAAzF,CAAP;AACH,KAnDE;;AAoDH;;;;;;AAMAX,IAAAA,QAAQ,CAACC,UAAD,EAA0B7B,OAA1B,EAA+D;AACnE,aAAOoC,YAAY,CAACtC,aAAD,CAAZ,CAA4B8B,QAA5B,CAAqCC,UAArC,EAAiD7B,OAAjD,EAA0D2C,IAA1D,CAAgEF,OAAD,IAAaA,OAAO,CAACH,KAAD,EAAQC,QAAR,CAAnF,CAAP;AACH,KA5DE;;AA6DH;;;;;;AAMAT,IAAAA,YAAY,CAACC,gBAAD,EAAsC/B,OAAtC,EAAsF;AAC9F,aAAOoC,YAAY,CAACtC,aAAD,CAAZ,CAA4BgC,YAA5B,CAAyCC,gBAAzC,EAA2D/B,OAA3D,EAAoE2C,IAApE,CAA0EF,OAAD,IAAaA,OAAO,CAACH,KAAD,EAAQC,QAAR,CAA7F,CAAP;AACH,KArEE;;AAsEH;;;;;;AAMAP,IAAAA,WAAW,CAACC,eAAD,EAAoCjC,OAApC,EAAgF;AACvF,aAAOoC,YAAY,CAACtC,aAAD,CAAZ,CAA4BkC,WAA5B,CAAwCC,eAAxC,EAAyDjC,OAAzD,EAAkE2C,IAAlE,CAAwEF,OAAD,IAAaA,OAAO,CAACH,KAAD,EAAQC,QAAR,CAA3F,CAAP;AACH,KA9EE;;AA+EH;;;;;;AAMAL,IAAAA,WAAW,CAACC,eAAD,EAAoCnC,OAApC,EAAyE;AAChF,aAAOoC,YAAY,CAACtC,aAAD,CAAZ,CAA4BoC,WAA5B,CAAwCC,eAAxC,EAAyDnC,OAAzD,EAAkE2C,IAAlE,CAAwEF,OAAD,IAAaA,OAAO,CAACH,KAAD,EAAQC,QAAR,CAA3F,CAAP;AACH;;AAvFE,GAAP;AAyFH,CA1FM;AA4FP;;;;;;;MA5FaG,iB;AAkGb,OAAO,MAAME,UAAN,SAAyBnD,OAAzB,CAAiC;AACpC;;;;;;;AAOOM,EAAAA,cAAP,CAAsBA,cAAtB,EAAuDC,OAAvD,EAAsE;AAClE,WAAOoC,YAAY,CAAC,KAAKtC,aAAN,CAAZ,CAAiCC,cAAjC,CAAgDA,cAAhD,EAAgEC,OAAhE,EAAyE2C,IAAzE,CAA+EF,OAAD,IAAaA,OAAO,CAAC,KAAKH,KAAN,EAAa,KAAKC,QAAlB,CAAlG,CAAP;AACH;AAED;;;;;;;;AAMOlB,EAAAA,eAAP,CAAuBrB,OAAvB,EAAsC;AAClC,WAAOoC,YAAY,CAAC,KAAKtC,aAAN,CAAZ,CAAiCuB,eAAjC,CAAiDrB,OAAjD,EAA0D2C,IAA1D,CAAgEF,OAAD,IAAaA,OAAO,CAAC,KAAKH,KAAN,EAAa,KAAKC,QAAlB,CAAnF,CAAP;AACH;AAED;;;;;;;;AAMOjB,EAAAA,OAAP,CAAetB,OAAf,EAA8B;AAC1B,WAAOoC,YAAY,CAAC,KAAKtC,aAAN,CAAZ,CAAiCwB,OAAjC,CAAyCtB,OAAzC,EAAkD2C,IAAlD,CAAwDF,OAAD,IAAaA,OAAO,CAAC,KAAKH,KAAN,EAAa,KAAKC,QAAlB,CAA3E,CAAP;AACH;AAED;;;;;;;;AAMOhB,EAAAA,eAAP,CAAuBvB,OAAvB,EAAsC;AAClC,WAAOoC,YAAY,CAAC,KAAKtC,aAAN,CAAZ,CAAiCyB,eAAjC,CAAiDvB,OAAjD,EAA0D2C,IAA1D,CAAgEF,OAAD,IAAaA,OAAO,CAAC,KAAKH,KAAN,EAAa,KAAKC,QAAlB,CAAnF,CAAP;AACH;AAED;;;;;;;;;AAOOf,EAAAA,KAAP,CAAaC,SAAb,EAAoCzB,OAApC,EAAmD;AAC/C,WAAOoC,YAAY,CAAC,KAAKtC,aAAN,CAAZ,CAAiC0B,KAAjC,CAAuCC,SAAvC,EAAkDzB,OAAlD,EAA2D2C,IAA3D,CAAiEF,OAAD,IAAaA,OAAO,CAAC,KAAKH,KAAN,EAAa,KAAKC,QAAlB,CAApF,CAAP;AACH;AAED;;;;;;;;;AAOOb,EAAAA,UAAP,CAAkBC,cAAlB,EAAmD3B,OAAnD,EAAkE;AAC9D,WAAOoC,YAAY,CAAC,KAAKtC,aAAN,CAAZ,CAAiC4B,UAAjC,CAA4CC,cAA5C,EAA4D3B,OAA5D,EAAqE2C,IAArE,CAA2EF,OAAD,IAAaA,OAAO,CAAC,KAAKH,KAAN,EAAa,KAAKC,QAAlB,CAA9F,CAAP;AACH;AAED;;;;;;;;;AAOOX,EAAAA,QAAP,CAAgBC,UAAhB,EAAyC7B,OAAzC,EAAwD;AACpD,WAAOoC,YAAY,CAAC,KAAKtC,aAAN,CAAZ,CAAiC8B,QAAjC,CAA0CC,UAA1C,EAAsD7B,OAAtD,EAA+D2C,IAA/D,CAAqEF,OAAD,IAAaA,OAAO,CAAC,KAAKH,KAAN,EAAa,KAAKC,QAAlB,CAAxF,CAAP;AACH;AAED;;;;;;;;;AAOOT,EAAAA,YAAP,CAAoBC,gBAApB,EAAyD/B,OAAzD,EAAwE;AACpE,WAAOoC,YAAY,CAAC,KAAKtC,aAAN,CAAZ,CAAiCgC,YAAjC,CAA8CC,gBAA9C,EAAgE/B,OAAhE,EAAyE2C,IAAzE,CAA+EF,OAAD,IAAaA,OAAO,CAAC,KAAKH,KAAN,EAAa,KAAKC,QAAlB,CAAlG,CAAP;AACH;AAED;;;;;;;;;AAOOP,EAAAA,WAAP,CAAmBC,eAAnB,EAAsDjC,OAAtD,EAAqE;AACjE,WAAOoC,YAAY,CAAC,KAAKtC,aAAN,CAAZ,CAAiCkC,WAAjC,CAA6CC,eAA7C,EAA8DjC,OAA9D,EAAuE2C,IAAvE,CAA6EF,OAAD,IAAaA,OAAO,CAAC,KAAKH,KAAN,EAAa,KAAKC,QAAlB,CAAhG,CAAP;AACH;AAED;;;;;;;;;AAOOL,EAAAA,WAAP,CAAmBC,eAAnB,EAAsDnC,OAAtD,EAAqE;AACjE,WAAOoC,YAAY,CAAC,KAAKtC,aAAN,CAAZ,CAAiCoC,WAAjC,CAA6CC,eAA7C,EAA8DnC,OAA9D,EAAuE2C,IAAvE,CAA6EF,OAAD,IAAaA,OAAO,CAAC,KAAKH,KAAN,EAAa,KAAKC,QAAlB,CAAhG,CAAP;AACH;;AA1GmC","sourcesContent":["// tslint:disable\n/**\n * masterseats-server\n * MasterSeats Server\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as globalImportUrl from 'url';\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface ChangePassword\n */\nexport interface ChangePassword {\n    /**\n     * \n     * @type {string}\n     * @memberof ChangePassword\n     */\n    email: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ChangePassword\n     */\n    password: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ChangePassword\n     */\n    old_password: string;\n}\n/**\n * \n * @export\n * @enum {string}\n */\nexport enum FilterOptions {\n    PriceLowestToHighest = 'Price - lowest to highest',\n    PriceHighestToLowest = 'Price - highest to lowest',\n    LowestSection = 'Lowest Section',\n    HighestSection = 'Highest Section'\n}\n\n/**\n * \n * @export\n * @interface InlineResponse200\n */\nexport interface InlineResponse200 {\n    /**\n     * \n     * @type {string}\n     * @memberof InlineResponse200\n     */\n    message: string;\n}\n/**\n * \n * @export\n * @interface LoginBody\n */\nexport interface LoginBody {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginBody\n     */\n    email: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginBody\n     */\n    password: string;\n}\n/**\n * \n * @export\n * @enum {string}\n */\nexport enum MichiganFootballGame {\n    BallState = 'Michigan vs. Ball State',\n    ArkansasState = 'Michigan vs. Arkansas State',\n    Wisconsin = 'Michigan vs. Wisconsin',\n    PennState = 'Michigan vs. Penn State',\n    Maryland = 'Michigan vs. Maryland',\n    Indiana = 'Michigan vs. Indiana'\n}\n\n/**\n * \n * @export\n * @interface PostTicketBody\n */\nexport interface PostTicketBody {\n    /**\n     * \n     * @type {MichiganFootballGame}\n     * @memberof PostTicketBody\n     */\n    game: MichiganFootballGame;\n    /**\n     * \n     * @type {number}\n     * @memberof PostTicketBody\n     */\n    price: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PostTicketBody\n     */\n    section: number;\n}\n/**\n * \n * @export\n * @interface RemoveTicketBody\n */\nexport interface RemoveTicketBody {\n    /**\n     * \n     * @type {string}\n     * @memberof RemoveTicketBody\n     */\n    id: string;\n}\n/**\n * \n * @export\n * @interface SignUpBody\n */\nexport interface SignUpBody {\n    /**\n     * \n     * @type {string}\n     * @memberof SignUpBody\n     */\n    email: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SignUpBody\n     */\n    password: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SignUpBody\n     */\n    first_name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SignUpBody\n     */\n    last_name: string;\n}\n/**\n * \n * @export\n * @interface SortTicketsBody\n */\nexport interface SortTicketsBody {\n    /**\n     * \n     * @type {MichiganFootballGame}\n     * @memberof SortTicketsBody\n     */\n    game?: MichiganFootballGame;\n    /**\n     * \n     * @type {FilterOptions}\n     * @memberof SortTicketsBody\n     */\n    filter?: FilterOptions;\n}\n/**\n * \n * @export\n * @interface Ticket\n */\nexport interface Ticket {\n    /**\n     * \n     * @type {string}\n     * @memberof Ticket\n     */\n    id: string;\n    /**\n     * \n     * @type {MichiganFootballGame}\n     * @memberof Ticket\n     */\n    game: MichiganFootballGame;\n    /**\n     * \n     * @type {number}\n     * @memberof Ticket\n     */\n    section: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Ticket\n     */\n    price: number;\n    /**\n     * \n     * @type {TicketStatus}\n     * @memberof Ticket\n     */\n    status: TicketStatus;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Ticket\n     */\n    confirmed_seller_transfer: boolean;\n    /**\n     * \n     * @type {User}\n     * @memberof Ticket\n     */\n    user: User;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Ticket\n     */\n    confirmed_buyer_transfer: boolean;\n}\n/**\n * \n * @export\n * @enum {string}\n */\nexport enum TicketStatus {\n    Open = 'Open',\n    Removed = 'Removed',\n    PendingTransfer = 'Pending Transfer',\n    CompletedTransfer = 'Completed Transfer'\n}\n\n/**\n * \n * @export\n * @interface User\n */\nexport interface User {\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    email: string;\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    password: string;\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    first_name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    last_name: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof User\n     */\n    is_email_verified: boolean;\n    /**\n     * \n     * @type {Array<Ticket>}\n     * @memberof User\n     */\n    ticket_wallet: Array<Ticket>;\n}\n/**\n * \n * @export\n * @interface VerifyEmailBody\n */\nexport interface VerifyEmailBody {\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyEmailBody\n     */\n    id: string;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {ChangePassword} [changePassword] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        changePassword: async (changePassword?: ChangePassword, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/user/change-password`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof changePassword !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(changePassword !== undefined ? changePassword : {}) : (changePassword || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTicketWallet: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/user/get-ticket-wallet`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUser: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/user/get-user`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isEmailVerified: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/user/is-email-verified`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {LoginBody} [loginBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login: async (loginBody?: LoginBody, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/user/login`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof loginBody !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(loginBody !== undefined ? loginBody : {}) : (loginBody || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {PostTicketBody} [postTicketBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postTicket: async (postTicketBody?: PostTicketBody, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/ticket/post-ticket`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof postTicketBody !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(postTicketBody !== undefined ? postTicketBody : {}) : (postTicketBody || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {SignUpBody} [signUpBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        register: async (signUpBody?: SignUpBody, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/user/register`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof signUpBody !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(signUpBody !== undefined ? signUpBody : {}) : (signUpBody || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {RemoveTicketBody} [removeTicketBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removeTicket: async (removeTicketBody?: RemoveTicketBody, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/ticket/remove-ticket`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof removeTicketBody !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(removeTicketBody !== undefined ? removeTicketBody : {}) : (removeTicketBody || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {SortTicketsBody} [sortTicketsBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sortTickets: async (sortTicketsBody?: SortTicketsBody, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/ticket/sort-tickets`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof sortTicketsBody !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(sortTicketsBody !== undefined ? sortTicketsBody : {}) : (sortTicketsBody || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {VerifyEmailBody} [verifyEmailBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verifyEmail: async (verifyEmailBody?: VerifyEmailBody, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/user/verify-email`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof verifyEmailBody !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(verifyEmailBody !== undefined ? verifyEmailBody : {}) : (verifyEmailBody || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {ChangePassword} [changePassword] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async changePassword(changePassword?: ChangePassword, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).changePassword(changePassword, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getTicketWallet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Ticket>>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getTicketWallet(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getUser(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getUser(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async isEmailVerified(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).isEmailVerified(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {LoginBody} [loginBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async login(loginBody?: LoginBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).login(loginBody, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {PostTicketBody} [postTicketBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async postTicket(postTicketBody?: PostTicketBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postTicket(postTicketBody, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {SignUpBody} [signUpBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async register(signUpBody?: SignUpBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).register(signUpBody, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {RemoveTicketBody} [removeTicketBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async removeTicket(removeTicketBody?: RemoveTicketBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).removeTicket(removeTicketBody, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {SortTicketsBody} [sortTicketsBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async sortTickets(sortTicketsBody?: SortTicketsBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Ticket>>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).sortTickets(sortTicketsBody, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {VerifyEmailBody} [verifyEmailBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async verifyEmail(verifyEmailBody?: VerifyEmailBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).verifyEmail(verifyEmailBody, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @param {ChangePassword} [changePassword] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        changePassword(changePassword?: ChangePassword, options?: any): AxiosPromise<string> {\n            return DefaultApiFp(configuration).changePassword(changePassword, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTicketWallet(options?: any): AxiosPromise<Array<Ticket>> {\n            return DefaultApiFp(configuration).getTicketWallet(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUser(options?: any): AxiosPromise<User> {\n            return DefaultApiFp(configuration).getUser(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isEmailVerified(options?: any): AxiosPromise<boolean> {\n            return DefaultApiFp(configuration).isEmailVerified(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {LoginBody} [loginBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login(loginBody?: LoginBody, options?: any): AxiosPromise<string> {\n            return DefaultApiFp(configuration).login(loginBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {PostTicketBody} [postTicketBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postTicket(postTicketBody?: PostTicketBody, options?: any): AxiosPromise<InlineResponse200> {\n            return DefaultApiFp(configuration).postTicket(postTicketBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {SignUpBody} [signUpBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        register(signUpBody?: SignUpBody, options?: any): AxiosPromise<string> {\n            return DefaultApiFp(configuration).register(signUpBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {RemoveTicketBody} [removeTicketBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removeTicket(removeTicketBody?: RemoveTicketBody, options?: any): AxiosPromise<InlineResponse200> {\n            return DefaultApiFp(configuration).removeTicket(removeTicketBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {SortTicketsBody} [sortTicketsBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sortTickets(sortTicketsBody?: SortTicketsBody, options?: any): AxiosPromise<Array<Ticket>> {\n            return DefaultApiFp(configuration).sortTickets(sortTicketsBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {VerifyEmailBody} [verifyEmailBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verifyEmail(verifyEmailBody?: VerifyEmailBody, options?: any): AxiosPromise<string> {\n            return DefaultApiFp(configuration).verifyEmail(verifyEmailBody, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI {\n    /**\n     * \n     * @param {ChangePassword} [changePassword] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public changePassword(changePassword?: ChangePassword, options?: any) {\n        return DefaultApiFp(this.configuration).changePassword(changePassword, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getTicketWallet(options?: any) {\n        return DefaultApiFp(this.configuration).getTicketWallet(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getUser(options?: any) {\n        return DefaultApiFp(this.configuration).getUser(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public isEmailVerified(options?: any) {\n        return DefaultApiFp(this.configuration).isEmailVerified(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {LoginBody} [loginBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public login(loginBody?: LoginBody, options?: any) {\n        return DefaultApiFp(this.configuration).login(loginBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {PostTicketBody} [postTicketBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public postTicket(postTicketBody?: PostTicketBody, options?: any) {\n        return DefaultApiFp(this.configuration).postTicket(postTicketBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {SignUpBody} [signUpBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public register(signUpBody?: SignUpBody, options?: any) {\n        return DefaultApiFp(this.configuration).register(signUpBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {RemoveTicketBody} [removeTicketBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public removeTicket(removeTicketBody?: RemoveTicketBody, options?: any) {\n        return DefaultApiFp(this.configuration).removeTicket(removeTicketBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {SortTicketsBody} [sortTicketsBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public sortTickets(sortTicketsBody?: SortTicketsBody, options?: any) {\n        return DefaultApiFp(this.configuration).sortTickets(sortTicketsBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {VerifyEmailBody} [verifyEmailBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public verifyEmail(verifyEmailBody?: VerifyEmailBody, options?: any) {\n        return DefaultApiFp(this.configuration).verifyEmail(verifyEmailBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n}\n\n\n"]},"metadata":{},"sourceType":"module"}