{"ast":null,"code":"// tslint:disable\n\n/**\n * masterseats-server\n * MasterSeats Server\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport * as globalImportUrl from 'url';\nimport globalAxios from 'axios'; // Some imports not used depending on template conditions\n// @ts-ignore\n\nimport { BASE_PATH, BaseAPI } from './base';\n/**\n * \n * @export\n * @interface ChangePassword\n */\n\n/**\n * \n * @export\n * @enum {string}\n */\nexport let FilterOptions;\n/**\n * \n * @export\n * @interface ForgotPasswordBody\n */\n\n(function (FilterOptions) {\n  FilterOptions[\"PriceLowestToHighest\"] = \"Price - lowest to highest\";\n  FilterOptions[\"PriceHighestToLowest\"] = \"Price - highest to lowest\";\n  FilterOptions[\"LowestSection\"] = \"Lowest Section\";\n  FilterOptions[\"HighestSection\"] = \"Highest Section\";\n})(FilterOptions || (FilterOptions = {}));\n\n/**\n * \n * @export\n * @enum {string}\n */\nexport let MichiganFootballGame;\n/**\n * \n * @export\n * @interface OrderConfirmation\n */\n\n(function (MichiganFootballGame) {\n  MichiganFootballGame[\"BallState\"] = \"Michigan vs. Ball State\";\n  MichiganFootballGame[\"ArkansasState\"] = \"Michigan vs. Arkansas State\";\n  MichiganFootballGame[\"Wisconsin\"] = \"Michigan vs. Wisconsin\";\n  MichiganFootballGame[\"PennState\"] = \"Michigan vs. Penn State\";\n  MichiganFootballGame[\"Maryland\"] = \"Michigan vs. Maryland\";\n  MichiganFootballGame[\"Indiana\"] = \"Michigan vs. Indiana\";\n})(MichiganFootballGame || (MichiganFootballGame = {}));\n\n/**\n * \n * @export\n * @enum {string}\n */\nexport let TicketStatus;\n/**\n * \n * @export\n * @interface User\n */\n\n(function (TicketStatus) {\n  TicketStatus[\"Open\"] = \"Open\";\n  TicketStatus[\"Removed\"] = \"Removed\";\n  TicketStatus[\"PendingTransfer\"] = \"Pending Transfer\";\n  TicketStatus[\"CompletedTransfer\"] = \"Completed Transfer\";\n})(TicketStatus || (TicketStatus = {}));\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration) {\n  return {\n    /**\n     * \n     * @param {ChangePassword} [changePassword] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    changePassword: async (changePassword, options = {}) => {\n      const localVarPath = `/user/change-password`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof changePassword !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(changePassword !== undefined ? changePassword : {}) : changePassword || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    changePasswordFromProfile: async (options = {}) => {\n      const localVarPath = `/user/change-password-profile`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {ForgotPasswordBody} [forgotPasswordBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    forgotPasswordEmail: async (forgotPasswordBody, options = {}) => {\n      const localVarPath = `/user/forgot-password-email`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof forgotPasswordBody !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(forgotPasswordBody !== undefined ? forgotPasswordBody : {}) : forgotPasswordBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getClientToken: async (options = {}) => {\n      const localVarPath = `/user/client-token`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getTicketWallet: async (options = {}) => {\n      const localVarPath = `/user/get-ticket-wallet`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getUser: async (options = {}) => {\n      const localVarPath = `/user/get-user`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    isEmailVerified: async (options = {}) => {\n      const localVarPath = `/user/is-email-verified`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {LoginBody} [loginBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    login: async (loginBody, options = {}) => {\n      const localVarPath = `/user/login`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof loginBody !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(loginBody !== undefined ? loginBody : {}) : loginBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {OrderConfirmation} [orderConfirmation] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    orderConfirmation: async (orderConfirmation, options = {}) => {\n      const localVarPath = `/ticket/order-confirmation`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof orderConfirmation !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(orderConfirmation !== undefined ? orderConfirmation : {}) : orderConfirmation || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {PostTicketBody} [postTicketBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    postTicket: async (postTicketBody, options = {}) => {\n      const localVarPath = `/ticket/post-ticket`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof postTicketBody !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(postTicketBody !== undefined ? postTicketBody : {}) : postTicketBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {SignUpBody} [signUpBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    register: async (signUpBody, options = {}) => {\n      const localVarPath = `/user/register`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof signUpBody !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(signUpBody !== undefined ? signUpBody : {}) : signUpBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {RemoveTicketBody} [removeTicketBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    removeTicket: async (removeTicketBody, options = {}) => {\n      const localVarPath = `/ticket/remove-ticket`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof removeTicketBody !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(removeTicketBody !== undefined ? removeTicketBody : {}) : removeTicketBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {SortTicketsBody} [sortTicketsBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sortTickets: async (sortTicketsBody, options = {}) => {\n      const localVarPath = `/ticket/sort-tickets`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof sortTicketsBody !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(sortTicketsBody !== undefined ? sortTicketsBody : {}) : sortTicketsBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {SortTicketsBody} [sortTicketsBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sortTicketsSecure: async (sortTicketsBody, options = {}) => {\n      const localVarPath = `/ticket/sort-tickets-secure`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof sortTicketsBody !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(sortTicketsBody !== undefined ? sortTicketsBody : {}) : sortTicketsBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {CheckoutTicket} [checkoutTicket] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferredTicketBuyerConfirmation: async (checkoutTicket, options = {}) => {\n      const localVarPath = `/ticket/transferred-ticket-buyer-confirmation`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof checkoutTicket !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(checkoutTicket !== undefined ? checkoutTicket : {}) : checkoutTicket || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {CheckoutTicket} [checkoutTicket] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferredTicketSellerConfirmation: async (checkoutTicket, options = {}) => {\n      const localVarPath = `/ticket/transferred-ticket-seller-confirmation`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof checkoutTicket !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(checkoutTicket !== undefined ? checkoutTicket : {}) : checkoutTicket || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {VerifyEmailBody} [verifyEmailBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    verifyEmail: async (verifyEmailBody, options = {}) => {\n      const localVarPath = `/user/verify-email`;\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof verifyEmailBody !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(verifyEmailBody !== undefined ? verifyEmailBody : {}) : verifyEmailBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }\n  };\n};\n/**\n * DefaultApi - functional programming interface\n * @export\n */\n\nexport const DefaultApiFp = function (configuration) {\n  return {\n    /**\n     * \n     * @param {ChangePassword} [changePassword] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async changePassword(changePassword, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).changePassword(changePassword, options);\n      return (axios = globalAxios, basePath = BASE_PATH) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async changePasswordFromProfile(options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).changePasswordFromProfile(options);\n      return (axios = globalAxios, basePath = BASE_PATH) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {ForgotPasswordBody} [forgotPasswordBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async forgotPasswordEmail(forgotPasswordBody, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).forgotPasswordEmail(forgotPasswordBody, options);\n      return (axios = globalAxios, basePath = BASE_PATH) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getClientToken(options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getClientToken(options);\n      return (axios = globalAxios, basePath = BASE_PATH) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getTicketWallet(options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getTicketWallet(options);\n      return (axios = globalAxios, basePath = BASE_PATH) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getUser(options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getUser(options);\n      return (axios = globalAxios, basePath = BASE_PATH) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async isEmailVerified(options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).isEmailVerified(options);\n      return (axios = globalAxios, basePath = BASE_PATH) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {LoginBody} [loginBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async login(loginBody, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).login(loginBody, options);\n      return (axios = globalAxios, basePath = BASE_PATH) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {OrderConfirmation} [orderConfirmation] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async orderConfirmation(orderConfirmation, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).orderConfirmation(orderConfirmation, options);\n      return (axios = globalAxios, basePath = BASE_PATH) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {PostTicketBody} [postTicketBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async postTicket(postTicketBody, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postTicket(postTicketBody, options);\n      return (axios = globalAxios, basePath = BASE_PATH) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {SignUpBody} [signUpBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async register(signUpBody, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).register(signUpBody, options);\n      return (axios = globalAxios, basePath = BASE_PATH) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {RemoveTicketBody} [removeTicketBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async removeTicket(removeTicketBody, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).removeTicket(removeTicketBody, options);\n      return (axios = globalAxios, basePath = BASE_PATH) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {SortTicketsBody} [sortTicketsBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async sortTickets(sortTicketsBody, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).sortTickets(sortTicketsBody, options);\n      return (axios = globalAxios, basePath = BASE_PATH) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {SortTicketsBody} [sortTicketsBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async sortTicketsSecure(sortTicketsBody, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).sortTicketsSecure(sortTicketsBody, options);\n      return (axios = globalAxios, basePath = BASE_PATH) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {CheckoutTicket} [checkoutTicket] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async transferredTicketBuyerConfirmation(checkoutTicket, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).transferredTicketBuyerConfirmation(checkoutTicket, options);\n      return (axios = globalAxios, basePath = BASE_PATH) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {CheckoutTicket} [checkoutTicket] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async transferredTicketSellerConfirmation(checkoutTicket, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).transferredTicketSellerConfirmation(checkoutTicket, options);\n      return (axios = globalAxios, basePath = BASE_PATH) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {VerifyEmailBody} [verifyEmailBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async verifyEmail(verifyEmailBody, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).verifyEmail(verifyEmailBody, options);\n      return (axios = globalAxios, basePath = BASE_PATH) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    }\n\n  };\n};\n/**\n * DefaultApi - factory interface\n * @export\n */\n\nexport const DefaultApiFactory = function (configuration, basePath, axios) {\n  return {\n    /**\n     * \n     * @param {ChangePassword} [changePassword] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    changePassword(changePassword, options) {\n      return DefaultApiFp(configuration).changePassword(changePassword, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    changePasswordFromProfile(options) {\n      return DefaultApiFp(configuration).changePasswordFromProfile(options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {ForgotPasswordBody} [forgotPasswordBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    forgotPasswordEmail(forgotPasswordBody, options) {\n      return DefaultApiFp(configuration).forgotPasswordEmail(forgotPasswordBody, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getClientToken(options) {\n      return DefaultApiFp(configuration).getClientToken(options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getTicketWallet(options) {\n      return DefaultApiFp(configuration).getTicketWallet(options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getUser(options) {\n      return DefaultApiFp(configuration).getUser(options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    isEmailVerified(options) {\n      return DefaultApiFp(configuration).isEmailVerified(options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {LoginBody} [loginBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    login(loginBody, options) {\n      return DefaultApiFp(configuration).login(loginBody, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {OrderConfirmation} [orderConfirmation] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    orderConfirmation(orderConfirmation, options) {\n      return DefaultApiFp(configuration).orderConfirmation(orderConfirmation, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {PostTicketBody} [postTicketBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    postTicket(postTicketBody, options) {\n      return DefaultApiFp(configuration).postTicket(postTicketBody, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {SignUpBody} [signUpBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    register(signUpBody, options) {\n      return DefaultApiFp(configuration).register(signUpBody, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {RemoveTicketBody} [removeTicketBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    removeTicket(removeTicketBody, options) {\n      return DefaultApiFp(configuration).removeTicket(removeTicketBody, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {SortTicketsBody} [sortTicketsBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sortTickets(sortTicketsBody, options) {\n      return DefaultApiFp(configuration).sortTickets(sortTicketsBody, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {SortTicketsBody} [sortTicketsBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sortTicketsSecure(sortTicketsBody, options) {\n      return DefaultApiFp(configuration).sortTicketsSecure(sortTicketsBody, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {CheckoutTicket} [checkoutTicket] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferredTicketBuyerConfirmation(checkoutTicket, options) {\n      return DefaultApiFp(configuration).transferredTicketBuyerConfirmation(checkoutTicket, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {CheckoutTicket} [checkoutTicket] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferredTicketSellerConfirmation(checkoutTicket, options) {\n      return DefaultApiFp(configuration).transferredTicketSellerConfirmation(checkoutTicket, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {VerifyEmailBody} [verifyEmailBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    verifyEmail(verifyEmailBody, options) {\n      return DefaultApiFp(configuration).verifyEmail(verifyEmailBody, options).then(request => request(axios, basePath));\n    }\n\n  };\n};\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\n\nexport class DefaultApi extends BaseAPI {\n  /**\n   * \n   * @param {ChangePassword} [changePassword] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  changePassword(changePassword, options) {\n    return DefaultApiFp(this.configuration).changePassword(changePassword, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  changePasswordFromProfile(options) {\n    return DefaultApiFp(this.configuration).changePasswordFromProfile(options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {ForgotPasswordBody} [forgotPasswordBody] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  forgotPasswordEmail(forgotPasswordBody, options) {\n    return DefaultApiFp(this.configuration).forgotPasswordEmail(forgotPasswordBody, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  getClientToken(options) {\n    return DefaultApiFp(this.configuration).getClientToken(options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  getTicketWallet(options) {\n    return DefaultApiFp(this.configuration).getTicketWallet(options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  getUser(options) {\n    return DefaultApiFp(this.configuration).getUser(options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  isEmailVerified(options) {\n    return DefaultApiFp(this.configuration).isEmailVerified(options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {LoginBody} [loginBody] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  login(loginBody, options) {\n    return DefaultApiFp(this.configuration).login(loginBody, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {OrderConfirmation} [orderConfirmation] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  orderConfirmation(orderConfirmation, options) {\n    return DefaultApiFp(this.configuration).orderConfirmation(orderConfirmation, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {PostTicketBody} [postTicketBody] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  postTicket(postTicketBody, options) {\n    return DefaultApiFp(this.configuration).postTicket(postTicketBody, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {SignUpBody} [signUpBody] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  register(signUpBody, options) {\n    return DefaultApiFp(this.configuration).register(signUpBody, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {RemoveTicketBody} [removeTicketBody] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  removeTicket(removeTicketBody, options) {\n    return DefaultApiFp(this.configuration).removeTicket(removeTicketBody, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {SortTicketsBody} [sortTicketsBody] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  sortTickets(sortTicketsBody, options) {\n    return DefaultApiFp(this.configuration).sortTickets(sortTicketsBody, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {SortTicketsBody} [sortTicketsBody] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  sortTicketsSecure(sortTicketsBody, options) {\n    return DefaultApiFp(this.configuration).sortTicketsSecure(sortTicketsBody, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {CheckoutTicket} [checkoutTicket] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  transferredTicketBuyerConfirmation(checkoutTicket, options) {\n    return DefaultApiFp(this.configuration).transferredTicketBuyerConfirmation(checkoutTicket, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {CheckoutTicket} [checkoutTicket] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  transferredTicketSellerConfirmation(checkoutTicket, options) {\n    return DefaultApiFp(this.configuration).transferredTicketSellerConfirmation(checkoutTicket, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {VerifyEmailBody} [verifyEmailBody] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  verifyEmail(verifyEmailBody, options) {\n    return DefaultApiFp(this.configuration).verifyEmail(verifyEmailBody, options).then(request => request(this.axios, this.basePath));\n  }\n\n}","map":{"version":3,"sources":["/Users/insanity/Documents/MasterSeats/new/client/api/api.ts"],"names":["globalImportUrl","globalAxios","BASE_PATH","BaseAPI","FilterOptions","MichiganFootballGame","TicketStatus","DefaultApiAxiosParamCreator","configuration","changePassword","options","localVarPath","localVarUrlObj","parse","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","query","search","headersFromBaseOptions","headers","needsSerialization","data","JSON","stringify","undefined","url","format","changePasswordFromProfile","accessToken","forgotPasswordEmail","forgotPasswordBody","getClientToken","getTicketWallet","getUser","isEmailVerified","login","loginBody","orderConfirmation","postTicket","postTicketBody","register","signUpBody","removeTicket","removeTicketBody","sortTickets","sortTicketsBody","sortTicketsSecure","transferredTicketBuyerConfirmation","checkoutTicket","transferredTicketSellerConfirmation","verifyEmail","verifyEmailBody","DefaultApiFp","localVarAxiosArgs","axios","basePath","axiosRequestArgs","request","DefaultApiFactory","then","DefaultApi"],"mappings":"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","sourcesContent":["// tslint:disable\n/**\n * masterseats-server\n * MasterSeats Server\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as globalImportUrl from 'url';\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface ChangePassword\n */\nexport interface ChangePassword {\n    /**\n     * \n     * @type {string}\n     * @memberof ChangePassword\n     */\n    token: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ChangePassword\n     */\n    new_password: string;\n}\n/**\n * \n * @export\n * @interface CheckoutTicket\n */\nexport interface CheckoutTicket {\n    /**\n     * \n     * @type {string}\n     * @memberof CheckoutTicket\n     */\n    ticket_id: string;\n}\n/**\n * \n * @export\n * @enum {string}\n */\nexport enum FilterOptions {\n    PriceLowestToHighest = 'Price - lowest to highest',\n    PriceHighestToLowest = 'Price - highest to lowest',\n    LowestSection = 'Lowest Section',\n    HighestSection = 'Highest Section'\n}\n\n/**\n * \n * @export\n * @interface ForgotPasswordBody\n */\nexport interface ForgotPasswordBody {\n    /**\n     * \n     * @type {string}\n     * @memberof ForgotPasswordBody\n     */\n    email: string;\n}\n/**\n * \n * @export\n * @interface LoginBody\n */\nexport interface LoginBody {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginBody\n     */\n    email: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginBody\n     */\n    password: string;\n}\n/**\n * \n * @export\n * @enum {string}\n */\nexport enum MichiganFootballGame {\n    BallState = 'Michigan vs. Ball State',\n    ArkansasState = 'Michigan vs. Arkansas State',\n    Wisconsin = 'Michigan vs. Wisconsin',\n    PennState = 'Michigan vs. Penn State',\n    Maryland = 'Michigan vs. Maryland',\n    Indiana = 'Michigan vs. Indiana'\n}\n\n/**\n * \n * @export\n * @interface OrderConfirmation\n */\nexport interface OrderConfirmation {\n    /**\n     * \n     * @type {string}\n     * @memberof OrderConfirmation\n     */\n    ticket_id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OrderConfirmation\n     */\n    nonce: string;\n}\n/**\n * \n * @export\n * @interface PostTicketBody\n */\nexport interface PostTicketBody {\n    /**\n     * \n     * @type {MichiganFootballGame}\n     * @memberof PostTicketBody\n     */\n    game: MichiganFootballGame;\n    /**\n     * \n     * @type {number}\n     * @memberof PostTicketBody\n     */\n    price: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PostTicketBody\n     */\n    section: number;\n}\n/**\n * \n * @export\n * @interface RemoveTicketBody\n */\nexport interface RemoveTicketBody {\n    /**\n     * \n     * @type {string}\n     * @memberof RemoveTicketBody\n     */\n    id: string;\n}\n/**\n * \n * @export\n * @interface SignUpBody\n */\nexport interface SignUpBody {\n    /**\n     * \n     * @type {string}\n     * @memberof SignUpBody\n     */\n    email: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SignUpBody\n     */\n    password: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SignUpBody\n     */\n    first_name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SignUpBody\n     */\n    last_name: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SignUpBody\n     */\n    venmo_phone: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SignUpBody\n     */\n    dob: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SignUpBody\n     */\n    address: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SignUpBody\n     */\n    city: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SignUpBody\n     */\n    state: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SignUpBody\n     */\n    country: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SignUpBody\n     */\n    zipcode: string;\n}\n/**\n * \n * @export\n * @interface SortTicketsBody\n */\nexport interface SortTicketsBody {\n    /**\n     * \n     * @type {MichiganFootballGame}\n     * @memberof SortTicketsBody\n     */\n    game?: MichiganFootballGame;\n    /**\n     * \n     * @type {FilterOptions}\n     * @memberof SortTicketsBody\n     */\n    filter?: FilterOptions;\n}\n/**\n * \n * @export\n * @interface Ticket\n */\nexport interface Ticket {\n    /**\n     * \n     * @type {string}\n     * @memberof Ticket\n     */\n    id: string;\n    /**\n     * \n     * @type {MichiganFootballGame}\n     * @memberof Ticket\n     */\n    game: MichiganFootballGame;\n    /**\n     * \n     * @type {number}\n     * @memberof Ticket\n     */\n    section: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Ticket\n     */\n    price: number;\n    /**\n     * \n     * @type {TicketStatus}\n     * @memberof Ticket\n     */\n    status: TicketStatus;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Ticket\n     */\n    confirmed_seller_transfer: boolean;\n    /**\n     * \n     * @type {User}\n     * @memberof Ticket\n     */\n    seller: User;\n    /**\n     * \n     * @type {User}\n     * @memberof Ticket\n     */\n    buyer?: User;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Ticket\n     */\n    confirmed_buyer_transfer: boolean;\n}\n/**\n * \n * @export\n * @enum {string}\n */\nexport enum TicketStatus {\n    Open = 'Open',\n    Removed = 'Removed',\n    PendingTransfer = 'Pending Transfer',\n    CompletedTransfer = 'Completed Transfer'\n}\n\n/**\n * \n * @export\n * @interface User\n */\nexport interface User {\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    email: string;\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    password: string;\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    first_name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    last_name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    payment_id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    seller_payment_id: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof User\n     */\n    is_email_verified: boolean;\n    /**\n     * \n     * @type {Array<Ticket>}\n     * @memberof User\n     */\n    ticket_wallet: Array<Ticket>;\n    /**\n     * \n     * @type {Array<Ticket>}\n     * @memberof User\n     */\n    ticket_purchases: Array<Ticket>;\n}\n/**\n * \n * @export\n * @interface VerifyEmailBody\n */\nexport interface VerifyEmailBody {\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyEmailBody\n     */\n    id: string;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {ChangePassword} [changePassword] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        changePassword: async (changePassword?: ChangePassword, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/user/change-password`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof changePassword !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(changePassword !== undefined ? changePassword : {}) : (changePassword || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        changePasswordFromProfile: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/user/change-password-profile`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {ForgotPasswordBody} [forgotPasswordBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        forgotPasswordEmail: async (forgotPasswordBody?: ForgotPasswordBody, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/user/forgot-password-email`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof forgotPasswordBody !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(forgotPasswordBody !== undefined ? forgotPasswordBody : {}) : (forgotPasswordBody || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getClientToken: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/user/client-token`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTicketWallet: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/user/get-ticket-wallet`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUser: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/user/get-user`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isEmailVerified: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/user/is-email-verified`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {LoginBody} [loginBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login: async (loginBody?: LoginBody, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/user/login`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof loginBody !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(loginBody !== undefined ? loginBody : {}) : (loginBody || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {OrderConfirmation} [orderConfirmation] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        orderConfirmation: async (orderConfirmation?: OrderConfirmation, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/ticket/order-confirmation`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof orderConfirmation !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(orderConfirmation !== undefined ? orderConfirmation : {}) : (orderConfirmation || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {PostTicketBody} [postTicketBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postTicket: async (postTicketBody?: PostTicketBody, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/ticket/post-ticket`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof postTicketBody !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(postTicketBody !== undefined ? postTicketBody : {}) : (postTicketBody || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {SignUpBody} [signUpBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        register: async (signUpBody?: SignUpBody, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/user/register`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof signUpBody !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(signUpBody !== undefined ? signUpBody : {}) : (signUpBody || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {RemoveTicketBody} [removeTicketBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removeTicket: async (removeTicketBody?: RemoveTicketBody, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/ticket/remove-ticket`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof removeTicketBody !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(removeTicketBody !== undefined ? removeTicketBody : {}) : (removeTicketBody || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {SortTicketsBody} [sortTicketsBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sortTickets: async (sortTicketsBody?: SortTicketsBody, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/ticket/sort-tickets`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof sortTicketsBody !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(sortTicketsBody !== undefined ? sortTicketsBody : {}) : (sortTicketsBody || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {SortTicketsBody} [sortTicketsBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sortTicketsSecure: async (sortTicketsBody?: SortTicketsBody, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/ticket/sort-tickets-secure`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof sortTicketsBody !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(sortTicketsBody !== undefined ? sortTicketsBody : {}) : (sortTicketsBody || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {CheckoutTicket} [checkoutTicket] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferredTicketBuyerConfirmation: async (checkoutTicket?: CheckoutTicket, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/ticket/transferred-ticket-buyer-confirmation`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof checkoutTicket !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(checkoutTicket !== undefined ? checkoutTicket : {}) : (checkoutTicket || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {CheckoutTicket} [checkoutTicket] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferredTicketSellerConfirmation: async (checkoutTicket?: CheckoutTicket, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/ticket/transferred-ticket-seller-confirmation`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof checkoutTicket !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(checkoutTicket !== undefined ? checkoutTicket : {}) : (checkoutTicket || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {VerifyEmailBody} [verifyEmailBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verifyEmail: async (verifyEmailBody?: VerifyEmailBody, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/user/verify-email`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof verifyEmailBody !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(verifyEmailBody !== undefined ? verifyEmailBody : {}) : (verifyEmailBody || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {ChangePassword} [changePassword] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async changePassword(changePassword?: ChangePassword, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).changePassword(changePassword, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async changePasswordFromProfile(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).changePasswordFromProfile(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {ForgotPasswordBody} [forgotPasswordBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async forgotPasswordEmail(forgotPasswordBody?: ForgotPasswordBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).forgotPasswordEmail(forgotPasswordBody, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getClientToken(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getClientToken(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getTicketWallet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Ticket>>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getTicketWallet(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getUser(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getUser(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async isEmailVerified(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).isEmailVerified(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {LoginBody} [loginBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async login(loginBody?: LoginBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).login(loginBody, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {OrderConfirmation} [orderConfirmation] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async orderConfirmation(orderConfirmation?: OrderConfirmation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).orderConfirmation(orderConfirmation, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {PostTicketBody} [postTicketBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async postTicket(postTicketBody?: PostTicketBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postTicket(postTicketBody, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {SignUpBody} [signUpBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async register(signUpBody?: SignUpBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).register(signUpBody, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {RemoveTicketBody} [removeTicketBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async removeTicket(removeTicketBody?: RemoveTicketBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).removeTicket(removeTicketBody, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {SortTicketsBody} [sortTicketsBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async sortTickets(sortTicketsBody?: SortTicketsBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Ticket>>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).sortTickets(sortTicketsBody, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {SortTicketsBody} [sortTicketsBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async sortTicketsSecure(sortTicketsBody?: SortTicketsBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Ticket>>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).sortTicketsSecure(sortTicketsBody, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {CheckoutTicket} [checkoutTicket] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async transferredTicketBuyerConfirmation(checkoutTicket?: CheckoutTicket, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).transferredTicketBuyerConfirmation(checkoutTicket, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {CheckoutTicket} [checkoutTicket] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async transferredTicketSellerConfirmation(checkoutTicket?: CheckoutTicket, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).transferredTicketSellerConfirmation(checkoutTicket, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {VerifyEmailBody} [verifyEmailBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async verifyEmail(verifyEmailBody?: VerifyEmailBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).verifyEmail(verifyEmailBody, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @param {ChangePassword} [changePassword] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        changePassword(changePassword?: ChangePassword, options?: any): AxiosPromise<string> {\n            return DefaultApiFp(configuration).changePassword(changePassword, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        changePasswordFromProfile(options?: any): AxiosPromise<void> {\n            return DefaultApiFp(configuration).changePasswordFromProfile(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {ForgotPasswordBody} [forgotPasswordBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        forgotPasswordEmail(forgotPasswordBody?: ForgotPasswordBody, options?: any): AxiosPromise<void> {\n            return DefaultApiFp(configuration).forgotPasswordEmail(forgotPasswordBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getClientToken(options?: any): AxiosPromise<string> {\n            return DefaultApiFp(configuration).getClientToken(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTicketWallet(options?: any): AxiosPromise<Array<Ticket>> {\n            return DefaultApiFp(configuration).getTicketWallet(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUser(options?: any): AxiosPromise<User> {\n            return DefaultApiFp(configuration).getUser(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isEmailVerified(options?: any): AxiosPromise<boolean> {\n            return DefaultApiFp(configuration).isEmailVerified(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {LoginBody} [loginBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login(loginBody?: LoginBody, options?: any): AxiosPromise<string> {\n            return DefaultApiFp(configuration).login(loginBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {OrderConfirmation} [orderConfirmation] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        orderConfirmation(orderConfirmation?: OrderConfirmation, options?: any): AxiosPromise<void> {\n            return DefaultApiFp(configuration).orderConfirmation(orderConfirmation, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {PostTicketBody} [postTicketBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postTicket(postTicketBody?: PostTicketBody, options?: any): AxiosPromise<void> {\n            return DefaultApiFp(configuration).postTicket(postTicketBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {SignUpBody} [signUpBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        register(signUpBody?: SignUpBody, options?: any): AxiosPromise<void> {\n            return DefaultApiFp(configuration).register(signUpBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {RemoveTicketBody} [removeTicketBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removeTicket(removeTicketBody?: RemoveTicketBody, options?: any): AxiosPromise<void> {\n            return DefaultApiFp(configuration).removeTicket(removeTicketBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {SortTicketsBody} [sortTicketsBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sortTickets(sortTicketsBody?: SortTicketsBody, options?: any): AxiosPromise<Array<Ticket>> {\n            return DefaultApiFp(configuration).sortTickets(sortTicketsBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {SortTicketsBody} [sortTicketsBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sortTicketsSecure(sortTicketsBody?: SortTicketsBody, options?: any): AxiosPromise<Array<Ticket>> {\n            return DefaultApiFp(configuration).sortTicketsSecure(sortTicketsBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {CheckoutTicket} [checkoutTicket] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferredTicketBuyerConfirmation(checkoutTicket?: CheckoutTicket, options?: any): AxiosPromise<void> {\n            return DefaultApiFp(configuration).transferredTicketBuyerConfirmation(checkoutTicket, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {CheckoutTicket} [checkoutTicket] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferredTicketSellerConfirmation(checkoutTicket?: CheckoutTicket, options?: any): AxiosPromise<void> {\n            return DefaultApiFp(configuration).transferredTicketSellerConfirmation(checkoutTicket, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {VerifyEmailBody} [verifyEmailBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verifyEmail(verifyEmailBody?: VerifyEmailBody, options?: any): AxiosPromise<string> {\n            return DefaultApiFp(configuration).verifyEmail(verifyEmailBody, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI {\n    /**\n     * \n     * @param {ChangePassword} [changePassword] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public changePassword(changePassword?: ChangePassword, options?: any) {\n        return DefaultApiFp(this.configuration).changePassword(changePassword, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public changePasswordFromProfile(options?: any) {\n        return DefaultApiFp(this.configuration).changePasswordFromProfile(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {ForgotPasswordBody} [forgotPasswordBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public forgotPasswordEmail(forgotPasswordBody?: ForgotPasswordBody, options?: any) {\n        return DefaultApiFp(this.configuration).forgotPasswordEmail(forgotPasswordBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getClientToken(options?: any) {\n        return DefaultApiFp(this.configuration).getClientToken(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getTicketWallet(options?: any) {\n        return DefaultApiFp(this.configuration).getTicketWallet(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getUser(options?: any) {\n        return DefaultApiFp(this.configuration).getUser(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public isEmailVerified(options?: any) {\n        return DefaultApiFp(this.configuration).isEmailVerified(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {LoginBody} [loginBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public login(loginBody?: LoginBody, options?: any) {\n        return DefaultApiFp(this.configuration).login(loginBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {OrderConfirmation} [orderConfirmation] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public orderConfirmation(orderConfirmation?: OrderConfirmation, options?: any) {\n        return DefaultApiFp(this.configuration).orderConfirmation(orderConfirmation, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {PostTicketBody} [postTicketBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public postTicket(postTicketBody?: PostTicketBody, options?: any) {\n        return DefaultApiFp(this.configuration).postTicket(postTicketBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {SignUpBody} [signUpBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public register(signUpBody?: SignUpBody, options?: any) {\n        return DefaultApiFp(this.configuration).register(signUpBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {RemoveTicketBody} [removeTicketBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public removeTicket(removeTicketBody?: RemoveTicketBody, options?: any) {\n        return DefaultApiFp(this.configuration).removeTicket(removeTicketBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {SortTicketsBody} [sortTicketsBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public sortTickets(sortTicketsBody?: SortTicketsBody, options?: any) {\n        return DefaultApiFp(this.configuration).sortTickets(sortTicketsBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {SortTicketsBody} [sortTicketsBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public sortTicketsSecure(sortTicketsBody?: SortTicketsBody, options?: any) {\n        return DefaultApiFp(this.configuration).sortTicketsSecure(sortTicketsBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {CheckoutTicket} [checkoutTicket] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public transferredTicketBuyerConfirmation(checkoutTicket?: CheckoutTicket, options?: any) {\n        return DefaultApiFp(this.configuration).transferredTicketBuyerConfirmation(checkoutTicket, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {CheckoutTicket} [checkoutTicket] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public transferredTicketSellerConfirmation(checkoutTicket?: CheckoutTicket, options?: any) {\n        return DefaultApiFp(this.configuration).transferredTicketSellerConfirmation(checkoutTicket, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {VerifyEmailBody} [verifyEmailBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public verifyEmail(verifyEmailBody?: VerifyEmailBody, options?: any) {\n        return DefaultApiFp(this.configuration).verifyEmail(verifyEmailBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n}\n\n\n"]},"metadata":{},"sourceType":"module"}