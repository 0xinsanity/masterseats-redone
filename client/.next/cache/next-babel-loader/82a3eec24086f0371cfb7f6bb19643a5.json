{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport { Table, Grid, Typography } from 'antd';\nimport { CloseAdjustedOutline, returnEmojiString, GenIconButton, GenButton, AddTicketContainer, PlusCircleAdjustedOutline, ExclamationCircleAdjustedOutlined } from '../DashboardPage/DashboardPage.styled';\nimport { TicketStatus } from '../../../api';\nimport { ScreenSize } from '../../lib';\nimport AddTicketModal from './AddTicketModal';\nimport styled from 'styled-components';\nimport AreYouSureModal from '../Universal/AreYouSureModal';\nimport media from 'styled-media-query';\nimport ReactHover, { Hover, Trigger } from 'react-hover';\nconst optionsCursorTrueWithMargin = {\n  followCursor: true,\n  shiftX: -470,\n  shiftY: -300\n};\nconst Container = styled.div.withConfig({\n  displayName: \"ConglomerateTable__Container\",\n  componentId: \"sc-1l2yr6c-0\"\n})([\"padding-left:5%;padding-right:5%;padding-top:15px;padding-bottom:30px;\", \"\"], media.lessThan(\"small\")`\n        padding-left: 0px;\n        padding-right: 0px;\n    `);\nconst HoverContainer = styled.div.withConfig({\n  displayName: \"ConglomerateTable__HoverContainer\",\n  componentId: \"sc-1l2yr6c-1\"\n})([\"background-color:papayawhip;padding:12px;padding-top:6px;padding-bottom:6px;border-radius:20px;opacity:0.8;width:500px;z-index:30;\"]);\nconst {\n  useBreakpoint\n} = Grid;\n\nconst ConglomerateTable = props => {\n  const {\n    tickets,\n    postTicket,\n    removeTicket,\n    visible,\n    setVisibility,\n    confirmTransferSeller,\n    confirmTransferBuyer,\n    refundTicket\n  } = props;\n  const screens = useBreakpoint();\n  const [screenSize, setScreenSize] = useState(undefined);\n  const [removeTicketVisible, setRemoveTicketVisible] = useState(false);\n  const [action, setAction] = useState(\"\");\n  const [id, setId] = useState(\"\");\n  useEffect(() => {\n    Object.entries(screens).filter(screen => !!screen[1]).map(screen => {\n      if (screen[0] !== ScreenSize[screenSize]) {\n        setScreenSize(ScreenSize[screen[0]]);\n      }\n    });\n  }, [screens]);\n\n  const clickAddTicket = () => {\n    setVisibility(true);\n  };\n\n  return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(AddTicketModal, {\n    postTicket: postTicket,\n    visible: visible,\n    onCancel: () => setVisibility(false)\n  }), /*#__PURE__*/React.createElement(AreYouSureModal, {\n    title: \"Are you sure you want to do that?\",\n    visible: removeTicketVisible,\n    onCancel: () => setRemoveTicketVisible(false),\n    onComplete: async () => {\n      setRemoveTicketVisible(false);\n\n      if (action === \"confirmTransferSeller\") {\n        await confirmTransferSeller(id);\n      } else if (action === \"removeTicket\") {\n        await removeTicket(id);\n      }\n    }\n  }), /*#__PURE__*/React.createElement(AddTicketContainer, null, /*#__PURE__*/React.createElement(GenButton, {\n    onClick: clickAddTicket,\n    icon: /*#__PURE__*/React.createElement(PlusCircleAdjustedOutline, null)\n  }, screenSize >= 1 ? \"Add Ticket\" : null)), /*#__PURE__*/React.createElement(Table, {\n    columns: [{\n      title: 'Game',\n      key: 'game',\n      dataIndex: 'game',\n      render: (text, data) => returnEmojiString(data.game)\n    }, {\n      title: 'Section',\n      key: 'section',\n      dataIndex: 'section'\n    }, {\n      title: 'Price ($)',\n      key: 'price',\n      dataIndex: 'price',\n      render: text => parseFloat(text).toFixed(2)\n    }, {\n      title: 'Status',\n      key: 'status',\n      dataIndex: 'status',\n      render: text => {\n        var hover_output = \"\";\n\n        switch (text) {\n          case TicketStatus.Available:\n            hover_output = 'Your ticket is listed on the platform and is waiting to be matched with the ideal buyer.';\n            break;\n\n          case TicketStatus.PendingTransfer:\n            hover_output = \"Your ticket has been purchased and needs to be transferred to the buyer.\";\n            break;\n\n          case TicketStatus.CompletedTransfer:\n            hover_output = \"Your ticket has been transferred and you have been paid. If you have not been paid, please email support@masterseats.com.\";\n            break;\n        }\n\n        return /*#__PURE__*/React.createElement(ReactHover, {\n          options: optionsCursorTrueWithMargin\n        }, /*#__PURE__*/React.createElement(Hover, {\n          type: \"hover\"\n        }, /*#__PURE__*/React.createElement(HoverContainer, null, /*#__PURE__*/React.createElement(Typography.Text, {\n          style: {\n            fontSize: 12\n          }\n        }, hover_output))), /*#__PURE__*/React.createElement(Trigger, {\n          type: \"trigger\"\n        }, /*#__PURE__*/React.createElement(Typography.Text, null, text)));\n      }\n    }, {\n      title: '',\n      key: 'options',\n      dataIndex: 'status',\n      render: (text, data) => {\n        if (data.status === TicketStatus.CompletedTransfer) {\n          return /*#__PURE__*/React.createElement(\"div\", null);\n        } else if (data.status === TicketStatus.PendingTransfer) {\n          if (!data.confirmed_buyer_transfer && data.confirmed_seller_transfer) {\n            return /*#__PURE__*/React.createElement(\"div\", {\n              style: {\n                display: 'flex',\n                justifyContent: 'flex-end'\n              }\n            }, /*#__PURE__*/React.createElement(Typography.Text, null, \"Buyer Must Confirm Transfer\"));\n          } else {\n            return /*#__PURE__*/React.createElement(\"div\", {\n              style: {\n                display: 'flex',\n                justifyContent: 'flex-end'\n              }\n            }, /*#__PURE__*/React.createElement(GenIconButton, {\n              disabled: data.confirmed_seller_transfer,\n              icon: /*#__PURE__*/React.createElement(ExclamationCircleAdjustedOutlined, null),\n              onClick: () => {\n                setRemoveTicketVisible(true);\n                setId(data.id);\n                setAction(\"confirmTransferSeller\");\n              }\n            }, screenSize > 0 ? \"Confirm Transfer\" : null));\n          }\n        } else if (data.status === TicketStatus.Available) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            style: {\n              display: 'flex',\n              justifyContent: 'flex-end'\n            }\n          }, /*#__PURE__*/React.createElement(GenIconButton, {\n            icon: /*#__PURE__*/React.createElement(CloseAdjustedOutline, null),\n            onClick: () => {\n              setRemoveTicketVisible(true);\n              setId(data.id);\n              setAction(\"removeTicket\");\n            }\n          }, screenSize > 0 ? \"Remove\" : null));\n        }\n      }\n    }],\n    dataSource: tickets,\n    pagination: {\n      position: ['bottomCenter']\n    }\n  }));\n};\n\nexport default ConglomerateTable;","map":{"version":3,"sources":["/Users/insanity/Documents/MasterSeats/new/client/src/areas/TicketWallet/ConglomerateTable.tsx"],"names":["React","useState","useEffect","Table","Grid","Typography","CloseAdjustedOutline","returnEmojiString","GenIconButton","GenButton","AddTicketContainer","PlusCircleAdjustedOutline","ExclamationCircleAdjustedOutlined","TicketStatus","ScreenSize","AddTicketModal","styled","AreYouSureModal","media","ReactHover","Hover","Trigger","optionsCursorTrueWithMargin","followCursor","shiftX","shiftY","Container","div","lessThan","HoverContainer","useBreakpoint","ConglomerateTable","props","tickets","postTicket","removeTicket","visible","setVisibility","confirmTransferSeller","confirmTransferBuyer","refundTicket","screens","screenSize","setScreenSize","undefined","removeTicketVisible","setRemoveTicketVisible","action","setAction","id","setId","Object","entries","filter","screen","map","clickAddTicket","title","key","dataIndex","render","text","data","game","parseFloat","toFixed","hover_output","Available","PendingTransfer","CompletedTransfer","fontSize","status","confirmed_buyer_transfer","confirmed_seller_transfer","display","justifyContent","position"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useContext} from 'react'\nimport {Table, Modal, Grid, message, Typography} from 'antd'\nimport {CloseAdjustedOutline, returnEmojiString, GenIconButton, GenButton, AddTicketContainer, PlusCircleAdjustedOutline, ExclamationCircleAdjustedOutlined} from '../DashboardPage/DashboardPage.styled'\nimport {MichiganFootballGame, Ticket, TicketStatus, PostTicketBody} from '../../../api'\nimport {ScreenSize} from '../../lib'\nimport AddTicketModal from './AddTicketModal'\nimport styled from 'styled-components'\nimport AreYouSureModal from '../Universal/AreYouSureModal'\nimport media from 'styled-media-query'\nimport ReactHover, {Hover, Trigger} from 'react-hover'\n\nconst optionsCursorTrueWithMargin = {\n    followCursor: true,\n    shiftX: -470,\n    shiftY: -300,\n  }\n\nconst Container = styled.div`\n    padding-left: 5%;\n    padding-right: 5%;\n    padding-top: 15px;\n    padding-bottom: 30px;\n\n    ${media.lessThan(\"small\")`\n        padding-left: 0px;\n        padding-right: 0px;\n    `}\n`\n\nconst HoverContainer = styled.div`\n    background-color: papayawhip;\n    padding: 12px;\n    padding-top: 6px;\n    padding-bottom: 6px;\n    border-radius: 20px;\n    opacity: 0.8;\n    width: 500px;\n    z-index: 30;\n`\n\nconst {useBreakpoint} = Grid\n\ninterface SellProps {\n    tickets: Ticket[]\n    postTicket: (ticketBody: PostTicketBody) => void\n    removeTicket: (ticketId: string) => void\n    visible: boolean\n    setVisibility: (visible: boolean) => void\n    confirmTransferSeller: (ticket_id: string) => void,\n    confirmTransferBuyer: (ticket_id: string) => void\n    refundTicket: (ticket_id: string) => void\n}\n\nconst ConglomerateTable: React.FC<SellProps> = props => {\n    const {tickets, postTicket, removeTicket, visible, setVisibility, confirmTransferSeller, confirmTransferBuyer, refundTicket} = props\n\n    const screens = useBreakpoint()\n    const [screenSize, setScreenSize] = useState<ScreenSize>(undefined)\n    const [removeTicketVisible, setRemoveTicketVisible] = useState(false)\n    const [action, setAction] = useState(\"\")\n    const [id, setId] = useState(\"\")\n    \n    useEffect(() => {\n        Object.entries(screens)\n        .filter(screen => !!screen[1])\n        .map(screen => {\n            if (screen[0] !== ScreenSize[screenSize]) {\n                setScreenSize(ScreenSize[screen[0]])\n            }\n        })\n    }, [screens])\n\n\n    const clickAddTicket = () => {\n        setVisibility(true)\n    }\n\n    return (\n        <Container>\n            <AddTicketModal postTicket={postTicket}\n                            visible={visible} \n                            onCancel={() => setVisibility(false)}/>\n            <AreYouSureModal title={\"Are you sure you want to do that?\"}\n                            visible={removeTicketVisible}\n                            onCancel={() => setRemoveTicketVisible(false)}\n                            onComplete={async () => {\n                                setRemoveTicketVisible(false)\n                                if (action === \"confirmTransferSeller\") {\n                                    await confirmTransferSeller(id)\n                                } else if (action === \"removeTicket\") {\n                                    await removeTicket(id)\n                                }\n                            }}\n                />\n            <AddTicketContainer>\n                <GenButton onClick={clickAddTicket} icon={<PlusCircleAdjustedOutline />}>\n                    {screenSize >= 1 ? \"Add Ticket\" : null}\n                </GenButton>\n            </AddTicketContainer>\n            <Table columns={[\n                {\n                    title: 'Game',\n                    key: 'game',\n                    dataIndex: 'game',\n                    render: (text, data) => returnEmojiString(data.game)\n                },\n                {\n                    title: 'Section',\n                    key: 'section',\n                    dataIndex: 'section'\n                },\n                {\n                    title: 'Price ($)',\n                    key: 'price',\n                    dataIndex: 'price',\n                    render: (text) => parseFloat(text).toFixed(2)\n                },\n                {\n                    title: 'Status',\n                    key: 'status',\n                    dataIndex: 'status',\n                    render: (text: TicketStatus) => {\n                        var hover_output: string = \"\"\n                        switch (text) {\n                            case TicketStatus.Available:\n                                hover_output = 'Your ticket is listed on the platform and is waiting to be matched with the ideal buyer.'\n                                break \n                            case TicketStatus.PendingTransfer:\n                                hover_output = \"Your ticket has been purchased and needs to be transferred to the buyer.\"\n                                break\n                            case TicketStatus.CompletedTransfer:\n                                hover_output = \"Your ticket has been transferred and you have been paid. If you have not been paid, please email support@masterseats.com.\"\n                                break\n                        }\n\n                        return (\n                            <ReactHover options={optionsCursorTrueWithMargin}>\n                                <Hover type={\"hover\"}>\n                                    <HoverContainer>\n                                        <Typography.Text style={{fontSize: 12}}>{hover_output}</Typography.Text>\n                                    </HoverContainer>\n                                </Hover>\n                                <Trigger type={\"trigger\"}>\n                                    <Typography.Text>\n                                        {text}\n                                    </Typography.Text>\n                                </Trigger>\n                            </ReactHover>\n                        )\n                    }\n                },\n                {\n                    title: '',\n                    key: 'options',\n                    dataIndex: 'status',\n                    render: (text, data) => {\n                        if (data.status === TicketStatus.CompletedTransfer) {\n                            return (<div/>)\n                        } else if (data.status === TicketStatus.PendingTransfer) {\n                            if (!data.confirmed_buyer_transfer && data.confirmed_seller_transfer) {\n                                return (\n                                    <div style={{display: 'flex', justifyContent: 'flex-end'}}>\n                                        <Typography.Text>Buyer Must Confirm Transfer</Typography.Text>\n                                    </div>\n                                )\n                            } else {\n                                return (\n                                    <div style={{display: 'flex', justifyContent: 'flex-end'}}>\n                                        <GenIconButton disabled={data.confirmed_seller_transfer} icon={<ExclamationCircleAdjustedOutlined />} onClick={() => {\n                                            setRemoveTicketVisible(true)\n                                            setId(data.id)\n                                            setAction(\"confirmTransferSeller\")\n                                        }}>\n                                            {screenSize > 0 ? \"Confirm Transfer\" : null}\n                                        </GenIconButton>\n                                    </div>\n                                )\n                            }\n                        } else if (data.status === TicketStatus.Available) {\n                            return (\n                                <div style={{display: 'flex', justifyContent: 'flex-end'}}>\n                                    <GenIconButton icon={<CloseAdjustedOutline />} onClick={() => {\n                                        setRemoveTicketVisible(true)\n                                        setId(data.id)\n                                        setAction(\"removeTicket\")\n                                    }}>\n                                        {screenSize > 0 ? \"Remove\" : null}\n                                    </GenIconButton>\n                            </div>)\n                        }\n                    }\n                }\n            ]} dataSource={tickets} pagination={{ position: ['bottomCenter'] }} />\n        </Container>\n    )\n}\n\nexport default ConglomerateTable"]},"metadata":{},"sourceType":"module"}