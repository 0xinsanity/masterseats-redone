{"ast":null,"code":"import React, { useEffect, useContext, useState } from 'react';\nimport { PageDashboard } from '../Universal/PageUniversal';\nimport SellSection from './Sections/Sell';\nimport { UserContext } from '../../lib/UserContext';\nimport { Tabs } from 'antd';\nimport OpenPage from '../Universal/OpenPage';\nimport { serialize, resetSellingForm } from '../../lib';\nconst {\n  TabPane\n} = Tabs;\n\nconst TicketWallet = props => {\n  const {\n    defaultValue,\n    setOpenModal,\n    openModal\n  } = props;\n  const {\n    api,\n    currentUser\n  } = useContext(UserContext);\n  const [wallet, setWallet] = useState([]);\n  useEffect(() => {\n    if (currentUser !== null) {\n      getTicketWallet();\n    }\n  }, []);\n\n  const getTicketWallet = async () => {\n    const body = await api.getTicketWallet();\n    setWallet(body.data);\n  };\n\n  const postTicket = async ticketBody => {\n    var ticket;\n\n    if (ticketBody.venmo_phone === undefined) {\n      ticket = {\n        game: ticketBody.game,\n        section: ticketBody.section,\n        price: ticketBody.price\n      };\n    } else {\n      const phone = ticketBody.venmo_phone;\n      const phone_replaced = phone.replace(/-/g, \"\");\n      ticket = {\n        game: ticketBody.game,\n        section: ticketBody.section,\n        price: ticketBody.price,\n        venmo_phone: phone_replaced\n      };\n    }\n\n    await api.postTicket(ticket);\n    resetSellingForm();\n    await getTicketWallet();\n    console.log(serialize({\n      'post': ticketBody.game\n    }));\n    OpenPage('/thankyou?' + serialize({\n      'post': ticketBody.game\n    }));\n  };\n\n  const removeTicket = async ticketId => {\n    await api.removeTicket({\n      id: ticketId\n    });\n    await getTicketWallet();\n  };\n\n  const confirmTransferSeller = async ticket_id => {\n    await api.transferredTicketSellerConfirmation({\n      ticket_id\n    });\n    await getTicketWallet();\n  };\n\n  const confirmTransferBuyer = async ticket_id => {\n    await api.transferredTicketBuyerConfirmation({\n      ticket_id\n    });\n    await getTicketWallet();\n  };\n\n  const refundTicket = async ticket_id => {\n    await api.refundTicket({\n      id: ticket_id\n    });\n    await getTicketWallet();\n  };\n\n  return /*#__PURE__*/React.createElement(PageDashboard, {\n    isLoggedIn: currentUser === null ? false : true,\n    selected: -1\n  }, /*#__PURE__*/React.createElement(SellSection, {\n    visible: openModal,\n    setVisibility: setOpenModal,\n    tickets: wallet,\n    postTicket: postTicket,\n    removeTicket: removeTicket,\n    confirmTransferSeller: confirmTransferSeller,\n    confirmTransferBuyer: confirmTransferBuyer,\n    refundTicket: refundTicket\n  }));\n};\n\nexport default TicketWallet;","map":{"version":3,"sources":["/Users/insanity/Documents/MasterSeats/new/client/src/areas/TicketWallet/index.tsx"],"names":["React","useEffect","useContext","useState","PageDashboard","SellSection","UserContext","Tabs","OpenPage","serialize","resetSellingForm","TabPane","TicketWallet","props","defaultValue","setOpenModal","openModal","api","currentUser","wallet","setWallet","getTicketWallet","body","data","postTicket","ticketBody","ticket","venmo_phone","undefined","game","section","price","phone","phone_replaced","replace","console","log","removeTicket","ticketId","id","confirmTransferSeller","ticket_id","transferredTicketSellerConfirmation","confirmTransferBuyer","transferredTicketBuyerConfirmation","refundTicket"],"mappings":"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","sourcesContent":["import React, {useEffect, useContext, useState} from 'react'\nimport styled from 'styled-components'\nimport {PageDashboard} from '../Universal/PageUniversal'\nimport SellSection from './Sections/Sell'\nimport PendingSection from './Sections/Pending'\nimport CompletedSection from './Sections/Completed'\nimport {UserContext} from '../../lib/UserContext'\nimport {Ticket, PostTicketBody} from '../../../api'\nimport { Tabs } from 'antd';\nimport OpenPage from '../Universal/OpenPage'\nimport { serialize, resetSellingForm } from '../../lib'\n\nconst { TabPane } = Tabs;\n\ninterface TicketWalletProps {\n    setOpenModal: (visible: boolean) => void,\n    openModal: boolean,\n    defaultValue: string\n}\n\nconst TicketWallet: React.FC<TicketWalletProps> = props => {\n    const {defaultValue, setOpenModal, openModal} = props\n    const {api, currentUser} = useContext(UserContext)\n    const [wallet, setWallet] = useState<Ticket[]>([])\n\n    useEffect(() => {\n        if (currentUser !== null) {\n            getTicketWallet()\n        }\n    }, [])\n\n    const getTicketWallet = async () => {\n        const body = await api.getTicketWallet()\n        setWallet(body.data)\n    }\n\n    const postTicket = async (ticketBody: PostTicketBody) => {\n        var ticket: PostTicketBody \n        if (ticketBody.venmo_phone === undefined) {\n            ticket = {\n                game: ticketBody.game,\n                section: ticketBody.section,\n                price: ticketBody.price,\n            }\n        } else {\n            const phone = ticketBody.venmo_phone\n            const phone_replaced = phone.replace(/-/g,\"\")\n            ticket = {\n                game: ticketBody.game,\n                section: ticketBody.section,\n                price: ticketBody.price,\n                venmo_phone: phone_replaced\n            }\n        }\n        \n        await api.postTicket(ticket)\n        resetSellingForm()\n        await getTicketWallet()\n        console.log(serialize({'post': ticketBody.game}))\n        OpenPage('/thankyou?' + serialize({'post': ticketBody.game}))\n    }\n\n    const removeTicket = async (ticketId: string) => {\n        await api.removeTicket({id: ticketId})\n        await getTicketWallet()\n    }\n\n    const confirmTransferSeller = async (ticket_id: string) => {\n        await api.transferredTicketSellerConfirmation({ticket_id})\n        await getTicketWallet()\n    }\n\n    const confirmTransferBuyer = async (ticket_id: string) => {\n        await api.transferredTicketBuyerConfirmation({ticket_id})\n        await getTicketWallet()\n    }\n\n    const refundTicket = async (ticket_id: string) => {\n        await api.refundTicket({id: ticket_id})\n        await getTicketWallet()\n    }\n\n    return (\n        <PageDashboard isLoggedIn={currentUser === null ? false : true} selected={-1}>\n            <SellSection \n                    visible={openModal}\n                    setVisibility={setOpenModal}\n                    tickets={wallet} \n                    postTicket={postTicket} \n                    removeTicket={removeTicket}\n                    confirmTransferSeller={confirmTransferSeller}\n                    confirmTransferBuyer={confirmTransferBuyer}\n                    refundTicket={refundTicket}/>\n        </PageDashboard>\n    )\n}\n\nexport default TicketWallet"]},"metadata":{},"sourceType":"module"}