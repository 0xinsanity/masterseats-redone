{"ast":null,"code":"import React, { useState, useEffect, useContext } from 'react';\nimport { Table, Grid, message } from 'antd';\nimport { Container, CloseAdjustedOutline, returnEmojiString, GenIconButton, GenButton, AddTicketContainer, PlusCircleAdjustedOutline } from '../DashboardPage/DashboardPage.styled';\nimport { ScreenSize } from '../../lib';\nimport AddTicketModal from '../DashboardPage/Deprecated.AddTicketModal';\nimport { UserContext } from '../../lib/UserContext';\nimport OpenPage from '../OpenPage';\nconst {\n  useBreakpoint\n} = Grid;\n\nconst Sell = props => {\n  const {\n    currentUser\n  } = useContext(UserContext);\n  const {\n    tickets,\n    postTicket,\n    removeTicket\n  } = props;\n  const [visible, setVisibility] = useState(false);\n  const screens = useBreakpoint();\n  const [screenSize, setScreenSize] = useState(undefined);\n  useEffect(() => {\n    Object.entries(screens).filter(screen => !!screen[1]).map(screen => {\n      if (screen[0] !== ScreenSize[screenSize]) {\n        setScreenSize(ScreenSize[screen[0]]);\n      }\n    });\n  }, [screens]);\n\n  const clickAddTicket = () => {\n    if (currentUser === null) {\n      message.info(\"Please create an account to start selling tickets.\");\n      OpenPage('/login');\n      return;\n    }\n\n    if (!currentUser.is_email_verified) {\n      message.error(\"Please verify your email before trying to sell a ticket.\");\n      return;\n    }\n\n    setVisibility(true);\n  };\n\n  return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(AddTicketModal, {\n    postTicket: postTicket,\n    visible: visible,\n    onCancel: () => setVisibility(false)\n  }), /*#__PURE__*/React.createElement(AddTicketContainer, null, /*#__PURE__*/React.createElement(GenButton, {\n    onClick: clickAddTicket,\n    icon: /*#__PURE__*/React.createElement(PlusCircleAdjustedOutline, null)\n  }, screenSize >= 1 ? \"Add Ticket\" : null)), /*#__PURE__*/React.createElement(Table, {\n    columns: [{\n      title: 'Game',\n      key: 'game',\n      dataIndex: 'game',\n      render: (text, data) => returnEmojiString(data.game)\n    }, {\n      title: 'Section',\n      key: 'section',\n      dataIndex: 'section'\n    }, {\n      title: 'Price ($)',\n      key: 'price',\n      dataIndex: 'price'\n    }, {\n      title: '',\n      key: 'remove',\n      dataIndex: 'id',\n      render: (text, data) => /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'flex-end'\n        }\n      }, /*#__PURE__*/React.createElement(GenIconButton, {\n        icon: /*#__PURE__*/React.createElement(CloseAdjustedOutline, null),\n        onClick: async () => {\n          await removeTicket(data.id);\n        }\n      }, screenSize > 0 ? \"Remove\" : null))\n    }],\n    dataSource: tickets,\n    pagination: {\n      position: ['bottomCenter']\n    }\n  }));\n};\n\nexport default Sell;","map":{"version":3,"sources":["/Users/insanity/Documents/MasterSeats/new/client/src/areas/Sections/Sell.tsx"],"names":["React","useState","useEffect","useContext","Table","Grid","message","Container","CloseAdjustedOutline","returnEmojiString","GenIconButton","GenButton","AddTicketContainer","PlusCircleAdjustedOutline","ScreenSize","AddTicketModal","UserContext","OpenPage","useBreakpoint","Sell","props","currentUser","tickets","postTicket","removeTicket","visible","setVisibility","screens","screenSize","setScreenSize","undefined","Object","entries","filter","screen","map","clickAddTicket","info","is_email_verified","error","title","key","dataIndex","render","text","data","game","display","justifyContent","id","position"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useContext} from 'react'\nimport {Table, Modal, Grid, message} from 'antd'\nimport {Container, CloseAdjustedOutline, returnEmojiString, GenIconButton, GenButton, AddTicketContainer, PlusCircleAdjustedOutline} from '../DashboardPage/DashboardPage.styled'\nimport {MichiganFootballGame, Ticket, TicketStatus, PostTicketBody} from '../../../api'\nimport {ScreenSize} from '../../lib'\nimport AddTicketModal from '../DashboardPage/Deprecated.AddTicketModal'\nimport {UserContext} from '../../lib/UserContext'\nimport OpenPage from '../OpenPage'\n\nconst {useBreakpoint} = Grid\n\ninterface SellProps {\n    tickets: Ticket[]\n    postTicket: (ticketBody: PostTicketBody) => void\n    removeTicket: (ticketId: string) => void\n}\n\nconst Sell: React.FC<SellProps> = props => {\n    const {currentUser} = useContext(UserContext)\n    const {tickets, postTicket, removeTicket} = props\n    const [visible, setVisibility] = useState(false)\n\n    const screens = useBreakpoint()\n    const [screenSize, setScreenSize] = useState<ScreenSize>(undefined)\n    \n    useEffect(() => {\n        Object.entries(screens)\n        .filter(screen => !!screen[1])\n        .map(screen => {\n            if (screen[0] !== ScreenSize[screenSize]) {\n                setScreenSize(ScreenSize[screen[0]])\n            }\n        })\n    }, [screens])\n\n\n    const clickAddTicket = () => {\n        if (currentUser === null) {\n            message.info(\"Please create an account to start selling tickets.\")\n            OpenPage('/login')\n            return\n        }\n        if (!currentUser.is_email_verified) {\n            message.error(\"Please verify your email before trying to sell a ticket.\")\n            return\n        }\n        setVisibility(true)\n    }\n\n    return (\n        <Container>\n            <AddTicketModal postTicket={postTicket}\n                            visible={visible} \n                            onCancel={() => setVisibility(false)}/>\n            <AddTicketContainer>\n                <GenButton onClick={clickAddTicket} icon={<PlusCircleAdjustedOutline />}>\n                    {screenSize >= 1 ? \"Add Ticket\" : null}\n                </GenButton>\n            </AddTicketContainer>\n            <Table columns={[\n                {\n                    title: 'Game',\n                    key: 'game',\n                    dataIndex: 'game',\n                    render: (text, data) => returnEmojiString(data.game)\n                },\n                {\n                    title: 'Section',\n                    key: 'section',\n                    dataIndex: 'section'\n                },\n                {\n                    title: 'Price ($)',\n                    key: 'price',\n                    dataIndex: 'price'\n                },\n                {\n                    title: '',\n                    key: 'remove',\n                    dataIndex: 'id',\n                    render: (text, data) => (\n                        <div style={{display: 'flex', justifyContent: 'flex-end'}}>\n                            <GenIconButton icon={<CloseAdjustedOutline />} onClick={async () => {\n                                await removeTicket(data.id)\n                            }}>\n                                {screenSize > 0 ? \"Remove\" : null}\n                            </GenIconButton>\n                        </div>\n                    )\n                }\n            ]} dataSource={tickets} pagination={{ position: ['bottomCenter'] }} />\n        </Container>\n    )\n}\n\nexport default Sell"]},"metadata":{},"sourceType":"module"}