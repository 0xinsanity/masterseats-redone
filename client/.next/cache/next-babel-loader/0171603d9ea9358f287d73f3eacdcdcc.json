{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport { UserContext } from '../src/lib/UserContext';\nimport { seeIfLogin } from '../src/lib';\nimport Loading from '../src/components/Loading';\nimport { useRouter } from 'next/router';\nimport OrdersPage from '../src/areas/OrdersPage';\n\nconst Orders = () => {\n  _s();\n\n  const {\n    api,\n    setToken\n  } = useContext(UserContext);\n  const [isLoading, setIsLoading] = useState(true);\n  const [orders, setOrders] = useState(null);\n  const router = useRouter();\n  useEffect(() => {\n    seeIfLogin(api, setToken).then(() => {\n      setIsLoading(false);\n    });\n  }, []);\n\n  const getOrders = async () => {\n    const orders = await api.getOrders();\n    setOrders(orders.data);\n  };\n\n  const confirmTransferBuyer = async ticket_id => {\n    await api.transferredTicketBuyerConfirmation({\n      ticket_id\n    });\n    await getOrders();\n  };\n\n  const refundTicket = async ticket_id => {\n    await api.refundTicket({\n      id: ticket_id\n    });\n    await getOrders();\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Head, null, /*#__PURE__*/React.createElement(\"title\", null, \"MasterSeats \\u2022 Orders\")), isLoading ? /*#__PURE__*/React.createElement(Loading, null) : /*#__PURE__*/React.createElement(OrdersPage, {\n    orders: orders,\n    getOrders: getOrders,\n    confirmTransferBuyer: confirmTransferBuyer,\n    refundTicket: refundTicket\n  }));\n};\n\n_s(Orders, \"bXRiR95wtm1zpV8fHAaVg6CH4Vs=\", false, function () {\n  return [useRouter];\n});\n\n_c = Orders;\nexport default Orders;\n\nvar _c;\n\n$RefreshReg$(_c, \"Orders\");","map":{"version":3,"sources":["/Users/insanity/Documents/MasterSeats/new/client/pages/orders.tsx"],"names":["React","useContext","useState","useEffect","Head","UserContext","seeIfLogin","Loading","useRouter","OrdersPage","Orders","api","setToken","isLoading","setIsLoading","orders","setOrders","router","then","getOrders","data","confirmTransferBuyer","ticket_id","transferredTicketBuyerConfirmation","refundTicket","id"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,QAA3B,EAAqCC,SAArC,QAAqD,OAArD;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAAQC,UAAR,QAAyB,YAAzB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,SAAQC,SAAR,QAAwB,aAAxB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;AAEA,MAAMC,MAAgB,GAAG,MAAM;AAAA;;AAC3B,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAoBX,UAAU,CAACI,WAAD,CAApC;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACa,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAAC,IAAD,CAApC;AACA,QAAMe,MAAM,GAAGT,SAAS,EAAxB;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACZG,IAAAA,UAAU,CAACK,GAAD,EAAMC,QAAN,CAAV,CAA0BM,IAA1B,CAA+B,MAAM;AACjCJ,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAFD;AAGH,GAJQ,EAIN,EAJM,CAAT;;AAMA,QAAMK,SAAS,GAAG,YAAY;AAC1B,UAAMJ,MAAM,GAAG,MAAMJ,GAAG,CAACQ,SAAJ,EAArB;AACAH,IAAAA,SAAS,CAACD,MAAM,CAACK,IAAR,CAAT;AACH,GAHD;;AAKA,QAAMC,oBAAoB,GAAG,MAAOC,SAAP,IAA6B;AACtD,UAAMX,GAAG,CAACY,kCAAJ,CAAuC;AAACD,MAAAA;AAAD,KAAvC,CAAN;AACA,UAAMH,SAAS,EAAf;AACH,GAHD;;AAKA,QAAMK,YAAY,GAAG,MAAOF,SAAP,IAA6B;AAC9C,UAAMX,GAAG,CAACa,YAAJ,CAAiB;AAACC,MAAAA,EAAE,EAAEH;AAAL,KAAjB,CAAN;AACA,UAAMH,SAAS,EAAf;AACH,GAHD;;AAKA,sBACI,uDACI,oBAAC,IAAD,qBACI,+DADJ,CADJ,EAIKN,SAAS,gBAAG,oBAAC,OAAD,OAAH,gBACN,oBAAC,UAAD;AACI,IAAA,MAAM,EAAEE,MADZ;AAEI,IAAA,SAAS,EAAEI,SAFf;AAGI,IAAA,oBAAoB,EAAEE,oBAH1B;AAII,IAAA,YAAY,EAAEG;AAJlB,IALR,CADJ;AAeH,CA1CD;;GAAMd,M;UAIaF,S;;;KAJbE,M;AA4CN,eAAeA,MAAf","sourcesContent":["import React, {useContext, useState, useEffect} from 'react'\nimport Head from 'next/head'\nimport { UserContext } from '../src/lib/UserContext';\nimport {seeIfLogin} from '../src/lib'\nimport Loading from '../src/components/Loading';\nimport {useRouter} from 'next/router'\nimport OrdersPage from '../src/areas/OrdersPage'\n\nconst Orders: React.FC = () => {\n    const { api, setToken } = useContext(UserContext)\n    const [isLoading, setIsLoading] = useState(true)\n    const [orders, setOrders] = useState(null)\n    const router = useRouter()\n\n    useEffect(() => {\n        seeIfLogin(api, setToken).then(() => {\n            setIsLoading(false)\n        })\n    }, [])\n\n    const getOrders = async () => {\n        const orders = await api.getOrders()\n        setOrders(orders.data)\n    }\n\n    const confirmTransferBuyer = async (ticket_id: string) => {\n        await api.transferredTicketBuyerConfirmation({ticket_id})\n        await getOrders()\n    }\n\n    const refundTicket = async (ticket_id: string) => {\n        await api.refundTicket({id: ticket_id})\n        await getOrders()\n    }\n\n    return (\n        <>\n            <Head>\n                <title>MasterSeats â€¢ Orders</title>\n            </Head>\n            {isLoading ? <Loading/> : \n                <OrdersPage \n                    orders={orders} \n                    getOrders={getOrders}\n                    confirmTransferBuyer={confirmTransferBuyer}\n                    refundTicket={refundTicket}\n                    />\n            }\n        </>\n    );\n};\n\nexport default Orders;"]},"metadata":{},"sourceType":"module"}