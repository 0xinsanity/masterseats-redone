{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { Table, Grid, message } from 'antd';\nimport { ScreenSize } from '../../lib';\nimport { GenButton, Container, FilterContainer, SelectContainer, returnEmojiString, GenIconButton, DollarAdjustedOutline, PurchaseContainer } from '../DashboardPage/DashboardPage.styled';\nimport { SearchOutlined } from '@ant-design/icons';\nimport { GameSelect, FilterSelect } from '../../components/SelectOptions';\nimport { UserContext } from '../../lib/UserContext';\nimport OpenPage from '../Universal/OpenPage';\nimport PurchaseTicketModal from './PurchaseTicketModal';\nimport { serialize } from '../../lib';\nconst {\n  useBreakpoint\n} = Grid;\n\nconst Buy = props => {\n  _s();\n\n  const {\n    currentUser,\n    api\n  } = useContext(UserContext);\n  const {\n    tickets,\n    getTickets\n  } = props;\n  const [gameValue, setGameValue] = useState(undefined);\n  const [currentGame, setCurrentGame] = useState(undefined);\n  const [filterValue, setFilterValue] = useState(undefined);\n  const [visible, setVisibility] = useState(false);\n  const [token, setToken] = useState('');\n  const [ticket_id, setTicketId] = useState('');\n  const screens = useBreakpoint();\n  const [screenSize, setScreenSize] = useState(undefined);\n  useEffect(() => {\n    Object.entries(screens).filter(screen => !!screen[1]).map(screen => {\n      if (screen[0] !== ScreenSize[screenSize]) {\n        setScreenSize(ScreenSize[screen[0]]);\n      }\n    });\n  }, [screens]);\n\n  const clickPurchase = async ticket_id => {\n    if (currentUser === null) {\n      message.info(\"Please create an account to start purchasing tickets.\");\n      OpenPage('/login');\n      return;\n    }\n\n    if (!currentUser.is_email_verified) {\n      message.error(\"Please verify your email before trying to purchase a ticket.\");\n      return;\n    }\n\n    api.getClientToken().then(token => {\n      setVisibility(true);\n      setToken(token.data);\n      setTicketId(ticket_id);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(PurchaseTicketModal, {\n    visible: visible,\n    token: token,\n    onCancel: () => {\n      setVisibility(false);\n      setToken('');\n      setTicketId('');\n    },\n    onComplete: async nonce => {\n      await api.orderConfirmation({\n        ticket_id,\n        nonce\n      });\n      await getTickets({\n        game: \"All Games\",\n        filter: \"Price - lowest to highest\"\n      });\n      setVisibility(false);\n      setToken('');\n      setTicketId('');\n      OpenPage('/thankyou?' + serialize({\n        'purchase': currentGame\n      }));\n    }\n  }), /*#__PURE__*/React.createElement(FilterContainer, null, /*#__PURE__*/React.createElement(SelectContainer, null, /*#__PURE__*/React.createElement(GameSelect, {\n    hasAllGames: true,\n    value: gameValue,\n    setValue: e => setGameValue(e)\n  }), /*#__PURE__*/React.createElement(FilterSelect, {\n    value: filterValue,\n    setValue: e => setFilterValue(e)\n  })), /*#__PURE__*/React.createElement(GenButton, {\n    onClick: async () => await getTickets({\n      filter: filterValue,\n      game: gameValue\n    }),\n    icon: /*#__PURE__*/React.createElement(SearchOutlined, null)\n  }, screenSize >= 1 ? \"Search\" : null)), /*#__PURE__*/React.createElement(Table, {\n    columns: [{\n      title: 'Game',\n      key: 'game',\n      dataIndex: 'game',\n      render: (text, data) => returnEmojiString(data.game)\n    }, {\n      title: 'Section',\n      key: 'section',\n      dataIndex: 'section'\n    }, {\n      title: 'Price ($)',\n      key: 'price',\n      dataIndex: 'price',\n      render: text => text.toFixed(2)\n    }, {\n      title: '',\n      key: 'buy',\n      dataIndex: 'ticketId',\n      render: (text, data) => /*#__PURE__*/React.createElement(PurchaseContainer, null, /*#__PURE__*/React.createElement(GenIconButton, {\n        icon: /*#__PURE__*/React.createElement(DollarAdjustedOutline, null),\n        onClick: async () => {\n          setCurrentGame(data.game);\n          await clickPurchase(data.id);\n        }\n      }, screenSize !== 0 ? \"Purchase\" : null))\n    }],\n    dataSource: tickets,\n    pagination: {\n      position: ['bottomCenter']\n    }\n  }));\n};\n\n_s(Buy, \"YL3+zrbo+rhWMe+y2XCvb65/Pf0=\", false, function () {\n  return [useBreakpoint];\n});\n\n_c = Buy;\nexport default Buy;\n\nvar _c;\n\n$RefreshReg$(_c, \"Buy\");","map":{"version":3,"sources":["/Users/insanity/Documents/MasterSeats/new/client/src/areas/BuyingPage/Buy.tsx"],"names":["React","useState","useEffect","useContext","Table","Grid","message","ScreenSize","GenButton","Container","FilterContainer","SelectContainer","returnEmojiString","GenIconButton","DollarAdjustedOutline","PurchaseContainer","SearchOutlined","GameSelect","FilterSelect","UserContext","OpenPage","PurchaseTicketModal","serialize","useBreakpoint","Buy","props","currentUser","api","tickets","getTickets","gameValue","setGameValue","undefined","currentGame","setCurrentGame","filterValue","setFilterValue","visible","setVisibility","token","setToken","ticket_id","setTicketId","screens","screenSize","setScreenSize","Object","entries","filter","screen","map","clickPurchase","info","is_email_verified","error","getClientToken","then","data","nonce","orderConfirmation","game","e","title","key","dataIndex","render","text","toFixed","id","position"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react'\nimport { Select, Button, Table, Typography, Grid, message } from 'antd';\nimport styled from 'styled-components'\nimport _ from 'lodash'\nimport {MichiganFootballGame, FilterOptions, Ticket, TicketStatus, SortTicketsBody} from '../../../api'\nimport {ScreenSize} from '../../lib'\nimport {\n    GenButton, \n    Container, \n    FilterContainer, \n    SelectContainer, \n    returnEmojiString, \n    GenIconButton,\n    DollarAdjustedOutline,\n    PurchaseContainer\n    } from '../DashboardPage/DashboardPage.styled'\nimport {SearchOutlined} from '@ant-design/icons'\nimport {GameSelect, FilterSelect} from '../../components/SelectOptions'\nimport {UserContext} from '../../lib/UserContext'\nimport OpenPage from '../Universal/OpenPage'\nimport PurchaseTicketModal from './PurchaseTicketModal'\nimport {serialize, formatCurrency} from '../../lib'\n\nconst {useBreakpoint} = Grid\n\ninterface BuyProps {\n    tickets: Ticket[]\n    getTickets: (sortTicketBody) => void\n}\n\nconst Buy: React.FC<BuyProps> = props => {\n    const {currentUser, api}  = useContext(UserContext)\n    const {tickets, getTickets} = props\n    const [gameValue, setGameValue] = useState<MichiganFootballGame>(undefined)\n    const [currentGame, setCurrentGame] = useState<MichiganFootballGame>(undefined)\n    const [filterValue, setFilterValue] = useState<FilterOptions>(undefined)\n    const [visible, setVisibility] = useState(false)\n    const [token, setToken] = useState('')\n    const [ticket_id, setTicketId] = useState('')\n    \n    const screens = useBreakpoint()\n    const [screenSize, setScreenSize] = useState<ScreenSize>(undefined)\n    \n    useEffect(() => {\n        Object.entries(screens)\n        .filter(screen => !!screen[1])\n        .map(screen => {\n            if (screen[0] !== ScreenSize[screenSize]) {\n                setScreenSize(ScreenSize[screen[0]])\n            }\n        })\n    }, [screens])\n\n    const clickPurchase = async (ticket_id: string) => {\n        if (currentUser === null) {\n            message.info(\"Please create an account to start purchasing tickets.\")\n            OpenPage('/login')\n            return\n        }\n        if (!currentUser.is_email_verified) {\n            message.error(\"Please verify your email before trying to purchase a ticket.\")\n            return\n        }\n\n        api.getClientToken().then((token) => {\n            setVisibility(true)\n            setToken(token.data)\n            setTicketId(ticket_id)\n        })\n    }\n\n    return (\n        <Container>\n            <PurchaseTicketModal \n                visible={visible}\n                token={token}\n                onCancel={() => {\n                    setVisibility(false)\n                    setToken('')\n                    setTicketId('')\n                }}\n                onComplete={async (nonce) => {\n                    await api.orderConfirmation({ticket_id, nonce})\n                    await getTickets({game: \"All Games\", filter: \"Price - lowest to highest\"})\n                    setVisibility(false)\n                    setToken('')\n                    setTicketId('')\n                    OpenPage('/thankyou?' + serialize({'purchase': currentGame}))\n                }}\n            />\n            <FilterContainer>\n                <SelectContainer>\n                    <GameSelect hasAllGames={true} value={gameValue} setValue={(e) => setGameValue(e)}/>\n                    <FilterSelect value={filterValue} setValue={(e) => setFilterValue(e)} />\n                </SelectContainer>\n                <GenButton onClick={async () => await getTickets({filter: filterValue, game: gameValue})} icon={<SearchOutlined />}>\n                    {screenSize >= 1 ? \"Search\" : null}\n                </GenButton>\n            </FilterContainer>\n            <Table columns={[\n                    {\n                        title: 'Game',\n                        key: 'game',\n                        dataIndex: 'game',\n                        render: (text, data) => returnEmojiString(data.game)\n                    },\n                    {\n                        title: 'Section',\n                        key: 'section',\n                        dataIndex: 'section'\n                    },\n                    {\n                        title: 'Price ($)',\n                        key: 'price',\n                        dataIndex: 'price',\n                        render: (text: number) => text.toFixed(2)\n                    },\n                    {\n                        title: '',\n                        key: 'buy',\n                        dataIndex: 'ticketId',\n                        render: (text, data) => (\n                            <PurchaseContainer>\n                                <GenIconButton icon={<DollarAdjustedOutline/>} onClick={async () => {\n                                    setCurrentGame(data.game)\n                                    await clickPurchase(data.id)\n                                }}>\n                                    {screenSize !== 0 ? \"Purchase\" : null}\n                                </GenIconButton>\n                            </PurchaseContainer>\n                        )\n                    }\n                    ]} dataSource={tickets} pagination={{ position: ['bottomCenter'] }} />\n        </Container>\n    )\n}\n\nexport default Buy"]},"metadata":{},"sourceType":"module"}