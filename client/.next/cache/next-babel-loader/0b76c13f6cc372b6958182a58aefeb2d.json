{"ast":null,"code":"import React, { useContext, useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport { UserContext } from '../src/lib/UserContext';\nimport { useRouter } from 'next/router';\nimport ThankYouComponent from '../src/areas/ThankYou';\nimport { seeIfLogin } from '../src/lib';\nimport Loading from '../src/components/Loading';\n\nconst ThankYou = () => {\n  const {\n    currentUser,\n    api,\n    setToken\n  } = useContext(UserContext);\n  const router = useRouter();\n  const [message, setMessage] = useState('Thank you!');\n  const [isEmail, setIsEmail] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    if (router.query.email !== undefined) {\n      setIsEmail(true);\n      setMessage('Thank you! We know email confirmations suck, but we do it for you –\\nto make sure everyone on the platform is a student.\\nPlease check your email for a confirmation link.');\n    } else if (router.query.post !== undefined) {\n      setMessage(`Thanks for listing your ticket for ${router.query.post}, ${currentUser.first_name}!\\nWe\\'re looking for a buyer right now.\\nWe\\'ll email you when we\\'ve found the perfect buyer.\\nHang tight!`);\n    } else if (router.query.purchase !== undefined) {\n      setMessage(`Thanks for purchasing your ticket for ${router.query.purchase}, ${currentUser.first_name}!\\nWe\\'re contacting the seller right now.\\nWe\\'ll email you when the seller confirms that the ticket has been transferred.\\nHang tight!`);\n    }\n  }, [router.query]);\n  useEffect(() => {\n    seeIfLogin(api, setToken).then(() => {\n      setIsLoading(false);\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Head, null, /*#__PURE__*/React.createElement(\"title\", null, \"MasterSeats \\u2022 Thank You\")), isLoading ? /*#__PURE__*/React.createElement(Loading, null) : /*#__PURE__*/React.createElement(ThankYouComponent, {\n    message: message,\n    isEmail: isEmail\n  }));\n};\n\nexport default ThankYou;","map":{"version":3,"sources":["/Users/insanity/Documents/MasterSeats/new/client/pages/thankyou.tsx"],"names":["React","useContext","useState","useEffect","Head","UserContext","useRouter","ThankYouComponent","seeIfLogin","Loading","ThankYou","currentUser","api","setToken","router","message","setMessage","isEmail","setIsEmail","isLoading","setIsLoading","query","email","undefined","post","first_name","purchase","then"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,QAA3B,EAAqCC,SAArC,QAAqD,OAArD;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAAQC,WAAR,QAA0B,wBAA1B;AACA,SAAQC,SAAR,QAAwB,aAAxB;AACA,OAAOC,iBAAP,MAA8B,uBAA9B;AACA,SAAQC,UAAR,QAAyB,YAAzB;AACA,OAAOC,OAAP,MAAoB,2BAApB;;AAEA,MAAMC,QAAkB,GAAG,MAAM;AAC7B,QAAM;AAACC,IAAAA,WAAD;AAAcC,IAAAA,GAAd;AAAmBC,IAAAA;AAAnB,MAA+BZ,UAAU,CAACI,WAAD,CAA/C;AACA,QAAMS,MAAM,GAAGR,SAAS,EAAxB;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,YAAD,CAAtC;AACA,QAAM,CAACe,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACiB,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,CAAC,IAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIW,MAAM,CAACO,KAAP,CAAaC,KAAb,KAAuBC,SAA3B,EAAsC;AAClCL,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAF,MAAAA,UAAU,CAAC,4KAAD,CAAV;AACH,KAHD,MAGO,IAAIF,MAAM,CAACO,KAAP,CAAaG,IAAb,KAAsBD,SAA1B,EAAqC;AACxCP,MAAAA,UAAU,CAAE,sCAAqCF,MAAM,CAACO,KAAP,CAAaG,IAAK,KAAIb,WAAW,CAACc,UAAW,8GAApF,CAAV;AACH,KAFM,MAEA,IAAIX,MAAM,CAACO,KAAP,CAAaK,QAAb,KAA0BH,SAA9B,EAAyC;AAC5CP,MAAAA,UAAU,CAAE,yCAAwCF,MAAM,CAACO,KAAP,CAAaK,QAAS,KAAIf,WAAW,CAACc,UAAW,0IAA3F,CAAV;AACH;AACJ,GATQ,EASN,CAACX,MAAM,CAACO,KAAR,CATM,CAAT;AAWAlB,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,UAAU,CAACI,GAAD,EAAMC,QAAN,CAAV,CAA0Bc,IAA1B,CAA+B,MAAM;AACjCP,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAFD;AAGH,GAJQ,EAIN,EAJM,CAAT;AAMA,sBACI,uDACI,oBAAC,IAAD,qBACI,kEADJ,CADJ,EAIKD,SAAS,gBAAG,oBAAC,OAAD,OAAH,gBAAgB,oBAAC,iBAAD;AAAmB,IAAA,OAAO,EAAEJ,OAA5B;AAAqC,IAAA,OAAO,EAAEE;AAA9C,IAJ9B,CADJ;AASH,CAjCD;;AAmCA,eAAeP,QAAf","sourcesContent":["import React, {useContext, useState, useEffect} from 'react'\nimport Head from 'next/head'\nimport {UserContext} from '../src/lib/UserContext'\nimport {useRouter} from 'next/router'\nimport ThankYouComponent from '../src/areas/ThankYou'\nimport {seeIfLogin} from '../src/lib'\nimport Loading from '../src/components/Loading';\n\nconst ThankYou: React.FC = () => {\n    const {currentUser, api, setToken} = useContext(UserContext) \n    const router = useRouter()\n    const [message, setMessage] = useState('Thank you!')\n    const [isEmail, setIsEmail] = useState(false)\n    const [isLoading, setIsLoading] = useState(true)\n\n    useEffect(() => {\n        if (router.query.email !== undefined) {\n            setIsEmail(true)\n            setMessage('Thank you! We know email confirmations suck, but we do it for you –\\nto make sure everyone on the platform is a student.\\nPlease check your email for a confirmation link.')\n        } else if (router.query.post !== undefined) {\n            setMessage(`Thanks for listing your ticket for ${router.query.post}, ${currentUser.first_name}!\\nWe\\'re looking for a buyer right now.\\nWe\\'ll email you when we\\'ve found the perfect buyer.\\nHang tight!`)\n        } else if (router.query.purchase !== undefined) {\n            setMessage(`Thanks for purchasing your ticket for ${router.query.purchase}, ${currentUser.first_name}!\\nWe\\'re contacting the seller right now.\\nWe\\'ll email you when the seller confirms that the ticket has been transferred.\\nHang tight!`)\n        }\n    }, [router.query])\n\n    useEffect(() => {\n        seeIfLogin(api, setToken).then(() => {\n            setIsLoading(false)\n        })\n    }, [])\n\n    return (\n        <>\n            <Head>\n                <title>MasterSeats • Thank You</title>\n            </Head>\n            {isLoading ? <Loading/> : <ThankYouComponent message={message} isEmail={isEmail} />}\n            \n        </>\n    );\n};\n\nexport default ThankYou;"]},"metadata":{},"sourceType":"module"}