{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, createContext } from \"react\";\nimport { DefaultApi } from '../../api';\nexport const UserContext = /*#__PURE__*/createContext({\n  currentToken: null,\n  currentUser: null,\n  setToken: null\n});\n\nclass UserProvider extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"setToken\", async token => {\n      try {\n        const user = await new DefaultApi().getUser();\n        this.setState({\n          currentToken: token,\n          currentUser: user\n        });\n      } catch (err) {\n        console.error(err);\n      }\n    });\n\n    _defineProperty(this, \"state\", {\n      currentToken: null,\n      currentUser: null,\n      setToken: this.setToken\n    });\n\n    _defineProperty(this, \"componentDidMount\", async () => {\n      if (this.state.currentUser !== null) {\n        try {\n          const body = await new DefaultApi().login({\n            email: this.state.currentUser.email,\n            password: this.state.currentUser.password\n          });\n          this.setToken(body.data);\n        } catch (err) {\n          console.error(err);\n        }\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(UserContext.Provider, {\n      value: this.state\n    }, this.props.children);\n  }\n\n}\n\nexport default UserProvider;","map":{"version":3,"sources":["/Users/insanity/Documents/MasterSeats/new/client/src/lib/UserContext.tsx"],"names":["React","Component","createContext","DefaultApi","UserContext","currentToken","currentUser","setToken","UserProvider","token","user","getUser","setState","err","console","error","state","body","login","email","password","data","render","props","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,aAA3B,QAAgD,OAAhD;AAIA,SAAcC,UAAd,QAA+B,WAA/B;AAQA,OAAO,MAAMC,WAAW,gBAAGF,aAAa,CAAwB;AAC5DG,EAAAA,YAAY,EAAE,IAD8C;AAE5DC,EAAAA,WAAW,EAAE,IAF+C;AAG5DC,EAAAA,QAAQ,EAAE;AAHkD,CAAxB,CAAjC;;AAKP,MAAMC,YAAN,SAA2BP,SAA3B,CAAqC;AAAA;AAAA;;AAAA,sCACtB,MAAOQ,KAAP,IAAyB;AAChC,UAAI;AACA,cAAMC,IAAI,GAAG,MAAM,IAAIP,UAAJ,GAAiBQ,OAAjB,EAAnB;AACA,aAAKC,QAAL,CAAc;AAACP,UAAAA,YAAY,EAAEI,KAAf;AAAsBH,UAAAA,WAAW,EAAEI;AAAnC,SAAd;AACH,OAHD,CAGE,OAAOG,GAAP,EAAY;AACVC,QAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACH;AACJ,KARgC;;AAAA,mCAUzB;AACJR,MAAAA,YAAY,EAAE,IADV;AAEJC,MAAAA,WAAW,EAAE,IAFT;AAGJC,MAAAA,QAAQ,EAAE,KAAKA;AAHX,KAVyB;;AAAA,+CAgBb,YAAY;AAC5B,UAAI,KAAKS,KAAL,CAAWV,WAAX,KAA2B,IAA/B,EAAqC;AACjC,YAAI;AACA,gBAAMW,IAAI,GAAG,MAAM,IAAId,UAAJ,GAAiBe,KAAjB,CAAuB;AAACC,YAAAA,KAAK,EAAE,KAAKH,KAAL,CAAWV,WAAX,CAAuBa,KAA/B;AAAsCC,YAAAA,QAAQ,EAAE,KAAKJ,KAAL,CAAWV,WAAX,CAAuBc;AAAvE,WAAvB,CAAnB;AACA,eAAKb,QAAL,CAAcU,IAAI,CAACI,IAAnB;AACH,SAHD,CAGE,OAAOR,GAAP,EAAY;AACVC,UAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACH;AACJ;AACJ,KAzBgC;AAAA;;AA2BjCS,EAAAA,MAAM,GAAG;AACL,wBACA,oBAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAE,KAAKN;AAAlC,OACK,KAAKO,KAAL,CAAWC,QADhB,CADA;AAKH;;AAjCgC;;AAmCrC,eAAehB,YAAf","sourcesContent":["import React, { Component, createContext } from \"react\";\nimport Router, {withRouter} from \"next/router\";\nimport {message} from 'antd'\nimport { NextPage, NextPageContext } from 'next';\nimport {User, DefaultApi} from '../../api'\n\ninterface ContextProps {\n  currentToken?: string,\n  currentUser?: User,\n  setToken: (token: string) => Promise<void>\n}\n\nexport const UserContext = createContext<Partial<ContextProps>>({\n    currentToken: null,\n    currentUser: null,\n    setToken: null\n});\nclass UserProvider extends Component {\n    setToken = async (token: string) => {\n        try {\n            const user = await new DefaultApi().getUser()\n            this.setState({currentToken: token, currentUser: user})\n        } catch (err) {\n            console.error(err)\n        }\n    }\n\n    state = {\n        currentToken: null,\n        currentUser: null,\n        setToken: this.setToken\n    }\n\n    componentDidMount = async () => {\n        if (this.state.currentUser !== null) {\n            try {\n                const body = await new DefaultApi().login({email: this.state.currentUser.email, password: this.state.currentUser.password})\n                this.setToken(body.data)\n            } catch (err) {\n                console.error(err)\n            }\n        }\n    }\n\n    render() {\n        return (\n        <UserContext.Provider value={this.state}>\n            {this.props.children}\n        </UserContext.Provider>\n        );\n    }\n}\nexport default UserProvider;"]},"metadata":{},"sourceType":"module"}