{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Table, Grid } from 'antd';\nimport { Container, returnEmojiString, GenIconButton, CloseAdjustedOutline, ExclamationCircleAdjustedOutlined } from '../../DashboardPage/DashboardPage.styled';\nimport { ScreenSize } from '../../../lib';\nconst {\n  useBreakpoint\n} = Grid;\n\nconst Pending = props => {\n  _s();\n\n  const {\n    pendingSold,\n    pendingBuy,\n    confirmTransferSeller,\n    confirmTransferBuyer,\n    refundTicket\n  } = props;\n  const screens = useBreakpoint();\n  const [screenSize, setScreenSize] = useState(undefined);\n\n  const columns = isBuyer => {\n    var refund_col = null;\n\n    if (isBuyer) {\n      refund_col = {\n        title: '',\n        key: 'refund',\n        dataIndex: 'id',\n        render: (text, data) => {\n          var disabled;\n\n          if (isBuyer) {\n            disabled = !data.confirmed_seller_transfer;\n          } else {\n            disabled = !data.confirmed_buyer_transfer;\n          }\n\n          return /*#__PURE__*/React.createElement(\"div\", {\n            style: {\n              display: 'flex',\n              justifyContent: 'flex-end'\n            }\n          }, /*#__PURE__*/React.createElement(GenIconButton, {\n            disabled: disabled,\n            icon: /*#__PURE__*/React.createElement(CloseAdjustedOutline, null),\n            onClick: async () => {\n              await refundTicket(data.id);\n            }\n          }, screenSize > 0 ? \"Get Refund\" : null));\n        }\n      };\n    }\n\n    return [{\n      title: 'Game',\n      key: 'game',\n      dataIndex: 'game',\n      render: (text, data) => returnEmojiString(data.game)\n    }, {\n      title: 'Section',\n      key: 'section',\n      dataIndex: 'section'\n    }, {\n      title: 'Price ($)',\n      key: 'price',\n      dataIndex: 'price'\n    }, {\n      title: '',\n      key: 'confirm',\n      dataIndex: 'id',\n      render: (text, data) => {\n        var disabled;\n\n        if (isBuyer) {\n          disabled = !data.confirmed_seller_transfer;\n        } else {\n          disabled = !data.confirmed_buyer_transfer;\n        }\n\n        return /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'flex-end'\n          }\n        }, /*#__PURE__*/React.createElement(GenIconButton, {\n          disabled: disabled,\n          icon: /*#__PURE__*/React.createElement(ExclamationCircleAdjustedOutlined, null),\n          onClick: async () => {\n            if (isBuyer) {\n              await confirmTransferBuyer(data.id);\n            } else {\n              await confirmTransferSeller(data.id);\n            }\n          }\n        }, screenSize > 0 ? \"Confirm Transfer\" : null));\n      }\n    }, refund_col];\n  };\n\n  useEffect(() => {\n    Object.entries(screens).filter(screen => !!screen[1]).map(screen => {\n      if (screen[0] !== ScreenSize[screenSize]) {\n        setScreenSize(ScreenSize[screen[0]]);\n      }\n    });\n  }, [screens]);\n  return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(Table, {\n    columns: columns(false),\n    dataSource: pendingSold,\n    pagination: {\n      position: ['bottomCenter']\n    }\n  }), /*#__PURE__*/React.createElement(Table, {\n    columns: columns(true),\n    dataSource: pendingBuy,\n    pagination: {\n      position: null\n    }\n  }));\n};\n\n_s(Pending, \"gKBjdsDmzIgAQNwEaqs7A7n7hOU=\", false, function () {\n  return [useBreakpoint];\n});\n\n_c = Pending;\nexport default Pending;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pending\");","map":{"version":3,"sources":["/Users/insanity/Documents/MasterSeats/new/client/src/areas/TicketWallet/Sections/Pending.tsx"],"names":["React","useState","useEffect","Table","Grid","Container","returnEmojiString","GenIconButton","CloseAdjustedOutline","ExclamationCircleAdjustedOutlined","ScreenSize","useBreakpoint","Pending","props","pendingSold","pendingBuy","confirmTransferSeller","confirmTransferBuyer","refundTicket","screens","screenSize","setScreenSize","undefined","columns","isBuyer","refund_col","title","key","dataIndex","render","text","data","disabled","confirmed_seller_transfer","confirmed_buyer_transfer","display","justifyContent","id","game","Object","entries","filter","screen","map","position"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useContext} from 'react'\nimport {Table, Modal, Grid, message} from 'antd'\nimport {Container, \n        returnEmojiString, \n        GenIconButton, \n        CloseAdjustedOutline,\n        ExclamationCircleAdjustedOutlined} from '../../DashboardPage/DashboardPage.styled'\nimport {MichiganFootballGame, Ticket, TicketStatus, PostTicketBody} from '../../../../api'\nimport {ScreenSize} from '../../../lib'\nimport AddTicketModal from '../../DashboardPage/AddTicketModal'\nimport {UserContext} from '../../../lib/UserContext'\nimport OpenPage from '../../Universal/OpenPage'\n\nconst {useBreakpoint} = Grid\n\ninterface PendingProps {\n    pendingSold: Ticket[],\n    pendingBuy: Ticket[],\n    confirmTransferSeller: (ticket_id: string) => void,\n    confirmTransferBuyer: (ticket_id: string) => void\n    refundTicket: (ticket_id: string) => void\n}\n\nconst Pending: React.FC<PendingProps> = props => {\n    const {pendingSold, pendingBuy, confirmTransferSeller, confirmTransferBuyer, refundTicket} = props\n\n    const screens = useBreakpoint()\n    const [screenSize, setScreenSize] = useState<ScreenSize>(undefined)\n\n    const columns = (isBuyer: boolean) => {\n        var refund_col = null\n        if (isBuyer) {\n            refund_col = {\n                title: '',\n                key: 'refund',\n                dataIndex: 'id',\n                render: (text, data) => {\n                    var disabled: boolean\n                    if (isBuyer) {\n                        disabled = !data.confirmed_seller_transfer\n                    } else {\n                        disabled = !data.confirmed_buyer_transfer\n                    }\n\n                    return (<div style={{display: 'flex', justifyContent: 'flex-end'}}>\n                        <GenIconButton disabled={disabled} icon={<CloseAdjustedOutline />} onClick={async () => {\n                            await refundTicket(data.id)\n                        }}>\n                            {screenSize > 0 ? \"Get Refund\" : null}\n                        </GenIconButton>\n                    </div>)\n                }\n            }\n        }\n\n        return [\n            {\n                title: 'Game',\n                key: 'game',\n                dataIndex: 'game',\n                render: (text, data) => returnEmojiString(data.game)\n            },\n            {\n                title: 'Section',\n                key: 'section',\n                dataIndex: 'section'\n            },\n            {\n                title: 'Price ($)',\n                key: 'price',\n                dataIndex: 'price'\n            },\n            {\n                title: '',\n                key: 'confirm',\n                dataIndex: 'id',\n                render: (text, data) => {\n                    var disabled: boolean\n                    if (isBuyer) {\n                        disabled = !data.confirmed_seller_transfer\n                    } else {\n                        disabled = !data.confirmed_buyer_transfer\n                    }\n\n                    return (<div style={{display: 'flex', justifyContent: 'flex-end'}}>\n                        <GenIconButton disabled={disabled} icon={<ExclamationCircleAdjustedOutlined />} onClick={async () => {\n                            if (isBuyer) {\n                                await confirmTransferBuyer(data.id)\n                            } else {\n                                await confirmTransferSeller(data.id)\n                            }\n                        }}>\n                            {screenSize > 0 ? \"Confirm Transfer\" : null}\n                        </GenIconButton>\n                    </div>)\n                }\n            },\n            refund_col\n        ]\n    }\n    \n    useEffect(() => {\n        Object.entries(screens)\n        .filter(screen => !!screen[1])\n        .map(screen => {\n            if (screen[0] !== ScreenSize[screenSize]) {\n                setScreenSize(ScreenSize[screen[0]])\n            }\n        })\n    }, [screens])\n\n    return (\n        <Container>\n            <Table columns={columns(false)} dataSource={pendingSold} pagination={{ position: ['bottomCenter'] }} />\n            <Table columns={columns(true)} dataSource={pendingBuy} pagination={{ position: null }} />\n        </Container>\n    )\n}\n\nexport default Pending"]},"metadata":{},"sourceType":"module"}