{"ast":null,"code":"import React, { useContext, useEffect, useState } from 'react';\nimport { PageDashboard } from '../Universal/PageUniversal';\nimport ResetForm from '../LoginCard/ResetForm';\nimport { UserContext } from '../../lib/UserContext';\nimport { message, Typography } from 'antd';\nimport AutomaticPaymentForm from './AutomaticPaymentForm';\n\nconst Profile = () => {\n  const {\n    api,\n    setToken,\n    currentUser\n  } = useContext(UserContext);\n  const [hasAutomaticPayouts, setHasAutomaticPayouts] = useState(false);\n  useEffect(() => {\n    if (currentUser !== null) {\n      if (currentUser.seller_payment_id !== null) {\n        setHasAutomaticPayouts(true);\n      }\n    }\n  }, [currentUser]);\n\n  const resetPassword = async body_change => {\n    if (body_change.new_password !== body_change.repeat_password) {\n      message.error(\"Your new password is not the same as your repeated password.\");\n      return;\n    }\n\n    try {\n      await api.changePasswordFromProfile({\n        new_password: body_change.new_password\n      });\n      message.success(\"Your password has been changed. Please login with your new password.\");\n    } catch (err) {\n      message.error(\"There was a problem verifying your account. Please contact us.\");\n    }\n  };\n\n  const addHyperWalletData = async values => {};\n\n  return /*#__PURE__*/React.createElement(PageDashboard, {\n    pageStyle: {\n      marginTop: 100\n    },\n    cardStyle: {\n      paddingLeft: '20%',\n      paddingRight: '20%'\n    },\n    isLoggedIn: currentUser === null ? false : true,\n    selected: -1\n  }, /*#__PURE__*/React.createElement(Typography.Title, {\n    style: {\n      marginBottom: 45\n    }\n  }, \"Profile\"), /*#__PURE__*/React.createElement(ResetForm, {\n    onFinish: resetPassword\n  }), hasAutomaticPayouts ? /*#__PURE__*/React.createElement(Typography.Text, null, \"Congratulations! You signed up for automatic payouts. The next time a ticket is sold, you will get paid out immediately.\") : /*#__PURE__*/React.createElement(AutomaticPaymentForm, {\n    onFinish: addHyperWalletData\n  }));\n};\n\nexport default Profile;","map":{"version":3,"sources":["/Users/insanity/Documents/MasterSeats/new/client/src/areas/Profile/index.tsx"],"names":["React","useContext","useEffect","useState","PageDashboard","ResetForm","UserContext","message","Typography","AutomaticPaymentForm","Profile","api","setToken","currentUser","hasAutomaticPayouts","setHasAutomaticPayouts","seller_payment_id","resetPassword","body_change","new_password","repeat_password","error","changePasswordFromProfile","success","err","addHyperWalletData","values","marginTop","paddingLeft","paddingRight","marginBottom"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAqD,OAArD;AACA,SAAQC,aAAR,QAA4B,4BAA5B;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAAQC,WAAR,QAA0B,uBAA1B;AACA,SAAQC,OAAR,EAA+BC,UAA/B,QAAgD,MAAhD;AAOA,OAAOC,oBAAP,MAAiC,wBAAjC;;AAEA,MAAMC,OAAiB,GAAG,MAAM;AAC5B,QAAM;AAACC,IAAAA,GAAD;AAAMC,IAAAA,QAAN;AAAgBC,IAAAA;AAAhB,MAA+BZ,UAAU,CAACK,WAAD,CAA/C;AACA,QAAM,CAACQ,mBAAD,EAAsBC,sBAAtB,IAAgDZ,QAAQ,CAAC,KAAD,CAA9D;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIW,WAAW,KAAK,IAApB,EAA0B;AACtB,UAAIA,WAAW,CAACG,iBAAZ,KAAkC,IAAtC,EAA4C;AACxCD,QAAAA,sBAAsB,CAAC,IAAD,CAAtB;AACH;AACJ;AACJ,GANQ,EAMN,CAACF,WAAD,CANM,CAAT;;AAQA,QAAMI,aAAa,GAAG,MAAOC,WAAP,IAAuB;AACzC,QAAIA,WAAW,CAACC,YAAZ,KAA6BD,WAAW,CAACE,eAA7C,EAA8D;AAC1Db,MAAAA,OAAO,CAACc,KAAR,CAAc,8DAAd;AACA;AACH;;AAED,QAAI;AACA,YAAMV,GAAG,CAACW,yBAAJ,CAA8B;AAACH,QAAAA,YAAY,EAAED,WAAW,CAACC;AAA3B,OAA9B,CAAN;AACAZ,MAAAA,OAAO,CAACgB,OAAR,CAAgB,sEAAhB;AACH,KAHD,CAGE,OAAOC,GAAP,EAAY;AACVjB,MAAAA,OAAO,CAACc,KAAR,CAAc,gEAAd;AACH;AACJ,GAZD;;AAcA,QAAMI,kBAAkB,GAAG,MAAOC,MAAP,IAAkB,CAE5C,CAFD;;AAIA,sBACI,oBAAC,aAAD;AAAe,IAAA,SAAS,EAAE;AAACC,MAAAA,SAAS,EAAE;AAAZ,KAA1B;AAA4C,IAAA,SAAS,EAAE;AAACC,MAAAA,WAAW,EAAE,KAAd;AAAqBC,MAAAA,YAAY,EAAE;AAAnC,KAAvD;AAAkG,IAAA,UAAU,EAAEhB,WAAW,KAAK,IAAhB,GAAuB,KAAvB,GAA+B,IAA7I;AAAmJ,IAAA,QAAQ,EAAE,CAAC;AAA9J,kBACI,oBAAC,UAAD,CAAY,KAAZ;AAAkB,IAAA,KAAK,EAAE;AAACiB,MAAAA,YAAY,EAAE;AAAf;AAAzB,eADJ,eAEI,oBAAC,SAAD;AAAW,IAAA,QAAQ,EAAEb;AAArB,IAFJ,EAGKH,mBAAmB,gBAChB,oBAAC,UAAD,CAAY,IAAZ,mIADgB,gBAEhB,oBAAC,oBAAD;AAAsB,IAAA,QAAQ,EAAEW;AAAhC,IALR,CADJ;AAUH,CAxCD;;AA0CA,eAAef,OAAf","sourcesContent":["import React, {useContext, useEffect, useState} from 'react'\nimport {PageDashboard} from '../Universal/PageUniversal'\nimport ResetForm from '../LoginCard/ResetForm'\nimport {UserContext} from '../../lib/UserContext'\nimport {message, Button, Card, Typography} from 'antd'\nimport OpenPage from '../../areas/Universal/OpenPage'\nimport Navbar from '../Universal/Navbar'\nimport {OuterContainer } from '../Universal/Card.styled'\nimport Page from '../../components/Page'\nimport BackgroundPolygons from '../../components/BackgroundPolygons'\nimport styled from 'styled-components'\nimport AutomaticPaymentForm from './AutomaticPaymentForm'\n\nconst Profile: React.FC = () => {\n    const {api, setToken, currentUser} = useContext(UserContext)\n    const [hasAutomaticPayouts, setHasAutomaticPayouts] = useState(false)\n    \n    useEffect(() => {\n        if (currentUser !== null) {\n            if (currentUser.seller_payment_id !== null) {\n                setHasAutomaticPayouts(true)\n            }\n        }\n    }, [currentUser])\n\n    const resetPassword = async (body_change) => {\n        if (body_change.new_password !== body_change.repeat_password) {\n            message.error(\"Your new password is not the same as your repeated password.\")\n            return\n        }\n\n        try {\n            await api.changePasswordFromProfile({new_password: body_change.new_password})\n            message.success(\"Your password has been changed. Please login with your new password.\")\n        } catch (err) {\n            message.error(\"There was a problem verifying your account. Please contact us.\")\n        }\n    }\n\n    const addHyperWalletData = async (values) => {\n\n    }\n\n    return (\n        <PageDashboard pageStyle={{marginTop: 100}} cardStyle={{paddingLeft: '20%', paddingRight: '20%'}} isLoggedIn={currentUser === null ? false : true} selected={-1}>\n            <Typography.Title style={{marginBottom: 45}}>Profile</Typography.Title>\n            <ResetForm onFinish={resetPassword}/>\n            {hasAutomaticPayouts ? \n                <Typography.Text>Congratulations! You signed up for automatic payouts. The next time a ticket is sold, you will get paid out immediately.</Typography.Text> : \n                <AutomaticPaymentForm onFinish={addHyperWalletData}/>\n            }\n        </PageDashboard>\n    )\n}\n\nexport default Profile"]},"metadata":{},"sourceType":"module"}