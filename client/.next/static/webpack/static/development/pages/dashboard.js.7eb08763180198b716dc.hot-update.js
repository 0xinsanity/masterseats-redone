webpackHotUpdate("static/development/pages/dashboard.js",{

/***/ "./api/api.ts":
/*!********************!*\
  !*** ./api/api.ts ***!
  \********************/
/*! exports provided: FilterOptions, MichiganFootballGame, TicketStatus, DefaultApiAxiosParamCreator, DefaultApiFp, DefaultApiFactory, DefaultApi */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FilterOptions\", function() { return FilterOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MichiganFootballGame\", function() { return MichiganFootballGame; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TicketStatus\", function() { return TicketStatus; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DefaultApiAxiosParamCreator\", function() { return DefaultApiAxiosParamCreator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DefaultApiFp\", function() { return DefaultApiFp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DefaultApiFactory\", function() { return DefaultApiFactory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DefaultApi\", function() { return DefaultApi; });\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! url */ \"./node_modules/native-url/dist/index.js\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(url__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base */ \"./api/base.ts\");\n// tslint:disable\n\n/**\n * masterseats-server\n * MasterSeats Server\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n // Some imports not used depending on template conditions\n// @ts-ignore\n\n\n/**\n * \n * @export\n * @interface ChangePassword\n */\n\n/**\n * \n * @export\n * @enum {string}\n */\nlet FilterOptions;\n/**\n * \n * @export\n * @interface ForgotPasswordBody\n */\n\n(function (FilterOptions) {\n  FilterOptions[\"PriceLowestToHighest\"] = \"Price - lowest to highest\";\n  FilterOptions[\"PriceHighestToLowest\"] = \"Price - highest to lowest\";\n  FilterOptions[\"LowestSection\"] = \"Lowest Section\";\n  FilterOptions[\"HighestSection\"] = \"Highest Section\";\n})(FilterOptions || (FilterOptions = {}));\n\n/**\n * \n * @export\n * @enum {string}\n */\nlet MichiganFootballGame;\n/**\n * \n * @export\n * @interface OrderConfirmation\n */\n\n(function (MichiganFootballGame) {\n  MichiganFootballGame[\"BallState\"] = \"Michigan vs. Ball State\";\n  MichiganFootballGame[\"ArkansasState\"] = \"Michigan vs. Arkansas State\";\n  MichiganFootballGame[\"Wisconsin\"] = \"Michigan vs. Wisconsin\";\n  MichiganFootballGame[\"PennState\"] = \"Michigan vs. Penn State\";\n  MichiganFootballGame[\"Maryland\"] = \"Michigan vs. Maryland\";\n  MichiganFootballGame[\"Indiana\"] = \"Michigan vs. Indiana\";\n})(MichiganFootballGame || (MichiganFootballGame = {}));\n\n/**\n * \n * @export\n * @enum {string}\n */\nlet TicketStatus;\n/**\n * \n * @export\n * @interface User\n */\n\n(function (TicketStatus) {\n  TicketStatus[\"Open\"] = \"Open\";\n  TicketStatus[\"Removed\"] = \"Removed\";\n  TicketStatus[\"PendingTransfer\"] = \"Pending Transfer\";\n  TicketStatus[\"CompletedTransfer\"] = \"Completed Transfer\";\n})(TicketStatus || (TicketStatus = {}));\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nconst DefaultApiAxiosParamCreator = function (configuration) {\n  return {\n    /**\n     * \n     * @param {HyperWalletBody} [hyperWalletBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    addHyperWalletData: async (hyperWalletBody, options = {}) => {\n      const localVarPath = `/user/add-hyperwallet-data`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof hyperWalletBody !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(hyperWalletBody !== undefined ? hyperWalletBody : {}) : hyperWalletBody || \"\";\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {ChangePassword} [changePassword] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    changePassword: async (changePassword, options = {}) => {\n      const localVarPath = `/user/change-password`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof changePassword !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(changePassword !== undefined ? changePassword : {}) : changePassword || \"\";\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    changePasswordFromProfile: async (options = {}) => {\n      const localVarPath = `/user/change-password-profile`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {ForgotPasswordBody} [forgotPasswordBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    forgotPasswordEmail: async (forgotPasswordBody, options = {}) => {\n      const localVarPath = `/user/forgot-password-email`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof forgotPasswordBody !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(forgotPasswordBody !== undefined ? forgotPasswordBody : {}) : forgotPasswordBody || \"\";\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getClientToken: async (options = {}) => {\n      const localVarPath = `/user/client-token`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getOrders: async (options = {}) => {\n      const localVarPath = `/user/get-orders`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getTicketWallet: async (options = {}) => {\n      const localVarPath = `/user/get-ticket-wallet`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getUser: async (options = {}) => {\n      const localVarPath = `/user/get-user`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    isEmailVerified: async (options = {}) => {\n      const localVarPath = `/user/is-email-verified`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {LoginBody} [loginBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    login: async (loginBody, options = {}) => {\n      const localVarPath = `/user/login`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof loginBody !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(loginBody !== undefined ? loginBody : {}) : loginBody || \"\";\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {OrderConfirmation} [orderConfirmation] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    orderConfirmation: async (orderConfirmation, options = {}) => {\n      const localVarPath = `/ticket/order-confirmation`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof orderConfirmation !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(orderConfirmation !== undefined ? orderConfirmation : {}) : orderConfirmation || \"\";\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {PostTicketBody} [postTicketBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    postTicket: async (postTicketBody, options = {}) => {\n      const localVarPath = `/ticket/post-ticket`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof postTicketBody !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(postTicketBody !== undefined ? postTicketBody : {}) : postTicketBody || \"\";\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {RemoveTicketBody} [removeTicketBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    refundTicket: async (removeTicketBody, options = {}) => {\n      const localVarPath = `/ticket/refund-ticket`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof removeTicketBody !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(removeTicketBody !== undefined ? removeTicketBody : {}) : removeTicketBody || \"\";\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {SignUpBody} [signUpBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    register: async (signUpBody, options = {}) => {\n      const localVarPath = `/user/register`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof signUpBody !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(signUpBody !== undefined ? signUpBody : {}) : signUpBody || \"\";\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {RemoveTicketBody} [removeTicketBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    removeTicket: async (removeTicketBody, options = {}) => {\n      const localVarPath = `/ticket/remove-ticket`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof removeTicketBody !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(removeTicketBody !== undefined ? removeTicketBody : {}) : removeTicketBody || \"\";\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {SortTicketsBody} [sortTicketsBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sortTickets: async (sortTicketsBody, options = {}) => {\n      const localVarPath = `/ticket/sort-tickets`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof sortTicketsBody !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(sortTicketsBody !== undefined ? sortTicketsBody : {}) : sortTicketsBody || \"\";\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {SortTicketsBody} [sortTicketsBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sortTicketsSecure: async (sortTicketsBody, options = {}) => {\n      const localVarPath = `/ticket/sort-tickets-secure`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof sortTicketsBody !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(sortTicketsBody !== undefined ? sortTicketsBody : {}) : sortTicketsBody || \"\";\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {CheckoutTicket} [checkoutTicket] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferredTicketBuyerConfirmation: async (checkoutTicket, options = {}) => {\n      const localVarPath = `/ticket/transferred-ticket-buyer-confirmation`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof checkoutTicket !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(checkoutTicket !== undefined ? checkoutTicket : {}) : checkoutTicket || \"\";\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {CheckoutTicket} [checkoutTicket] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferredTicketSellerConfirmation: async (checkoutTicket, options = {}) => {\n      const localVarPath = `/ticket/transferred-ticket-seller-confirmation`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof checkoutTicket !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(checkoutTicket !== undefined ? checkoutTicket : {}) : checkoutTicket || \"\";\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {VerifyEmailBody} [verifyEmailBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    verifyEmail: async (verifyEmailBody, options = {}) => {\n      const localVarPath = `/user/verify-email`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof verifyEmailBody !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(verifyEmailBody !== undefined ? verifyEmailBody : {}) : verifyEmailBody || \"\";\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }\n  };\n};\n/**\n * DefaultApi - functional programming interface\n * @export\n */\n\n_c = DefaultApiAxiosParamCreator;\nconst DefaultApiFp = function (configuration) {\n  return {\n    /**\n     * \n     * @param {HyperWalletBody} [hyperWalletBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async addHyperWalletData(hyperWalletBody, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).addHyperWalletData(hyperWalletBody, options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {ChangePassword} [changePassword] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async changePassword(changePassword, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).changePassword(changePassword, options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async changePasswordFromProfile(options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).changePasswordFromProfile(options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {ForgotPasswordBody} [forgotPasswordBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async forgotPasswordEmail(forgotPasswordBody, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).forgotPasswordEmail(forgotPasswordBody, options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getClientToken(options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getClientToken(options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getOrders(options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getOrders(options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getTicketWallet(options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getTicketWallet(options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getUser(options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getUser(options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async isEmailVerified(options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).isEmailVerified(options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {LoginBody} [loginBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async login(loginBody, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).login(loginBody, options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {OrderConfirmation} [orderConfirmation] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async orderConfirmation(orderConfirmation, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).orderConfirmation(orderConfirmation, options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {PostTicketBody} [postTicketBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async postTicket(postTicketBody, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postTicket(postTicketBody, options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {RemoveTicketBody} [removeTicketBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async refundTicket(removeTicketBody, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).refundTicket(removeTicketBody, options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {SignUpBody} [signUpBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async register(signUpBody, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).register(signUpBody, options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {RemoveTicketBody} [removeTicketBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async removeTicket(removeTicketBody, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).removeTicket(removeTicketBody, options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {SortTicketsBody} [sortTicketsBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async sortTickets(sortTicketsBody, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).sortTickets(sortTicketsBody, options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {SortTicketsBody} [sortTicketsBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async sortTicketsSecure(sortTicketsBody, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).sortTicketsSecure(sortTicketsBody, options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {CheckoutTicket} [checkoutTicket] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async transferredTicketBuyerConfirmation(checkoutTicket, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).transferredTicketBuyerConfirmation(checkoutTicket, options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {CheckoutTicket} [checkoutTicket] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async transferredTicketSellerConfirmation(checkoutTicket, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).transferredTicketSellerConfirmation(checkoutTicket, options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {VerifyEmailBody} [verifyEmailBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async verifyEmail(verifyEmailBody, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).verifyEmail(verifyEmailBody, options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    }\n\n  };\n};\n/**\n * DefaultApi - factory interface\n * @export\n */\n\n_c2 = DefaultApiFp;\nconst DefaultApiFactory = function (configuration, basePath, axios) {\n  return {\n    /**\n     * \n     * @param {HyperWalletBody} [hyperWalletBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    addHyperWalletData(hyperWalletBody, options) {\n      return DefaultApiFp(configuration).addHyperWalletData(hyperWalletBody, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {ChangePassword} [changePassword] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    changePassword(changePassword, options) {\n      return DefaultApiFp(configuration).changePassword(changePassword, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    changePasswordFromProfile(options) {\n      return DefaultApiFp(configuration).changePasswordFromProfile(options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {ForgotPasswordBody} [forgotPasswordBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    forgotPasswordEmail(forgotPasswordBody, options) {\n      return DefaultApiFp(configuration).forgotPasswordEmail(forgotPasswordBody, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getClientToken(options) {\n      return DefaultApiFp(configuration).getClientToken(options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getOrders(options) {\n      return DefaultApiFp(configuration).getOrders(options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getTicketWallet(options) {\n      return DefaultApiFp(configuration).getTicketWallet(options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getUser(options) {\n      return DefaultApiFp(configuration).getUser(options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    isEmailVerified(options) {\n      return DefaultApiFp(configuration).isEmailVerified(options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {LoginBody} [loginBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    login(loginBody, options) {\n      return DefaultApiFp(configuration).login(loginBody, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {OrderConfirmation} [orderConfirmation] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    orderConfirmation(orderConfirmation, options) {\n      return DefaultApiFp(configuration).orderConfirmation(orderConfirmation, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {PostTicketBody} [postTicketBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    postTicket(postTicketBody, options) {\n      return DefaultApiFp(configuration).postTicket(postTicketBody, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {RemoveTicketBody} [removeTicketBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    refundTicket(removeTicketBody, options) {\n      return DefaultApiFp(configuration).refundTicket(removeTicketBody, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {SignUpBody} [signUpBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    register(signUpBody, options) {\n      return DefaultApiFp(configuration).register(signUpBody, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {RemoveTicketBody} [removeTicketBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    removeTicket(removeTicketBody, options) {\n      return DefaultApiFp(configuration).removeTicket(removeTicketBody, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {SortTicketsBody} [sortTicketsBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sortTickets(sortTicketsBody, options) {\n      return DefaultApiFp(configuration).sortTickets(sortTicketsBody, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {SortTicketsBody} [sortTicketsBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sortTicketsSecure(sortTicketsBody, options) {\n      return DefaultApiFp(configuration).sortTicketsSecure(sortTicketsBody, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {CheckoutTicket} [checkoutTicket] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferredTicketBuyerConfirmation(checkoutTicket, options) {\n      return DefaultApiFp(configuration).transferredTicketBuyerConfirmation(checkoutTicket, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {CheckoutTicket} [checkoutTicket] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferredTicketSellerConfirmation(checkoutTicket, options) {\n      return DefaultApiFp(configuration).transferredTicketSellerConfirmation(checkoutTicket, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {VerifyEmailBody} [verifyEmailBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    verifyEmail(verifyEmailBody, options) {\n      return DefaultApiFp(configuration).verifyEmail(verifyEmailBody, options).then(request => request(axios, basePath));\n    }\n\n  };\n};\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\n\n_c3 = DefaultApiFactory;\nclass DefaultApi extends _base__WEBPACK_IMPORTED_MODULE_2__[\"BaseAPI\"] {\n  /**\n   * \n   * @param {HyperWalletBody} [hyperWalletBody] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  addHyperWalletData(hyperWalletBody, options) {\n    return DefaultApiFp(this.configuration).addHyperWalletData(hyperWalletBody, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {ChangePassword} [changePassword] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  changePassword(changePassword, options) {\n    return DefaultApiFp(this.configuration).changePassword(changePassword, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  changePasswordFromProfile(options) {\n    return DefaultApiFp(this.configuration).changePasswordFromProfile(options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {ForgotPasswordBody} [forgotPasswordBody] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  forgotPasswordEmail(forgotPasswordBody, options) {\n    return DefaultApiFp(this.configuration).forgotPasswordEmail(forgotPasswordBody, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  getClientToken(options) {\n    return DefaultApiFp(this.configuration).getClientToken(options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  getOrders(options) {\n    return DefaultApiFp(this.configuration).getOrders(options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  getTicketWallet(options) {\n    return DefaultApiFp(this.configuration).getTicketWallet(options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  getUser(options) {\n    return DefaultApiFp(this.configuration).getUser(options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  isEmailVerified(options) {\n    return DefaultApiFp(this.configuration).isEmailVerified(options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {LoginBody} [loginBody] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  login(loginBody, options) {\n    return DefaultApiFp(this.configuration).login(loginBody, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {OrderConfirmation} [orderConfirmation] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  orderConfirmation(orderConfirmation, options) {\n    return DefaultApiFp(this.configuration).orderConfirmation(orderConfirmation, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {PostTicketBody} [postTicketBody] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  postTicket(postTicketBody, options) {\n    return DefaultApiFp(this.configuration).postTicket(postTicketBody, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {RemoveTicketBody} [removeTicketBody] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  refundTicket(removeTicketBody, options) {\n    return DefaultApiFp(this.configuration).refundTicket(removeTicketBody, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {SignUpBody} [signUpBody] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  register(signUpBody, options) {\n    return DefaultApiFp(this.configuration).register(signUpBody, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {RemoveTicketBody} [removeTicketBody] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  removeTicket(removeTicketBody, options) {\n    return DefaultApiFp(this.configuration).removeTicket(removeTicketBody, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {SortTicketsBody} [sortTicketsBody] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  sortTickets(sortTicketsBody, options) {\n    return DefaultApiFp(this.configuration).sortTickets(sortTicketsBody, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {SortTicketsBody} [sortTicketsBody] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  sortTicketsSecure(sortTicketsBody, options) {\n    return DefaultApiFp(this.configuration).sortTicketsSecure(sortTicketsBody, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {CheckoutTicket} [checkoutTicket] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  transferredTicketBuyerConfirmation(checkoutTicket, options) {\n    return DefaultApiFp(this.configuration).transferredTicketBuyerConfirmation(checkoutTicket, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {CheckoutTicket} [checkoutTicket] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  transferredTicketSellerConfirmation(checkoutTicket, options) {\n    return DefaultApiFp(this.configuration).transferredTicketSellerConfirmation(checkoutTicket, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {VerifyEmailBody} [verifyEmailBody] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  verifyEmail(verifyEmailBody, options) {\n    return DefaultApiFp(this.configuration).verifyEmail(verifyEmailBody, options).then(request => request(this.axios, this.basePath));\n  }\n\n}\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"DefaultApiAxiosParamCreator\");\n$RefreshReg$(_c2, \"DefaultApiFp\");\n$RefreshReg$(_c3, \"DefaultApiFactory\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports_1 = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports_1, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports_1)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports_1;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports_1)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./api/api.ts\n");

/***/ })

})