module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = require('../../../ssr-module-cache.js');
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete installedModules[moduleId];
/******/ 		}
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./api/api.ts":
/*!********************!*\
  !*** ./api/api.ts ***!
  \********************/
/*! exports provided: FilterOptions, MichiganFootballGame, TicketStatus, DefaultApiAxiosParamCreator, DefaultApiFp, DefaultApiFactory, DefaultApi */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FilterOptions\", function() { return FilterOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MichiganFootballGame\", function() { return MichiganFootballGame; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TicketStatus\", function() { return TicketStatus; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DefaultApiAxiosParamCreator\", function() { return DefaultApiAxiosParamCreator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DefaultApiFp\", function() { return DefaultApiFp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DefaultApiFactory\", function() { return DefaultApiFactory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DefaultApi\", function() { return DefaultApi; });\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! url */ \"url\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(url__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base */ \"./api/base.ts\");\n// tslint:disable\n\n/**\n * masterseats-server\n * MasterSeats Server\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n // Some imports not used depending on template conditions\n// @ts-ignore\n\n\n/**\n * \n * @export\n * @interface ChangePassword\n */\n\n/**\n * \n * @export\n * @enum {string}\n */\nlet FilterOptions;\n/**\n * \n * @export\n * @interface ForgotPasswordBody\n */\n\n(function (FilterOptions) {\n  FilterOptions[\"PriceLowestToHighest\"] = \"Price - lowest to highest\";\n  FilterOptions[\"PriceHighestToLowest\"] = \"Price - highest to lowest\";\n  FilterOptions[\"LowestSection\"] = \"Lowest Section\";\n  FilterOptions[\"HighestSection\"] = \"Highest Section\";\n})(FilterOptions || (FilterOptions = {}));\n\n/**\n * \n * @export\n * @enum {string}\n */\nlet MichiganFootballGame;\n/**\n * \n * @export\n * @interface PostTicketBody\n */\n\n(function (MichiganFootballGame) {\n  MichiganFootballGame[\"BallState\"] = \"Michigan vs. Ball State\";\n  MichiganFootballGame[\"ArkansasState\"] = \"Michigan vs. Arkansas State\";\n  MichiganFootballGame[\"Wisconsin\"] = \"Michigan vs. Wisconsin\";\n  MichiganFootballGame[\"PennState\"] = \"Michigan vs. Penn State\";\n  MichiganFootballGame[\"Maryland\"] = \"Michigan vs. Maryland\";\n  MichiganFootballGame[\"Indiana\"] = \"Michigan vs. Indiana\";\n})(MichiganFootballGame || (MichiganFootballGame = {}));\n\n/**\n * \n * @export\n * @enum {string}\n */\nlet TicketStatus;\n/**\n * \n * @export\n * @interface User\n */\n\n(function (TicketStatus) {\n  TicketStatus[\"Open\"] = \"Open\";\n  TicketStatus[\"Removed\"] = \"Removed\";\n  TicketStatus[\"PendingTransfer\"] = \"Pending Transfer\";\n  TicketStatus[\"CompletedTransfer\"] = \"Completed Transfer\";\n})(TicketStatus || (TicketStatus = {}));\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nconst DefaultApiAxiosParamCreator = function (configuration) {\n  return {\n    /**\n     * \n     * @param {ChangePassword} [changePassword] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    changePassword: async (changePassword, options = {}) => {\n      const localVarPath = `/user/change-password`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof changePassword !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(changePassword !== undefined ? changePassword : {}) : changePassword || \"\";\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    changePasswordFromProfile: async (options = {}) => {\n      const localVarPath = `/user/change-password-profile`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {CheckoutTicket} [checkoutTicket] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    checkoutTicket: async (checkoutTicket, options = {}) => {\n      const localVarPath = `/ticket/checkout-ticket`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof checkoutTicket !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(checkoutTicket !== undefined ? checkoutTicket : {}) : checkoutTicket || \"\";\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {ForgotPasswordBody} [forgotPasswordBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    forgotPasswordEmail: async (forgotPasswordBody, options = {}) => {\n      const localVarPath = `/user/forgot-password-email`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof forgotPasswordBody !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(forgotPasswordBody !== undefined ? forgotPasswordBody : {}) : forgotPasswordBody || \"\";\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getClientToken: async (options = {}) => {\n      const localVarPath = `/user/client-token`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getTicketWallet: async (options = {}) => {\n      const localVarPath = `/user/get-ticket-wallet`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getUser: async (options = {}) => {\n      const localVarPath = `/user/get-user`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    isEmailVerified: async (options = {}) => {\n      const localVarPath = `/user/is-email-verified`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {LoginBody} [loginBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    login: async (loginBody, options = {}) => {\n      const localVarPath = `/user/login`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof loginBody !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(loginBody !== undefined ? loginBody : {}) : loginBody || \"\";\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {CheckoutTicket} [checkoutTicket] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    orderConfirmation: async (checkoutTicket, options = {}) => {\n      const localVarPath = `/ticket/order-confirmation`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof checkoutTicket !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(checkoutTicket !== undefined ? checkoutTicket : {}) : checkoutTicket || \"\";\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {PostTicketBody} [postTicketBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    postTicket: async (postTicketBody, options = {}) => {\n      const localVarPath = `/ticket/post-ticket`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof postTicketBody !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(postTicketBody !== undefined ? postTicketBody : {}) : postTicketBody || \"\";\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {SignUpBody} [signUpBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    register: async (signUpBody, options = {}) => {\n      const localVarPath = `/user/register`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof signUpBody !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(signUpBody !== undefined ? signUpBody : {}) : signUpBody || \"\";\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {RemoveTicketBody} [removeTicketBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    removeTicket: async (removeTicketBody, options = {}) => {\n      const localVarPath = `/ticket/remove-ticket`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof removeTicketBody !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(removeTicketBody !== undefined ? removeTicketBody : {}) : removeTicketBody || \"\";\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {SortTicketsBody} [sortTicketsBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sortTickets: async (sortTicketsBody, options = {}) => {\n      const localVarPath = `/ticket/sort-tickets`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof sortTicketsBody !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(sortTicketsBody !== undefined ? sortTicketsBody : {}) : sortTicketsBody || \"\";\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {SortTicketsBody} [sortTicketsBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sortTicketsSecure: async (sortTicketsBody, options = {}) => {\n      const localVarPath = `/ticket/sort-tickets-secure`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof sortTicketsBody !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(sortTicketsBody !== undefined ? sortTicketsBody : {}) : sortTicketsBody || \"\";\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {CheckoutTicket} [checkoutTicket] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferredTicketBuyerConfirmation: async (checkoutTicket, options = {}) => {\n      const localVarPath = `/ticket/transferred-ticket-buyer-confirmation`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof checkoutTicket !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(checkoutTicket !== undefined ? checkoutTicket : {}) : checkoutTicket || \"\";\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {CheckoutTicket} [checkoutTicket] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferredTicketSellerConfirmation: async (checkoutTicket, options = {}) => {\n      const localVarPath = `/ticket/transferred-ticket-seller-confirmation`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {}; // authentication bearer required\n      // http bearer authentication required\n\n      if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;\n        localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof checkoutTicket !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(checkoutTicket !== undefined ? checkoutTicket : {}) : checkoutTicket || \"\";\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * \n     * @param {VerifyEmailBody} [verifyEmailBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    verifyEmail: async (verifyEmailBody, options = {}) => {\n      const localVarPath = `/user/verify-email`;\n      const localVarUrlObj = url__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](localVarPath, true);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarUrlObj.query = { ...localVarUrlObj.query,\n        ...localVarQueryParameter,\n        ...options.query\n      }; // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      const needsSerialization = typeof verifyEmailBody !== \"string\" || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(verifyEmailBody !== undefined ? verifyEmailBody : {}) : verifyEmailBody || \"\";\n      return {\n        url: url__WEBPACK_IMPORTED_MODULE_0__[\"format\"](localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }\n  };\n};\n/**\n * DefaultApi - functional programming interface\n * @export\n */\n\nconst DefaultApiFp = function (configuration) {\n  return {\n    /**\n     * \n     * @param {ChangePassword} [changePassword] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async changePassword(changePassword, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).changePassword(changePassword, options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async changePasswordFromProfile(options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).changePasswordFromProfile(options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {CheckoutTicket} [checkoutTicket] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async checkoutTicket(checkoutTicket, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).checkoutTicket(checkoutTicket, options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {ForgotPasswordBody} [forgotPasswordBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async forgotPasswordEmail(forgotPasswordBody, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).forgotPasswordEmail(forgotPasswordBody, options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getClientToken(options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getClientToken(options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getTicketWallet(options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getTicketWallet(options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getUser(options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getUser(options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async isEmailVerified(options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).isEmailVerified(options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {LoginBody} [loginBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async login(loginBody, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).login(loginBody, options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {CheckoutTicket} [checkoutTicket] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async orderConfirmation(checkoutTicket, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).orderConfirmation(checkoutTicket, options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {PostTicketBody} [postTicketBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async postTicket(postTicketBody, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postTicket(postTicketBody, options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {SignUpBody} [signUpBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async register(signUpBody, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).register(signUpBody, options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {RemoveTicketBody} [removeTicketBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async removeTicket(removeTicketBody, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).removeTicket(removeTicketBody, options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {SortTicketsBody} [sortTicketsBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async sortTickets(sortTicketsBody, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).sortTickets(sortTicketsBody, options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {SortTicketsBody} [sortTicketsBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async sortTicketsSecure(sortTicketsBody, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).sortTicketsSecure(sortTicketsBody, options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {CheckoutTicket} [checkoutTicket] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async transferredTicketBuyerConfirmation(checkoutTicket, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).transferredTicketBuyerConfirmation(checkoutTicket, options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {CheckoutTicket} [checkoutTicket] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async transferredTicketSellerConfirmation(checkoutTicket, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).transferredTicketSellerConfirmation(checkoutTicket, options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * \n     * @param {VerifyEmailBody} [verifyEmailBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async verifyEmail(verifyEmailBody, options) {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).verifyEmail(verifyEmailBody, options);\n      return (axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a, basePath = _base__WEBPACK_IMPORTED_MODULE_2__[\"BASE_PATH\"]) => {\n        const axiosRequestArgs = { ...localVarAxiosArgs.options,\n          url: basePath + localVarAxiosArgs.url\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    }\n\n  };\n};\n/**\n * DefaultApi - factory interface\n * @export\n */\n\nconst DefaultApiFactory = function (configuration, basePath, axios) {\n  return {\n    /**\n     * \n     * @param {ChangePassword} [changePassword] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    changePassword(changePassword, options) {\n      return DefaultApiFp(configuration).changePassword(changePassword, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    changePasswordFromProfile(options) {\n      return DefaultApiFp(configuration).changePasswordFromProfile(options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {CheckoutTicket} [checkoutTicket] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    checkoutTicket(checkoutTicket, options) {\n      return DefaultApiFp(configuration).checkoutTicket(checkoutTicket, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {ForgotPasswordBody} [forgotPasswordBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    forgotPasswordEmail(forgotPasswordBody, options) {\n      return DefaultApiFp(configuration).forgotPasswordEmail(forgotPasswordBody, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getClientToken(options) {\n      return DefaultApiFp(configuration).getClientToken(options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getTicketWallet(options) {\n      return DefaultApiFp(configuration).getTicketWallet(options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getUser(options) {\n      return DefaultApiFp(configuration).getUser(options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    isEmailVerified(options) {\n      return DefaultApiFp(configuration).isEmailVerified(options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {LoginBody} [loginBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    login(loginBody, options) {\n      return DefaultApiFp(configuration).login(loginBody, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {CheckoutTicket} [checkoutTicket] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    orderConfirmation(checkoutTicket, options) {\n      return DefaultApiFp(configuration).orderConfirmation(checkoutTicket, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {PostTicketBody} [postTicketBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    postTicket(postTicketBody, options) {\n      return DefaultApiFp(configuration).postTicket(postTicketBody, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {SignUpBody} [signUpBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    register(signUpBody, options) {\n      return DefaultApiFp(configuration).register(signUpBody, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {RemoveTicketBody} [removeTicketBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    removeTicket(removeTicketBody, options) {\n      return DefaultApiFp(configuration).removeTicket(removeTicketBody, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {SortTicketsBody} [sortTicketsBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sortTickets(sortTicketsBody, options) {\n      return DefaultApiFp(configuration).sortTickets(sortTicketsBody, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {SortTicketsBody} [sortTicketsBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sortTicketsSecure(sortTicketsBody, options) {\n      return DefaultApiFp(configuration).sortTicketsSecure(sortTicketsBody, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {CheckoutTicket} [checkoutTicket] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferredTicketBuyerConfirmation(checkoutTicket, options) {\n      return DefaultApiFp(configuration).transferredTicketBuyerConfirmation(checkoutTicket, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {CheckoutTicket} [checkoutTicket] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferredTicketSellerConfirmation(checkoutTicket, options) {\n      return DefaultApiFp(configuration).transferredTicketSellerConfirmation(checkoutTicket, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     * \n     * @param {VerifyEmailBody} [verifyEmailBody] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    verifyEmail(verifyEmailBody, options) {\n      return DefaultApiFp(configuration).verifyEmail(verifyEmailBody, options).then(request => request(axios, basePath));\n    }\n\n  };\n};\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\n\nclass DefaultApi extends _base__WEBPACK_IMPORTED_MODULE_2__[\"BaseAPI\"] {\n  /**\n   * \n   * @param {ChangePassword} [changePassword] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  changePassword(changePassword, options) {\n    return DefaultApiFp(this.configuration).changePassword(changePassword, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  changePasswordFromProfile(options) {\n    return DefaultApiFp(this.configuration).changePasswordFromProfile(options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {CheckoutTicket} [checkoutTicket] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  checkoutTicket(checkoutTicket, options) {\n    return DefaultApiFp(this.configuration).checkoutTicket(checkoutTicket, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {ForgotPasswordBody} [forgotPasswordBody] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  forgotPasswordEmail(forgotPasswordBody, options) {\n    return DefaultApiFp(this.configuration).forgotPasswordEmail(forgotPasswordBody, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  getClientToken(options) {\n    return DefaultApiFp(this.configuration).getClientToken(options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  getTicketWallet(options) {\n    return DefaultApiFp(this.configuration).getTicketWallet(options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  getUser(options) {\n    return DefaultApiFp(this.configuration).getUser(options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  isEmailVerified(options) {\n    return DefaultApiFp(this.configuration).isEmailVerified(options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {LoginBody} [loginBody] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  login(loginBody, options) {\n    return DefaultApiFp(this.configuration).login(loginBody, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {CheckoutTicket} [checkoutTicket] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  orderConfirmation(checkoutTicket, options) {\n    return DefaultApiFp(this.configuration).orderConfirmation(checkoutTicket, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {PostTicketBody} [postTicketBody] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  postTicket(postTicketBody, options) {\n    return DefaultApiFp(this.configuration).postTicket(postTicketBody, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {SignUpBody} [signUpBody] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  register(signUpBody, options) {\n    return DefaultApiFp(this.configuration).register(signUpBody, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {RemoveTicketBody} [removeTicketBody] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  removeTicket(removeTicketBody, options) {\n    return DefaultApiFp(this.configuration).removeTicket(removeTicketBody, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {SortTicketsBody} [sortTicketsBody] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  sortTickets(sortTicketsBody, options) {\n    return DefaultApiFp(this.configuration).sortTickets(sortTicketsBody, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {SortTicketsBody} [sortTicketsBody] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  sortTicketsSecure(sortTicketsBody, options) {\n    return DefaultApiFp(this.configuration).sortTicketsSecure(sortTicketsBody, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {CheckoutTicket} [checkoutTicket] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  transferredTicketBuyerConfirmation(checkoutTicket, options) {\n    return DefaultApiFp(this.configuration).transferredTicketBuyerConfirmation(checkoutTicket, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {CheckoutTicket} [checkoutTicket] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  transferredTicketSellerConfirmation(checkoutTicket, options) {\n    return DefaultApiFp(this.configuration).transferredTicketSellerConfirmation(checkoutTicket, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * \n   * @param {VerifyEmailBody} [verifyEmailBody] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n\n\n  verifyEmail(verifyEmailBody, options) {\n    return DefaultApiFp(this.configuration).verifyEmail(verifyEmailBody, options).then(request => request(this.axios, this.basePath));\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./api/api.ts\n");

/***/ }),

/***/ "./api/base.ts":
/*!*********************!*\
  !*** ./api/base.ts ***!
  \*********************/
/*! exports provided: BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BASE_PATH\", function() { return BASE_PATH; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"COLLECTION_FORMATS\", function() { return COLLECTION_FORMATS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BaseAPI\", function() { return BaseAPI; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RequiredError\", function() { return RequiredError; });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_0__);\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// tslint:disable\n\n/**\n * masterseats-server\n * MasterSeats Server\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n// Some imports not used depending on template conditions\n// @ts-ignore\n\nconst BASE_PATH = \"https://masterseats-server.herokuapp.com/api/v1\".replace(/\\/+$/, \"\");\n/**\n *\n * @export\n */\n\nconst COLLECTION_FORMATS = {\n  csv: \",\",\n  ssv: \" \",\n  tsv: \"\\t\",\n  pipes: \"|\"\n};\n/**\n *\n * @export\n * @interface RequestArgs\n */\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nclass BaseAPI {\n  constructor(configuration, basePath = BASE_PATH, axios = axios__WEBPACK_IMPORTED_MODULE_0___default.a) {\n    this.basePath = basePath;\n    this.axios = axios;\n\n    _defineProperty(this, \"configuration\", void 0);\n\n    if (configuration) {\n      this.configuration = configuration;\n      this.basePath = configuration.basePath || this.basePath;\n    }\n  }\n\n}\n;\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\n\nclass RequiredError extends Error {\n  constructor(field, msg) {\n    super(msg);\n    this.field = field;\n\n    _defineProperty(this, \"name\", \"RequiredError\");\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvYmFzZS50cz9lYjA0Il0sIm5hbWVzIjpbIkJBU0VfUEFUSCIsInJlcGxhY2UiLCJDT0xMRUNUSU9OX0ZPUk1BVFMiLCJjc3YiLCJzc3YiLCJ0c3YiLCJwaXBlcyIsIkJhc2VBUEkiLCJjb25zdHJ1Y3RvciIsImNvbmZpZ3VyYXRpb24iLCJiYXNlUGF0aCIsImF4aW9zIiwiZ2xvYmFsQXhpb3MiLCJSZXF1aXJlZEVycm9yIiwiRXJyb3IiLCJmaWVsZCIsIm1zZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7Ozs7Ozs7Ozs7O0FBY0E7QUFDQTtBQUNBO0FBRU8sTUFBTUEsU0FBUyxHQUFHLGtEQUFrREMsT0FBbEQsQ0FBMEQsTUFBMUQsRUFBa0UsRUFBbEUsQ0FBbEI7QUFFUDs7Ozs7QUFJTyxNQUFNQyxrQkFBa0IsR0FBRztBQUM5QkMsS0FBRyxFQUFFLEdBRHlCO0FBRTlCQyxLQUFHLEVBQUUsR0FGeUI7QUFHOUJDLEtBQUcsRUFBRSxJQUh5QjtBQUk5QkMsT0FBSyxFQUFFO0FBSnVCLENBQTNCO0FBT1A7Ozs7OztBQVVBOzs7OztBQUtPLE1BQU1DLE9BQU4sQ0FBYztBQUdqQkMsYUFBVyxDQUFDQyxhQUFELEVBQTBDQyxRQUFnQixHQUFHVixTQUE3RCxFQUFrRlcsS0FBb0IsR0FBR0MsNENBQXpHLEVBQXNIO0FBQUEsU0FBNUVGLFFBQTRFLEdBQTVFQSxRQUE0RTtBQUFBLFNBQXBDQyxLQUFvQyxHQUFwQ0EsS0FBb0M7O0FBQUE7O0FBQzdILFFBQUlGLGFBQUosRUFBbUI7QUFDZixXQUFLQSxhQUFMLEdBQXFCQSxhQUFyQjtBQUNBLFdBQUtDLFFBQUwsR0FBZ0JELGFBQWEsQ0FBQ0MsUUFBZCxJQUEwQixLQUFLQSxRQUEvQztBQUNIO0FBQ0o7O0FBUmdCO0FBU3BCO0FBRUQ7Ozs7Ozs7QUFNTyxNQUFNRyxhQUFOLFNBQTRCQyxLQUE1QixDQUFrQztBQUVyQ04sYUFBVyxDQUFRTyxLQUFSLEVBQXVCQyxHQUF2QixFQUFxQztBQUM1QyxVQUFNQSxHQUFOO0FBRDRDLFNBQTdCRCxLQUE2QixHQUE3QkEsS0FBNkI7O0FBQUEsa0NBRHhCLGVBQ3dCO0FBRS9DOztBQUpvQyIsImZpbGUiOiIuL2FwaS9iYXNlLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHNsaW50OmRpc2FibGVcbi8qKlxuICogbWFzdGVyc2VhdHMtc2VydmVyXG4gKiBNYXN0ZXJTZWF0cyBTZXJ2ZXJcbiAqXG4gKiBUaGUgdmVyc2lvbiBvZiB0aGUgT3BlbkFQSSBkb2N1bWVudDogMC4wLjFcbiAqIFxuICpcbiAqIE5PVEU6IFRoaXMgY2xhc3MgaXMgYXV0byBnZW5lcmF0ZWQgYnkgT3BlbkFQSSBHZW5lcmF0b3IgKGh0dHBzOi8vb3BlbmFwaS1nZW5lcmF0b3IudGVjaCkuXG4gKiBodHRwczovL29wZW5hcGktZ2VuZXJhdG9yLnRlY2hcbiAqIERvIG5vdCBlZGl0IHRoZSBjbGFzcyBtYW51YWxseS5cbiAqL1xuXG5cbmltcG9ydCB7IENvbmZpZ3VyYXRpb24gfSBmcm9tIFwiLi9jb25maWd1cmF0aW9uXCI7XG4vLyBTb21lIGltcG9ydHMgbm90IHVzZWQgZGVwZW5kaW5nIG9uIHRlbXBsYXRlIGNvbmRpdGlvbnNcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCBnbG9iYWxBeGlvcywgeyBBeGlvc1Byb21pc2UsIEF4aW9zSW5zdGFuY2UgfSBmcm9tICdheGlvcyc7XG5cbmV4cG9ydCBjb25zdCBCQVNFX1BBVEggPSBcImh0dHBzOi8vbWFzdGVyc2VhdHMtc2VydmVyLmhlcm9rdWFwcC5jb20vYXBpL3YxXCIucmVwbGFjZSgvXFwvKyQvLCBcIlwiKTtcblxuLyoqXG4gKlxuICogQGV4cG9ydFxuICovXG5leHBvcnQgY29uc3QgQ09MTEVDVElPTl9GT1JNQVRTID0ge1xuICAgIGNzdjogXCIsXCIsXG4gICAgc3N2OiBcIiBcIixcbiAgICB0c3Y6IFwiXFx0XCIsXG4gICAgcGlwZXM6IFwifFwiLFxufTtcblxuLyoqXG4gKlxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBSZXF1ZXN0QXJnc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlcXVlc3RBcmdzIHtcbiAgICB1cmw6IHN0cmluZztcbiAgICBvcHRpb25zOiBhbnk7XG59XG5cbi8qKlxuICpcbiAqIEBleHBvcnRcbiAqIEBjbGFzcyBCYXNlQVBJXG4gKi9cbmV4cG9ydCBjbGFzcyBCYXNlQVBJIHtcbiAgICBwcm90ZWN0ZWQgY29uZmlndXJhdGlvbjogQ29uZmlndXJhdGlvbiB8IHVuZGVmaW5lZDtcblxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZ3VyYXRpb24/OiBDb25maWd1cmF0aW9uLCBwcm90ZWN0ZWQgYmFzZVBhdGg6IHN0cmluZyA9IEJBU0VfUEFUSCwgcHJvdGVjdGVkIGF4aW9zOiBBeGlvc0luc3RhbmNlID0gZ2xvYmFsQXhpb3MpIHtcbiAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuY29uZmlndXJhdGlvbiA9IGNvbmZpZ3VyYXRpb247XG4gICAgICAgICAgICB0aGlzLmJhc2VQYXRoID0gY29uZmlndXJhdGlvbi5iYXNlUGF0aCB8fCB0aGlzLmJhc2VQYXRoO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuLyoqXG4gKlxuICogQGV4cG9ydFxuICogQGNsYXNzIFJlcXVpcmVkRXJyb3JcbiAqIEBleHRlbmRzIHtFcnJvcn1cbiAqL1xuZXhwb3J0IGNsYXNzIFJlcXVpcmVkRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgbmFtZTogXCJSZXF1aXJlZEVycm9yXCIgPSBcIlJlcXVpcmVkRXJyb3JcIjtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZmllbGQ6IHN0cmluZywgbXNnPzogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKG1zZyk7XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./api/base.ts\n");

/***/ }),

/***/ "./api/configuration.ts":
/*!******************************!*\
  !*** ./api/configuration.ts ***!
  \******************************/
/*! exports provided: Configuration */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Configuration\", function() { return Configuration; });\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// tslint:disable\n\n/**\n * masterseats-server\n * MasterSeats Server\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nclass Configuration {\n  /**\n   * parameter for apiKey security\n   * @param name security name\n   * @memberof Configuration\n   */\n\n  /**\n   * parameter for basic security\n   * \n   * @type {string}\n   * @memberof Configuration\n   */\n\n  /**\n   * parameter for basic security\n   * \n   * @type {string}\n   * @memberof Configuration\n   */\n\n  /**\n   * parameter for oauth2 security\n   * @param name security name\n   * @param scopes oauth2 scope\n   * @memberof Configuration\n   */\n\n  /**\n   * override base path\n   * \n   * @type {string}\n   * @memberof Configuration\n   */\n\n  /**\n   * base options for axios calls\n   *\n   * @type {any}\n   * @memberof Configuration\n   */\n  constructor(param = {}) {\n    _defineProperty(this, \"apiKey\", void 0);\n\n    _defineProperty(this, \"username\", void 0);\n\n    _defineProperty(this, \"password\", void 0);\n\n    _defineProperty(this, \"accessToken\", void 0);\n\n    _defineProperty(this, \"basePath\", void 0);\n\n    _defineProperty(this, \"baseOptions\", void 0);\n\n    this.apiKey = param.apiKey;\n    this.username = param.username;\n    this.password = param.password;\n    this.accessToken = param.accessToken;\n    this.basePath = param.basePath;\n    this.baseOptions = param.baseOptions;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvY29uZmlndXJhdGlvbi50cz82YTUyIl0sIm5hbWVzIjpbIkNvbmZpZ3VyYXRpb24iLCJjb25zdHJ1Y3RvciIsInBhcmFtIiwiYXBpS2V5IiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImFjY2Vzc1Rva2VuIiwiYmFzZVBhdGgiLCJiYXNlT3B0aW9ucyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUNBOzs7Ozs7Ozs7OztBQXNCTyxNQUFNQSxhQUFOLENBQW9CO0FBQ3ZCOzs7Ozs7QUFNQTs7Ozs7OztBQU9BOzs7Ozs7O0FBT0E7Ozs7Ozs7QUFPQTs7Ozs7OztBQU9BOzs7Ozs7QUFRQUMsYUFBVyxDQUFDQyxLQUE4QixHQUFHLEVBQWxDLEVBQXNDO0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQzdDLFNBQUtDLE1BQUwsR0FBY0QsS0FBSyxDQUFDQyxNQUFwQjtBQUNBLFNBQUtDLFFBQUwsR0FBZ0JGLEtBQUssQ0FBQ0UsUUFBdEI7QUFDQSxTQUFLQyxRQUFMLEdBQWdCSCxLQUFLLENBQUNHLFFBQXRCO0FBQ0EsU0FBS0MsV0FBTCxHQUFtQkosS0FBSyxDQUFDSSxXQUF6QjtBQUNBLFNBQUtDLFFBQUwsR0FBZ0JMLEtBQUssQ0FBQ0ssUUFBdEI7QUFDQSxTQUFLQyxXQUFMLEdBQW1CTixLQUFLLENBQUNNLFdBQXpCO0FBQ0g7O0FBbERzQiIsImZpbGUiOiIuL2FwaS9jb25maWd1cmF0aW9uLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHNsaW50OmRpc2FibGVcbi8qKlxuICogbWFzdGVyc2VhdHMtc2VydmVyXG4gKiBNYXN0ZXJTZWF0cyBTZXJ2ZXJcbiAqXG4gKiBUaGUgdmVyc2lvbiBvZiB0aGUgT3BlbkFQSSBkb2N1bWVudDogMC4wLjFcbiAqIFxuICpcbiAqIE5PVEU6IFRoaXMgY2xhc3MgaXMgYXV0byBnZW5lcmF0ZWQgYnkgT3BlbkFQSSBHZW5lcmF0b3IgKGh0dHBzOi8vb3BlbmFwaS1nZW5lcmF0b3IudGVjaCkuXG4gKiBodHRwczovL29wZW5hcGktZ2VuZXJhdG9yLnRlY2hcbiAqIERvIG5vdCBlZGl0IHRoZSBjbGFzcyBtYW51YWxseS5cbiAqL1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29uZmlndXJhdGlvblBhcmFtZXRlcnMge1xuICAgIGFwaUtleT86IHN0cmluZyB8IFByb21pc2U8c3RyaW5nPiB8ICgobmFtZTogc3RyaW5nKSA9PiBzdHJpbmcpIHwgKChuYW1lOiBzdHJpbmcpID0+IFByb21pc2U8c3RyaW5nPik7XG4gICAgdXNlcm5hbWU/OiBzdHJpbmc7XG4gICAgcGFzc3dvcmQ/OiBzdHJpbmc7XG4gICAgYWNjZXNzVG9rZW4/OiBzdHJpbmcgfCAoKG5hbWU/OiBzdHJpbmcsIHNjb3Blcz86IHN0cmluZ1tdKSA9PiBzdHJpbmcpO1xuICAgIGJhc2VQYXRoPzogc3RyaW5nO1xuICAgIGJhc2VPcHRpb25zPzogYW55O1xufVxuXG5leHBvcnQgY2xhc3MgQ29uZmlndXJhdGlvbiB7XG4gICAgLyoqXG4gICAgICogcGFyYW1ldGVyIGZvciBhcGlLZXkgc2VjdXJpdHlcbiAgICAgKiBAcGFyYW0gbmFtZSBzZWN1cml0eSBuYW1lXG4gICAgICogQG1lbWJlcm9mIENvbmZpZ3VyYXRpb25cbiAgICAgKi9cbiAgICBhcGlLZXk/OiBzdHJpbmcgfCBQcm9taXNlPHN0cmluZz4gfCAoKG5hbWU6IHN0cmluZykgPT4gc3RyaW5nKSB8ICgobmFtZTogc3RyaW5nKSA9PiBQcm9taXNlPHN0cmluZz4pO1xuICAgIC8qKlxuICAgICAqIHBhcmFtZXRlciBmb3IgYmFzaWMgc2VjdXJpdHlcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBDb25maWd1cmF0aW9uXG4gICAgICovXG4gICAgdXNlcm5hbWU/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogcGFyYW1ldGVyIGZvciBiYXNpYyBzZWN1cml0eVxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIENvbmZpZ3VyYXRpb25cbiAgICAgKi9cbiAgICBwYXNzd29yZD86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBwYXJhbWV0ZXIgZm9yIG9hdXRoMiBzZWN1cml0eVxuICAgICAqIEBwYXJhbSBuYW1lIHNlY3VyaXR5IG5hbWVcbiAgICAgKiBAcGFyYW0gc2NvcGVzIG9hdXRoMiBzY29wZVxuICAgICAqIEBtZW1iZXJvZiBDb25maWd1cmF0aW9uXG4gICAgICovXG4gICAgYWNjZXNzVG9rZW4/OiBzdHJpbmcgfCAoKG5hbWU/OiBzdHJpbmcsIHNjb3Blcz86IHN0cmluZ1tdKSA9PiBzdHJpbmcpO1xuICAgIC8qKlxuICAgICAqIG92ZXJyaWRlIGJhc2UgcGF0aFxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIENvbmZpZ3VyYXRpb25cbiAgICAgKi9cbiAgICBiYXNlUGF0aD86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBiYXNlIG9wdGlvbnMgZm9yIGF4aW9zIGNhbGxzXG4gICAgICpcbiAgICAgKiBAdHlwZSB7YW55fVxuICAgICAqIEBtZW1iZXJvZiBDb25maWd1cmF0aW9uXG4gICAgICovXG4gICAgYmFzZU9wdGlvbnM/OiBhbnk7XG5cbiAgICBjb25zdHJ1Y3RvcihwYXJhbTogQ29uZmlndXJhdGlvblBhcmFtZXRlcnMgPSB7fSkge1xuICAgICAgICB0aGlzLmFwaUtleSA9IHBhcmFtLmFwaUtleTtcbiAgICAgICAgdGhpcy51c2VybmFtZSA9IHBhcmFtLnVzZXJuYW1lO1xuICAgICAgICB0aGlzLnBhc3N3b3JkID0gcGFyYW0ucGFzc3dvcmQ7XG4gICAgICAgIHRoaXMuYWNjZXNzVG9rZW4gPSBwYXJhbS5hY2Nlc3NUb2tlbjtcbiAgICAgICAgdGhpcy5iYXNlUGF0aCA9IHBhcmFtLmJhc2VQYXRoO1xuICAgICAgICB0aGlzLmJhc2VPcHRpb25zID0gcGFyYW0uYmFzZU9wdGlvbnM7XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./api/configuration.ts\n");

/***/ }),

/***/ "./api/index.ts":
/*!**********************!*\
  !*** ./api/index.ts ***!
  \**********************/
/*! exports provided: FilterOptions, MichiganFootballGame, TicketStatus, DefaultApiAxiosParamCreator, DefaultApiFp, DefaultApiFactory, DefaultApi, Configuration */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api */ \"./api/api.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"FilterOptions\", function() { return _api__WEBPACK_IMPORTED_MODULE_0__[\"FilterOptions\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"MichiganFootballGame\", function() { return _api__WEBPACK_IMPORTED_MODULE_0__[\"MichiganFootballGame\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TicketStatus\", function() { return _api__WEBPACK_IMPORTED_MODULE_0__[\"TicketStatus\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"DefaultApiAxiosParamCreator\", function() { return _api__WEBPACK_IMPORTED_MODULE_0__[\"DefaultApiAxiosParamCreator\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"DefaultApiFp\", function() { return _api__WEBPACK_IMPORTED_MODULE_0__[\"DefaultApiFp\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"DefaultApiFactory\", function() { return _api__WEBPACK_IMPORTED_MODULE_0__[\"DefaultApiFactory\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"DefaultApi\", function() { return _api__WEBPACK_IMPORTED_MODULE_0__[\"DefaultApi\"]; });\n\n/* harmony import */ var _configuration__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./configuration */ \"./api/configuration.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Configuration\", function() { return _configuration__WEBPACK_IMPORTED_MODULE_1__[\"Configuration\"]; });\n\n// tslint:disable\n\n/**\n * masterseats-server\n * MasterSeats Server\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvaW5kZXgudHM/YWQ2ZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUNBOzs7Ozs7Ozs7OztBQWFBIiwiZmlsZSI6Ii4vYXBpL2luZGV4LnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHNsaW50OmRpc2FibGVcbi8qKlxuICogbWFzdGVyc2VhdHMtc2VydmVyXG4gKiBNYXN0ZXJTZWF0cyBTZXJ2ZXJcbiAqXG4gKiBUaGUgdmVyc2lvbiBvZiB0aGUgT3BlbkFQSSBkb2N1bWVudDogMC4wLjFcbiAqIFxuICpcbiAqIE5PVEU6IFRoaXMgY2xhc3MgaXMgYXV0byBnZW5lcmF0ZWQgYnkgT3BlbkFQSSBHZW5lcmF0b3IgKGh0dHBzOi8vb3BlbmFwaS1nZW5lcmF0b3IudGVjaCkuXG4gKiBodHRwczovL29wZW5hcGktZ2VuZXJhdG9yLnRlY2hcbiAqIERvIG5vdCBlZGl0IHRoZSBjbGFzcyBtYW51YWxseS5cbiAqL1xuXG5cbmV4cG9ydCAqIGZyb20gXCIuL2FwaVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vY29uZmlndXJhdGlvblwiO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./api/index.ts\n");

/***/ }),

/***/ "./assets/theme.less":
/*!***************************!*\
  !*** ./assets/theme.less ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIuL2Fzc2V0cy90aGVtZS5sZXNzLmpzIiwic291cmNlc0NvbnRlbnQiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./assets/theme.less\n");

/***/ }),

/***/ "./pages/_app.tsx":
/*!************************!*\
  !*** ./pages/_app.tsx ***!
  \************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return App; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/head */ \"next/head\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _assets_theme_less__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../assets/theme.less */ \"./assets/theme.less\");\n/* harmony import */ var _assets_theme_less__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_assets_theme_less__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! styled-components */ \"styled-components\");\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(styled_components__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_seo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next-seo */ \"next-seo\");\n/* harmony import */ var next_seo__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_seo__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var styled_media_query__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! styled-media-query */ \"styled-media-query\");\n/* harmony import */ var styled_media_query__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(styled_media_query__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _src_lib_UserContext__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../src/lib/UserContext */ \"./src/lib/UserContext.tsx\");\n/* harmony import */ var _stripe_react_stripe_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @stripe/react-stripe-js */ \"@stripe/react-stripe-js\");\n/* harmony import */ var _stripe_react_stripe_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_stripe_react_stripe_js__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _stripe_stripe_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @stripe/stripe-js */ \"@stripe/stripe-js\");\n/* harmony import */ var _stripe_stripe_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_stripe_stripe_js__WEBPACK_IMPORTED_MODULE_8__);\n\n\n\n\n\n\n\n\n\nconst GlobalInjection = styled_components__WEBPACK_IMPORTED_MODULE_3__[\"createGlobalStyle\"]`\n    .ant-table-cell {\n        font-family: 'Mark Pro Bold';\n    }\n\n    .ant-table {\n        background: rgba(0,0,0,0);\n        color: #000;\n    }\n\n    .ant-table tbody > tr > th {\n        border-bottom: 0px solid #DAE2EF;\n    }\n\n    tbody {\n        background: rgba(0,0,0,0);\n    }\n    .ant-menu {\n        background: rgba(0,0,0,0);\n    }\n    .ant-menu-vertical {\n        border-right: 0px solid #fff;\n    }\n\n    .ant-menu:not(.ant-menu-horizontal) .ant-menu-item-selected {\n        background-color: rgba(0,0,0,0);\n        border-radius: 15px;\n    }\n\n    h1.ant-typography {\n        color: rgba(0,39,76, 0.85);\n    }\n\n    h2.ant-typography {\n        color: rgba(0,39,76, 0.85);\n    }\n\n    h3.ant-typography {\n        color: rgba(0,39,76, 0.85);\n    }\n\n    h4.ant-typography {\n        color: rgba(0,39,76, 0.65);\n    }\n\n    .ant-carousel .slick-dots li button {\n        background: rgb(0,39,76);\n    }\n\n    .ant-carousel .slick-dots li.slick-active button {\n        background: rgb(0,39,76);\n    }\n\n    .ant-btn {\n        font-family: 'Mark Pro Medium';\n        border: none;\n        border-radius: 15px;\n        padding: 15px;\n        padding-left: 20px;\n        padding-right: 20px;\n        height: auto !important;\n        display: inline-block;\n        margin-left:auto;\n        margin-right:auto;\n\n        ${styled_media_query__WEBPACK_IMPORTED_MODULE_5___default.a.lessThan(\"small\")`\n            padding-top: 12px !important;\n            padding-bottom: 12px !important;\n        `}\n    }\n\n    .ant-card-head {\n        display: -webkit-flex;\n        justify-content: center;\n        padding-top: 16px;\n        padding-bottom: 18px;\n        border-bottom-width: 0px;\n    }\n\n    .ant-form-item-has-error .ant-input:focus {\n        box-shadow: none;\n    }\n\n    .ant-form-item-label {\n        font-family: 'Mark Pro';\n        font-weight: bold;\n        opacity: 0.8;\n    }\n\n    .ant-input {\n        font-family: 'Mark Pro';\n        border: none;\n        background-color: rgba(0,0,0,0) !important;\n        color: #000;\n        padding: 2px 11px;\n        border-bottom: 1px solid #DAE2EF;\n\n        &:focus {\n            box-shadow: none;\n        }\n    }\n\n    .ant-tabs-top > .ant-tabs-nav::before {\n        border-bottom: 0px;\n    }\n\n    .ant-tabs-large > .ant-tabs-nav .ant-tabs-tab {\n        font-size: 20px;\n    }\n\n    .ant-dropdown-menu-item:hover, .ant-dropdown-menu-submenu-title:hover {\n        background-color: #fff;\n    }\n\n`;\nconst stripePromise = Object(_stripe_stripe_js__WEBPACK_IMPORTED_MODULE_8__[\"loadStripe\"])(\"pk_test_51H8nrPLchQMoIhQGl3UZDJ34JcDjbE9TSb2Xe87daScoVjHH2H57ufdzjEp43P3vDqvpQeUcwoRo4YKcxvVZ78DD003iIXOWN1\");\nfunction App({\n  Component,\n  pageProps\n}) {\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(next_head__WEBPACK_IMPORTED_MODULE_1___default.a, null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"link\", {\n    rel: \"icon\",\n    type: \"image/png\",\n    href: \"/favicon.png\"\n  })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(next_seo__WEBPACK_IMPORTED_MODULE_4__[\"NextSeo\"], {\n    title: \"MasterSeats\",\n    description: \"A marketplace for all student tickets!\",\n    openGraph: {\n      url: 'https://masterseats.com',\n      title: 'MasterSeats',\n      description: `A marketplace for all student tickets!`,\n      site_name: 'MasterSeats'\n    }\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(GlobalInjection, null), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_src_lib_UserContext__WEBPACK_IMPORTED_MODULE_6__[\"default\"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_stripe_react_stripe_js__WEBPACK_IMPORTED_MODULE_7__[\"Elements\"], {\n    stripe: stripePromise\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, pageProps))));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWdlcy9fYXBwLnRzeD83MjE2Il0sIm5hbWVzIjpbIkdsb2JhbEluamVjdGlvbiIsImNyZWF0ZUdsb2JhbFN0eWxlIiwibWVkaWEiLCJsZXNzVGhhbiIsInN0cmlwZVByb21pc2UiLCJsb2FkU3RyaXBlIiwiQXBwIiwiQ29tcG9uZW50IiwicGFnZVByb3BzIiwidXJsIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsInNpdGVfbmFtZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSxNQUFNQSxlQUFlLEdBQUdDLG1FQUFrQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7VUFpRWhDQyx5REFBSyxDQUFDQyxRQUFOLENBQWUsT0FBZixDQUF3Qjs7O1NBR3hCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBcEVWO0FBb0hBLE1BQU1DLGFBQWEsR0FBR0Msb0VBQVUsQ0FBQyw2R0FBRCxDQUFoQztBQUVlLFNBQVNDLEdBQVQsQ0FBYTtBQUFFQyxXQUFGO0FBQWFDO0FBQWIsQ0FBYixFQUF1QztBQUNsRCxzQkFDSSxxSUFDSSwyREFBQyxnREFBRCxxQkFDSTtBQUFNLE9BQUcsRUFBQyxNQUFWO0FBQWlCLFFBQUksRUFBQyxXQUF0QjtBQUFrQyxRQUFJLEVBQUM7QUFBdkMsSUFESixDQURKLGVBSUksMkRBQUMsZ0RBQUQ7QUFDSSxTQUFLLEVBQUMsYUFEVjtBQUVJLGVBQVcsRUFBQyx3Q0FGaEI7QUFHSSxhQUFTLEVBQUU7QUFDUEMsU0FBRyxFQUFFLHlCQURFO0FBRVBDLFdBQUssRUFBRSxhQUZBO0FBR1BDLGlCQUFXLEVBQUcsd0NBSFA7QUFJUEMsZUFBUyxFQUFFO0FBSko7QUFIZixJQUpKLGVBY0ksMkRBQUMsZUFBRCxPQWRKLGVBZUksMkRBQUMsNERBQUQscUJBQ0ksMkRBQUMsZ0VBQUQ7QUFBVSxVQUFNLEVBQUVSO0FBQWxCLGtCQUNJLDJEQUFDLFNBQUQsRUFBZUksU0FBZixDQURKLENBREosQ0FmSixDQURKO0FBdUJIIiwiZmlsZSI6Ii4vcGFnZXMvX2FwcC50c3guanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHt1c2VFZmZlY3R9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IEhlYWQgZnJvbSAnbmV4dC9oZWFkJ1xuaW1wb3J0ICcuLi9hc3NldHMvdGhlbWUubGVzcydcbmltcG9ydCB7Y3JlYXRlR2xvYmFsU3R5bGV9IGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuaW1wb3J0IHsgTmV4dFNlbyB9IGZyb20gJ25leHQtc2VvJztcbmltcG9ydCBtZWRpYSBmcm9tICdzdHlsZWQtbWVkaWEtcXVlcnknXG5pbXBvcnQgVXNlclByb3ZpZGVyIGZyb20gJy4uL3NyYy9saWIvVXNlckNvbnRleHQnXG5pbXBvcnQge0VsZW1lbnRzfSBmcm9tICdAc3RyaXBlL3JlYWN0LXN0cmlwZS1qcyc7XG5pbXBvcnQge2xvYWRTdHJpcGV9IGZyb20gJ0BzdHJpcGUvc3RyaXBlLWpzJztcblxuY29uc3QgR2xvYmFsSW5qZWN0aW9uID0gY3JlYXRlR2xvYmFsU3R5bGVgXG4gICAgLmFudC10YWJsZS1jZWxsIHtcbiAgICAgICAgZm9udC1mYW1pbHk6ICdNYXJrIFBybyBCb2xkJztcbiAgICB9XG5cbiAgICAuYW50LXRhYmxlIHtcbiAgICAgICAgYmFja2dyb3VuZDogcmdiYSgwLDAsMCwwKTtcbiAgICAgICAgY29sb3I6ICMwMDA7XG4gICAgfVxuXG4gICAgLmFudC10YWJsZSB0Ym9keSA+IHRyID4gdGgge1xuICAgICAgICBib3JkZXItYm90dG9tOiAwcHggc29saWQgI0RBRTJFRjtcbiAgICB9XG5cbiAgICB0Ym9keSB7XG4gICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMCwwLDAsMCk7XG4gICAgfVxuICAgIC5hbnQtbWVudSB7XG4gICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMCwwLDAsMCk7XG4gICAgfVxuICAgIC5hbnQtbWVudS12ZXJ0aWNhbCB7XG4gICAgICAgIGJvcmRlci1yaWdodDogMHB4IHNvbGlkICNmZmY7XG4gICAgfVxuXG4gICAgLmFudC1tZW51Om5vdCguYW50LW1lbnUtaG9yaXpvbnRhbCkgLmFudC1tZW51LWl0ZW0tc2VsZWN0ZWQge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsMCwwLDApO1xuICAgICAgICBib3JkZXItcmFkaXVzOiAxNXB4O1xuICAgIH1cblxuICAgIGgxLmFudC10eXBvZ3JhcGh5IHtcbiAgICAgICAgY29sb3I6IHJnYmEoMCwzOSw3NiwgMC44NSk7XG4gICAgfVxuXG4gICAgaDIuYW50LXR5cG9ncmFwaHkge1xuICAgICAgICBjb2xvcjogcmdiYSgwLDM5LDc2LCAwLjg1KTtcbiAgICB9XG5cbiAgICBoMy5hbnQtdHlwb2dyYXBoeSB7XG4gICAgICAgIGNvbG9yOiByZ2JhKDAsMzksNzYsIDAuODUpO1xuICAgIH1cblxuICAgIGg0LmFudC10eXBvZ3JhcGh5IHtcbiAgICAgICAgY29sb3I6IHJnYmEoMCwzOSw3NiwgMC42NSk7XG4gICAgfVxuXG4gICAgLmFudC1jYXJvdXNlbCAuc2xpY2stZG90cyBsaSBidXR0b24ge1xuICAgICAgICBiYWNrZ3JvdW5kOiByZ2IoMCwzOSw3Nik7XG4gICAgfVxuXG4gICAgLmFudC1jYXJvdXNlbCAuc2xpY2stZG90cyBsaS5zbGljay1hY3RpdmUgYnV0dG9uIHtcbiAgICAgICAgYmFja2dyb3VuZDogcmdiKDAsMzksNzYpO1xuICAgIH1cblxuICAgIC5hbnQtYnRuIHtcbiAgICAgICAgZm9udC1mYW1pbHk6ICdNYXJrIFBybyBNZWRpdW0nO1xuICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDE1cHg7XG4gICAgICAgIHBhZGRpbmc6IDE1cHg7XG4gICAgICAgIHBhZGRpbmctbGVmdDogMjBweDtcbiAgICAgICAgcGFkZGluZy1yaWdodDogMjBweDtcbiAgICAgICAgaGVpZ2h0OiBhdXRvICFpbXBvcnRhbnQ7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgbWFyZ2luLWxlZnQ6YXV0bztcbiAgICAgICAgbWFyZ2luLXJpZ2h0OmF1dG87XG5cbiAgICAgICAgJHttZWRpYS5sZXNzVGhhbihcInNtYWxsXCIpYFxuICAgICAgICAgICAgcGFkZGluZy10b3A6IDEycHggIWltcG9ydGFudDtcbiAgICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAxMnB4ICFpbXBvcnRhbnQ7XG4gICAgICAgIGB9XG4gICAgfVxuXG4gICAgLmFudC1jYXJkLWhlYWQge1xuICAgICAgICBkaXNwbGF5OiAtd2Via2l0LWZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICBwYWRkaW5nLXRvcDogMTZweDtcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDE4cHg7XG4gICAgICAgIGJvcmRlci1ib3R0b20td2lkdGg6IDBweDtcbiAgICB9XG5cbiAgICAuYW50LWZvcm0taXRlbS1oYXMtZXJyb3IgLmFudC1pbnB1dDpmb2N1cyB7XG4gICAgICAgIGJveC1zaGFkb3c6IG5vbmU7XG4gICAgfVxuXG4gICAgLmFudC1mb3JtLWl0ZW0tbGFiZWwge1xuICAgICAgICBmb250LWZhbWlseTogJ01hcmsgUHJvJztcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICAgIG9wYWNpdHk6IDAuODtcbiAgICB9XG5cbiAgICAuYW50LWlucHV0IHtcbiAgICAgICAgZm9udC1mYW1pbHk6ICdNYXJrIFBybyc7XG4gICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLDAsMCwwKSAhaW1wb3J0YW50O1xuICAgICAgICBjb2xvcjogIzAwMDtcbiAgICAgICAgcGFkZGluZzogMnB4IDExcHg7XG4gICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjREFFMkVGO1xuXG4gICAgICAgICY6Zm9jdXMge1xuICAgICAgICAgICAgYm94LXNoYWRvdzogbm9uZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC5hbnQtdGFicy10b3AgPiAuYW50LXRhYnMtbmF2OjpiZWZvcmUge1xuICAgICAgICBib3JkZXItYm90dG9tOiAwcHg7XG4gICAgfVxuXG4gICAgLmFudC10YWJzLWxhcmdlID4gLmFudC10YWJzLW5hdiAuYW50LXRhYnMtdGFiIHtcbiAgICAgICAgZm9udC1zaXplOiAyMHB4O1xuICAgIH1cblxuICAgIC5hbnQtZHJvcGRvd24tbWVudS1pdGVtOmhvdmVyLCAuYW50LWRyb3Bkb3duLW1lbnUtc3VibWVudS10aXRsZTpob3ZlciB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gICAgfVxuXG5gXG5cbmNvbnN0IHN0cmlwZVByb21pc2UgPSBsb2FkU3RyaXBlKFwicGtfdGVzdF81MUg4bnJQTGNoUU1vSWhRR2wzVVpESjM0SmNEamJFOVRTYjJYZTg3ZGFTY29WakhIMkg1N3VmZHpqRXA0M1AzdkRxdnBRZVVjd29SbzRZS2N4dlZaNzhERDAwM2lJWE9XTjFcIik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFwcCh7IENvbXBvbmVudCwgcGFnZVByb3BzIH0pIHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8PlxuICAgICAgICAgICAgPEhlYWQ+XG4gICAgICAgICAgICAgICAgPGxpbmsgcmVsPVwiaWNvblwiIHR5cGU9XCJpbWFnZS9wbmdcIiBocmVmPVwiL2Zhdmljb24ucG5nXCIgLz5cbiAgICAgICAgICAgIDwvSGVhZD5cbiAgICAgICAgICAgIDxOZXh0U2VvIFxuICAgICAgICAgICAgICAgIHRpdGxlPVwiTWFzdGVyU2VhdHNcIlxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPVwiQSBtYXJrZXRwbGFjZSBmb3IgYWxsIHN0dWRlbnQgdGlja2V0cyFcIlxuICAgICAgICAgICAgICAgIG9wZW5HcmFwaD17e1xuICAgICAgICAgICAgICAgICAgICB1cmw6ICdodHRwczovL21hc3RlcnNlYXRzLmNvbScsXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnTWFzdGVyU2VhdHMnLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogYEEgbWFya2V0cGxhY2UgZm9yIGFsbCBzdHVkZW50IHRpY2tldHMhYCxcbiAgICAgICAgICAgICAgICAgICAgc2l0ZV9uYW1lOiAnTWFzdGVyU2VhdHMnLFxuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPEdsb2JhbEluamVjdGlvbi8+XG4gICAgICAgICAgICA8VXNlclByb3ZpZGVyPlxuICAgICAgICAgICAgICAgIDxFbGVtZW50cyBzdHJpcGU9e3N0cmlwZVByb21pc2V9PlxuICAgICAgICAgICAgICAgICAgICA8Q29tcG9uZW50IHsuLi5wYWdlUHJvcHN9IC8+XG4gICAgICAgICAgICAgICAgPC9FbGVtZW50cz5cbiAgICAgICAgICAgIDwvVXNlclByb3ZpZGVyPlxuICAgICAgICA8Lz5cbiAgICApXG59XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgICBpbnRlcmZhY2UgV2luZG93IHsgYW5hbHl0aWNzOiBhbnk7IH1cbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./pages/_app.tsx\n");

/***/ }),

/***/ "./src/lib/UserContext.tsx":
/*!*********************************!*\
  !*** ./src/lib/UserContext.tsx ***!
  \*********************************/
/*! exports provided: UserContext, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UserContext\", function() { return UserContext; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../api */ \"./api/index.ts\");\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nconst UserContext = /*#__PURE__*/Object(react__WEBPACK_IMPORTED_MODULE_0__[\"createContext\"])({\n  currentUser: null,\n  setToken: null,\n  api: null\n});\n\nclass UserProvider extends react__WEBPACK_IMPORTED_MODULE_0__[\"Component\"] {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"setToken\", async token => {\n      if (token === null) {\n        this.setState({\n          api: new _api__WEBPACK_IMPORTED_MODULE_1__[\"DefaultApi\"](),\n          currentToken: null,\n          currentUser: null\n        });\n        return;\n      }\n\n      try {\n        const api = new _api__WEBPACK_IMPORTED_MODULE_1__[\"DefaultApi\"]({\n          accessToken: token\n        });\n        const body = await api.getUser();\n        this.setState({\n          api,\n          currentUser: body.data\n        });\n      } catch (err) {\n        console.error(err);\n      }\n    });\n\n    _defineProperty(this, \"state\", {\n      currentUser: null,\n      setToken: this.setToken,\n      api: new _api__WEBPACK_IMPORTED_MODULE_1__[\"DefaultApi\"]()\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(UserContext.Provider, {\n      value: this.state\n    }, this.props.children);\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (UserProvider);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL1VzZXJDb250ZXh0LnRzeD9kNzg0Il0sIm5hbWVzIjpbIlVzZXJDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsImN1cnJlbnRVc2VyIiwic2V0VG9rZW4iLCJhcGkiLCJVc2VyUHJvdmlkZXIiLCJDb21wb25lbnQiLCJ0b2tlbiIsInNldFN0YXRlIiwiRGVmYXVsdEFwaSIsImN1cnJlbnRUb2tlbiIsImFjY2Vzc1Rva2VuIiwiYm9keSIsImdldFVzZXIiLCJkYXRhIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwicmVuZGVyIiwic3RhdGUiLCJwcm9wcyIsImNoaWxkcmVuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFJQTtBQVFPLE1BQU1BLFdBQVcsZ0JBQUdDLDJEQUFhLENBQXdCO0FBQzVEQyxhQUFXLEVBQUUsSUFEK0M7QUFFNURDLFVBQVEsRUFBRSxJQUZrRDtBQUc1REMsS0FBRyxFQUFFO0FBSHVELENBQXhCLENBQWpDOztBQUtQLE1BQU1DLFlBQU4sU0FBMkJDLCtDQUEzQixDQUFxQztBQUFBO0FBQUE7O0FBQUEsc0NBQ3RCLE1BQU9DLEtBQVAsSUFBZ0M7QUFDdkMsVUFBSUEsS0FBSyxLQUFLLElBQWQsRUFBb0I7QUFDaEIsYUFBS0MsUUFBTCxDQUFjO0FBQUNKLGFBQUcsRUFBRSxJQUFJSywrQ0FBSixFQUFOO0FBQXdCQyxzQkFBWSxFQUFFLElBQXRDO0FBQTRDUixxQkFBVyxFQUFFO0FBQXpELFNBQWQ7QUFDQTtBQUNIOztBQUNELFVBQUk7QUFDQSxjQUFNRSxHQUFHLEdBQUcsSUFBSUssK0NBQUosQ0FBZTtBQUFDRSxxQkFBVyxFQUFFSjtBQUFkLFNBQWYsQ0FBWjtBQUNBLGNBQU1LLElBQUksR0FBRyxNQUFNUixHQUFHLENBQUNTLE9BQUosRUFBbkI7QUFDQSxhQUFLTCxRQUFMLENBQWM7QUFBQ0osYUFBRDtBQUFNRixxQkFBVyxFQUFFVSxJQUFJLENBQUNFO0FBQXhCLFNBQWQ7QUFDSCxPQUpELENBSUUsT0FBT0MsR0FBUCxFQUFZO0FBQ1ZDLGVBQU8sQ0FBQ0MsS0FBUixDQUFjRixHQUFkO0FBQ0g7QUFDSixLQWJnQzs7QUFBQSxtQ0FlekI7QUFDSmIsaUJBQVcsRUFBRSxJQURUO0FBRUpDLGNBQVEsRUFBRSxLQUFLQSxRQUZYO0FBR0pDLFNBQUcsRUFBRSxJQUFJSywrQ0FBSjtBQUhELEtBZnlCO0FBQUE7O0FBcUJqQ1MsUUFBTSxHQUFHO0FBQ0wsd0JBQ0EsMkRBQUMsV0FBRCxDQUFhLFFBQWI7QUFBc0IsV0FBSyxFQUFFLEtBQUtDO0FBQWxDLE9BQ0ssS0FBS0MsS0FBTCxDQUFXQyxRQURoQixDQURBO0FBS0g7O0FBM0JnQzs7QUE2QnRCaEIsMkVBQWYiLCJmaWxlIjoiLi9zcmMvbGliL1VzZXJDb250ZXh0LnRzeC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIGNyZWF0ZUNvbnRleHQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBSb3V0ZXIsIHt3aXRoUm91dGVyfSBmcm9tIFwibmV4dC9yb3V0ZXJcIjtcbmltcG9ydCB7bWVzc2FnZX0gZnJvbSAnYW50ZCdcbmltcG9ydCB7IE5leHRQYWdlLCBOZXh0UGFnZUNvbnRleHQgfSBmcm9tICduZXh0JztcbmltcG9ydCB7VXNlciwgRGVmYXVsdEFwaX0gZnJvbSAnLi4vLi4vYXBpJ1xuXG5pbnRlcmZhY2UgQ29udGV4dFByb3BzIHtcbiAgY3VycmVudFVzZXI/OiBVc2VyLFxuICBhcGk/OiBEZWZhdWx0QXBpXG4gIHNldFRva2VuOiAodG9rZW46IHN0cmluZyB8IG51bGwpID0+IFByb21pc2U8dm9pZD5cbn1cblxuZXhwb3J0IGNvbnN0IFVzZXJDb250ZXh0ID0gY3JlYXRlQ29udGV4dDxQYXJ0aWFsPENvbnRleHRQcm9wcz4+KHtcbiAgICBjdXJyZW50VXNlcjogbnVsbCxcbiAgICBzZXRUb2tlbjogbnVsbCxcbiAgICBhcGk6IG51bGxcbn0pO1xuY2xhc3MgVXNlclByb3ZpZGVyIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBzZXRUb2tlbiA9IGFzeW5jICh0b2tlbjogc3RyaW5nIHwgbnVsbCkgPT4ge1xuICAgICAgICBpZiAodG9rZW4gPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2FwaTogbmV3IERlZmF1bHRBcGkoKSwgY3VycmVudFRva2VuOiBudWxsLCBjdXJyZW50VXNlcjogbnVsbH0pXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgYXBpID0gbmV3IERlZmF1bHRBcGkoe2FjY2Vzc1Rva2VuOiB0b2tlbn0pXG4gICAgICAgICAgICBjb25zdCBib2R5ID0gYXdhaXQgYXBpLmdldFVzZXIoKVxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7YXBpLCBjdXJyZW50VXNlcjogYm9keS5kYXRhfSlcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycilcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRlID0ge1xuICAgICAgICBjdXJyZW50VXNlcjogbnVsbCxcbiAgICAgICAgc2V0VG9rZW46IHRoaXMuc2V0VG9rZW4sXG4gICAgICAgIGFwaTogbmV3IERlZmF1bHRBcGkoKVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgPFVzZXJDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt0aGlzLnN0YXRlfT5cbiAgICAgICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxuICAgICAgICA8L1VzZXJDb250ZXh0LlByb3ZpZGVyPlxuICAgICAgICApO1xuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IFVzZXJQcm92aWRlcjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/lib/UserContext.tsx\n");

/***/ }),

/***/ 0:
/*!*****************************************!*\
  !*** multi private-next-pages/_app.tsx ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! private-next-pages/_app.tsx */"./pages/_app.tsx");


/***/ }),

/***/ "@stripe/react-stripe-js":
/*!******************************************!*\
  !*** external "@stripe/react-stripe-js" ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"@stripe/react-stripe-js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJAc3RyaXBlL3JlYWN0LXN0cmlwZS1qc1wiPzRkZGYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiQHN0cmlwZS9yZWFjdC1zdHJpcGUtanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJAc3RyaXBlL3JlYWN0LXN0cmlwZS1qc1wiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///@stripe/react-stripe-js\n");

/***/ }),

/***/ "@stripe/stripe-js":
/*!************************************!*\
  !*** external "@stripe/stripe-js" ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"@stripe/stripe-js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJAc3RyaXBlL3N0cmlwZS1qc1wiPzk3ODkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiQHN0cmlwZS9zdHJpcGUtanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJAc3RyaXBlL3N0cmlwZS1qc1wiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///@stripe/stripe-js\n");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"axios\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJheGlvc1wiPzcwYzYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiYXhpb3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJheGlvc1wiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///axios\n");

/***/ }),

/***/ "next-seo":
/*!***************************!*\
  !*** external "next-seo" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"next-seo\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJuZXh0LXNlb1wiPzJjYmUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoibmV4dC1zZW8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJuZXh0LXNlb1wiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///next-seo\n");

/***/ }),

/***/ "next/head":
/*!****************************!*\
  !*** external "next/head" ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"next/head\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJuZXh0L2hlYWRcIj81ZWYyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Im5leHQvaGVhZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm5leHQvaGVhZFwiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///next/head\n");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"react\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJyZWFjdFwiPzU4OGUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoicmVhY3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWFjdFwiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///react\n");

/***/ }),

/***/ "styled-components":
/*!************************************!*\
  !*** external "styled-components" ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"styled-components\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJzdHlsZWQtY29tcG9uZW50c1wiP2Y1YWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoic3R5bGVkLWNvbXBvbmVudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJzdHlsZWQtY29tcG9uZW50c1wiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///styled-components\n");

/***/ }),

/***/ "styled-media-query":
/*!*************************************!*\
  !*** external "styled-media-query" ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"styled-media-query\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJzdHlsZWQtbWVkaWEtcXVlcnlcIj9lODE4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6InN0eWxlZC1tZWRpYS1xdWVyeS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInN0eWxlZC1tZWRpYS1xdWVyeVwiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///styled-media-query\n");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"url\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ1cmxcIj82MWU4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6InVybC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInVybFwiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///url\n");

/***/ })

/******/ });